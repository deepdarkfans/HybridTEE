!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVATION	host/include/darknet.h	/^} ACTIVATION;$/;"	t	typeref:enum:__anon3
ACTIVATIONS_H	host/src/activations.h	2;"	d
ACTIVATIONS_TA_H	ta/include/activations_TA.h	2;"	d
ACTIVATION_LAYER_H	host/src/activation_layer.h	2;"	d
ACTIVATION_TA	ta/include/darknet_TA.h	/^} ACTIVATION_TA;$/;"	t	typeref:enum:__anon45
ACTIVE	host/include/darknet.h	/^    ACTIVE,$/;"	e	enum:__anon6
ACTIVE_TA	ta/include/darknet_TA.h	/^    ACTIVE_TA,$/;"	e	enum:__anon46
ADD	host/include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon5
ADD_NOISE_AT_TCB_CUTOFF	ta/include/network_TA.h	4;"	d
AES128	ta/include/aes_TA.h	26;"	d
AES_BLOCKLEN	ta/include/aes_TA.h	30;"	d
AES_BLOCK_SIZE	ta/include/aes.h	18;"	d
AES_CBC_decrypt_buffer	ta/aes_TA.c	/^void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)$/;"	f
AES_CBC_encrypt_buffer	ta/aes_TA.c	/^void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, uint32_t length)$/;"	f
AES_COMMON_H	ta/include/aes-common.h	14;"	d
AES_CTR_xcrypt_buffer	ta/aes_TA.c	/^void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, uint32_t length)$/;"	f
AES_DEBUG	ta/aes-gcm-entry.c	5;"	d	file:
AES_ECB_decrypt	ta/aes_TA.c	/^void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)$/;"	f
AES_ECB_encrypt	ta/aes_TA.c	/^void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)$/;"	f
AES_FULL_UNROLL	ta/include/aes.h	16;"	d
AES_GET_BE16	ta/include/aes-common.h	/^static inline aes_ushort AES_GET_BE16(const aes_uchar *a)$/;"	f
AES_GET_BE24	ta/include/aes-common.h	/^static inline aes_uint AES_GET_BE24(const aes_uchar *a)$/;"	f
AES_GET_BE32	ta/include/aes-common.h	/^static inline aes_uint AES_GET_BE32(const aes_uchar *a)$/;"	f
AES_GET_BE64	ta/include/aes-common.h	/^static inline aes_ulong AES_GET_BE64(const aes_uchar *a)$/;"	f
AES_GET_LE16	ta/include/aes-common.h	/^static inline aes_ushort AES_GET_LE16(const aes_uchar *a)$/;"	f
AES_GET_LE32	ta/include/aes-common.h	/^static inline aes_uint AES_GET_LE32(const aes_uchar *a)$/;"	f
AES_GET_LE64	ta/include/aes-common.h	/^static inline aes_ulong AES_GET_LE64(const aes_uchar *a)$/;"	f
AES_H	ta/include/aes.h	10;"	d
AES_INTERNAL_H	ta/include/aes-internal.h	10;"	d
AES_KEYLEN	ta/include/aes_TA.h	33;"	d
AES_KEYLEN	ta/include/aes_TA.h	36;"	d
AES_KEYLEN	ta/include/aes_TA.h	39;"	d
AES_PRIV_NR_POS	ta/include/aes-internal.h	114;"	d
AES_PRIV_SIZE	ta/include/aes-internal.h	113;"	d
AES_PUT_BE16	ta/include/aes-common.h	/^static inline void AES_PUT_BE16(aes_uchar *a, aes_ushort val)$/;"	f
AES_PUT_BE24	ta/include/aes-common.h	/^static inline void AES_PUT_BE24(aes_uchar *a, aes_uint val)$/;"	f
AES_PUT_BE32	ta/include/aes-common.h	/^static inline void AES_PUT_BE32(aes_uchar *a, aes_uint val)$/;"	f
AES_PUT_BE64	ta/include/aes-common.h	/^static inline void AES_PUT_BE64(aes_uchar *a, aes_ulong val)$/;"	f
AES_PUT_LE16	ta/include/aes-common.h	/^static inline void AES_PUT_LE16(aes_uchar *a, aes_ushort val)$/;"	f
AES_PUT_LE32	ta/include/aes-common.h	/^static inline void AES_PUT_LE32(aes_uchar *a, aes_uint val)$/;"	f
AES_PUT_LE64	ta/include/aes-common.h	/^static inline void AES_PUT_LE64(aes_uchar *a, aes_ulong val)$/;"	f
AES_SMALL_TABLES	ta/include/aes.h	17;"	d
AES_WARN_UNUSED_RESULT	ta/include/aes-common.h	254;"	d
AES_WARN_UNUSED_RESULT	ta/include/aes-common.h	256;"	d
AES_ctx	ta/include/aes_TA.h	/^struct AES_ctx$/;"	s
AES_ctx_set_iv	ta/aes_TA.c	/^void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv)$/;"	f
AES_init_ctx	ta/aes_TA.c	/^void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)$/;"	f
AES_init_ctx_iv	ta/aes_TA.c	/^void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)$/;"	f
AES_keyExpSize	ta/include/aes_TA.h	34;"	d
AES_keyExpSize	ta/include/aes_TA.h	37;"	d
AES_keyExpSize	ta/include/aes_TA.h	40;"	d
ALLOCATE_WORKSPACE_CMD	host/include/main.h	29;"	d
ALLOCATE_WORKSPACE_CMD	ta/include/darknetp_ta.h	37;"	d
AR	host/Makefile	/^AR      ?= $(CROSS_COMPILE)ar$/;"	m
AVGPOOL	host/include/darknet.h	/^    AVGPOOL,$/;"	e	enum:__anon6
AVGPOOL_LAYER_H	host/src/avgpool_layer.h	2;"	d
AVGPOOL_TA	ta/include/darknet_TA.h	/^    AVGPOOL_TA,$/;"	e	enum:__anon46
AddRoundKey	ta/aes_TA.c	/^static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)$/;"	f	file:
B1	host/include/darknet.h	/^    float B1;$/;"	m	struct:__anon8
B1	host/include/darknet.h	/^    float B1;$/;"	m	struct:network
B1	ta/include/darknet_TA.h	/^    float B1;$/;"	m	struct:__anon48
B1	ta/include/darknet_TA.h	/^    float B1;$/;"	m	struct:network_TA
B2	host/include/darknet.h	/^    float B2;$/;"	m	struct:__anon8
B2	host/include/darknet.h	/^    float B2;$/;"	m	struct:network
B2	ta/include/darknet_TA.h	/^    float B2;$/;"	m	struct:__anon48
B2	ta/include/darknet_TA.h	/^    float B2;$/;"	m	struct:network_TA
BACKWARD_ADD_CMD	host/include/main.h	22;"	d
BACKWARD_ADD_CMD	ta/include/darknetp_ta.h	30;"	d
BACKWARD_CMD	host/include/main.h	21;"	d
BACKWARD_CMD	ta/include/darknetp_ta.h	29;"	d
BATCHNORM	host/include/darknet.h	/^    BATCHNORM,$/;"	e	enum:__anon6
BATCHNORM_LAYER_H	host/src/batchnorm_layer.h	2;"	d
BATCHNORM_LAYER_TA_H	ta/include/batchnorm_layer_TA.h	2;"	d
BATCHNORM_TA	ta/include/darknet_TA.h	/^    BATCHNORM_TA,$/;"	e	enum:__anon46
BINARY	host/Makefile	/^BINARY = optee_example_darknetp$/;"	m
BINARY	ta/Makefile	/^BINARY=7fc5c039-0542-4ee1-80af-b4eab2f1998d$/;"	m
BINARY_ACTIVATION	host/include/darknet.h	/^} BINARY_ACTIVATION;$/;"	t	typeref:enum:__anon5
BLANK	host/include/darknet.h	/^    BLANK$/;"	e	enum:__anon6
BLANK_TA	ta/include/darknet_TA.h	/^    BLANK_TA$/;"	e	enum:__anon46
BLAS_H	host/src/blas.h	2;"	d
BLAS_TA_H	ta/include/blas_TA.h	2;"	d
BLOCK	host/include/darknet.h	9;"	d
BMP	host/include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon4
BOX_H	host/src/box.h	2;"	d
BindCreatedSocket	host/src/socket_server.c	/^int BindCreatedSocket(int hSocket, int port)$/;"	f
CALC_LOSS_CMD	host/include/main.h	25;"	d
CALC_LOSS_CMD	ta/include/darknetp_ta.h	33;"	d
CAPTCHA_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
CBC	ta/include/aes_TA.h	14;"	d
CC	host/Makefile	/^CC      ?= $(CROSS_COMPILE)gcc$/;"	m
CFG_TEE_TA_LOG_LEVEL	ta/Makefile	/^CFG_TEE_TA_LOG_LEVEL ?= 4$/;"	m
CLASSIFICATION_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
COL2IM_H	host/src/col2im.h	2;"	d
COL2IM_TA_H	ta/include/col2im_TA.h	2;"	d
COMPARE_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
CONNECTED	host/include/darknet.h	/^    CONNECTED,$/;"	e	enum:__anon6
CONNECTED_LAYER_H	host/src/connected_layer.h	2;"	d
CONNECTED_LAYER_TA_H	ta/include/connected_layer_TA.h	2;"	d
CONNECTED_TA	ta/include/darknet_TA.h	/^    CONNECTED_TA,$/;"	e	enum:__anon46
CONSTANT	host/include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon9
CONSTANT_TA	ta/include/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon49
CONVOLUTIONAL	host/include/darknet.h	/^    CONVOLUTIONAL,$/;"	e	enum:__anon6
CONVOLUTIONAL_LAYER_H	host/src/convolutional_layer.h	2;"	d
CONVOLUTIONAL_LAYER_TA_H	ta/include/convolutional_layer_TA.h	2;"	d
CONVOLUTIONAL_TA	ta/include/darknet_TA.h	/^    CONVOLUTIONAL_TA,$/;"	e	enum:__anon46
COST	host/include/darknet.h	/^    COST,$/;"	e	enum:__anon6
COST_LAYER_H	host/src/cost_layer.h	2;"	d
COST_LAYER_TA_H	ta/include/cost_layer_TA.h	2;"	d
COST_TA	ta/include/darknet_TA.h	/^    COST_TA,$/;"	e	enum:__anon46
COST_TYPE	host/include/darknet.h	/^} COST_TYPE;$/;"	t	typeref:enum:__anon7
COST_TYPE_TA	ta/include/darknet_TA.h	/^} COST_TYPE_TA;$/;"	t	typeref:enum:__anon47
CRNN	host/include/darknet.h	/^    CRNN,$/;"	e	enum:__anon6
CRNN_LAYER_H	host/src/crnn_layer.h	3;"	d
CRNN_TA	ta/include/darknet_TA.h	/^    CRNN_TA,$/;"	e	enum:__anon46
CROP	host/include/darknet.h	/^    CROP,$/;"	e	enum:__anon6
CROP_LAYER_H	host/src/crop_layer.h	2;"	d
CROP_TA	ta/include/darknet_TA.h	/^    CROP_TA,$/;"	e	enum:__anon46
CTR	ta/include/aes_TA.h	22;"	d
CUDA_H	host/src/cuda.h	2;"	d
Cipher	ta/aes_TA.c	/^static void Cipher(state_t* state, const uint8_t* RoundKey)$/;"	f	file:
DARKNET_API	host/include/darknet.h	2;"	d
DARKNET_API_TA	ta/include/darknet_TA.h	2;"	d
DATA_H	host/src/data.h	2;"	d
DECONVOLUTIONAL	host/include/darknet.h	/^    DECONVOLUTIONAL,$/;"	e	enum:__anon6
DECONVOLUTIONAL_LAYER_H	host/src/deconvolutional_layer.h	2;"	d
DECONVOLUTIONAL_TA	ta/include/darknet_TA.h	/^    DECONVOLUTIONAL_TA,$/;"	e	enum:__anon46
DEMO	host/src/demo.c	12;"	d	file:
DEMO_H	host/src/demo.h	2;"	d
DETECTION	host/include/darknet.h	/^    DETECTION,$/;"	e	enum:__anon6
DETECTION_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
DETECTION_LAYER_H	host/src/detection_layer.h	2;"	d
DETECTION_TA	ta/include/darknet_TA.h	/^    DETECTION_TA,$/;"	e	enum:__anon46
DET_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
DIFF_TA_H	host/src/diffprivate.h	2;"	d
DIFF_TA_H	ta/include/diffprivate_TA.h	2;"	d
DIV	host/include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon5
DROPOUT	host/include/darknet.h	/^    DROPOUT,$/;"	e	enum:__anon6
DROPOUT_LAYER_H	host/src/dropout_layer.h	2;"	d
DROPOUT_LAYER_TA_H	ta/include/dropout_layer_TA.h	2;"	d
DROPOUT_TA	ta/include/darknet_TA.h	/^    DROPOUT_TA,$/;"	e	enum:__anon46
ECB	ta/include/aes_TA.h	18;"	d
ELU	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
ELU_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
EXECMAIN	host/Makefile	/^EXECMAIN = main.o$/;"	m
EXECOBJ	host/Makefile	/^EXECOBJ = captcha.o lsd.o super.o art.o tag.o cifar.o go.o rnn.o segmenter.o regressor.o classifier.o coco.o yolo.o detector.o nightmare.o instance-segmenter.o darknet.o$/;"	m
EXECOBJS	host/Makefile	/^EXECOBJS = $(addprefix $(EXECSCR), $(EXECOBJ))$/;"	m
EXECSCR	host/Makefile	/^EXECSCR = examples\/$/;"	m
EXP	host/include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon9
EXP_TA	ta/include/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon49
F1	ta/math_TA.c	/^double F1(double x)$/;"	f
F2	ta/math_TA.c	/^double F2(double x)$/;"	f
FAST_BITS	host/src/stb_image.h	1687;"	d
FORWARD_CMD	host/include/main.h	20;"	d
FORWARD_CMD	ta/include/darknetp_ta.h	28;"	d
FORWARD_SOFTMAX_CMD	host/include/main.h	30;"	d
FORWARD_SOFTMAX_CMD	ta/include/darknetp_ta.h	38;"	d
GEMM_H	host/src/gemm.h	2;"	d
GEMM_TA_H	ta/include/gemm_TA.h	2;"	d
GETU32	ta/include/aes-internal.h	103;"	d
GRU	host/include/darknet.h	/^    GRU,$/;"	e	enum:__anon6
GRU_LAYER_H	host/src/gru_layer.h	3;"	d
GRU_TA	ta/include/darknet_TA.h	/^    GRU_TA,$/;"	e	enum:__anon46
HARDTAN	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
HARDTAN_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
HOST_CROSS_COMPILE	Makefile	/^HOST_CROSS_COMPILE ?= $(CROSS_COMPILE)$/;"	m
IM2COL_H	host/src/im2col.h	2;"	d
IM2COL_TA_H	ta/include/im2col_TA.h	2;"	d
IMAGE_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
IMAGE_H	host/src/image.h	2;"	d
IMTYPE	host/include/darknet.h	/^} IMTYPE;$/;"	t	typeref:enum:__anon4
INCLUDE_STB_IMAGE_WRITE_H	host/src/stb_image_write.h	149;"	d
INSTANCE_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
ISEG	host/include/darknet.h	/^    ISEG,$/;"	e	enum:__anon6
ISEG_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
ISEG_LAYER_H	host/src/iseg_layer.h	2;"	d
ISEG_TA	ta/include/darknet_TA.h	/^    ISEG_TA,$/;"	e	enum:__anon46
InvCipher	ta/aes_TA.c	/^static void InvCipher(state_t* state, const uint8_t* RoundKey)$/;"	f	file:
InvMixColumns	ta/aes_TA.c	/^static void InvMixColumns(state_t* state)$/;"	f	file:
InvShiftRows	ta/aes_TA.c	/^static void InvShiftRows(state_t* state)$/;"	f	file:
InvSubBytes	ta/aes_TA.c	/^static void InvSubBytes(state_t* state)$/;"	f	file:
Iv	ta/include/aes_TA.h	/^  uint8_t Iv[AES_BLOCKLEN];$/;"	m	struct:AES_ctx
JPG	host/include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon4
KeyExpansion	ta/aes_TA.c	/^static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)$/;"	f	file:
L1	host/include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon7
L1_TA	ta/include/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon47
L2NORM	host/include/darknet.h	/^    L2NORM,$/;"	e	enum:__anon6
L2NORM_LAYER_H	host/src/l2norm_layer.h	2;"	d
L2NORM_TA	ta/include/darknet_TA.h	/^    L2NORM_TA,$/;"	e	enum:__anon46
LAYER_TYPE	host/include/darknet.h	/^} LAYER_TYPE;$/;"	t	typeref:enum:__anon6
LAYER_TYPE_TA	ta/include/darknet_TA.h	/^} LAYER_TYPE_TA;$/;"	t	typeref:enum:__anon46
LD	host/Makefile	/^LD      ?= $(CROSS_COMPILE)ld$/;"	m
LDFLAGS	host/Makefile	/^LDFLAGS= -lm -pthread$/;"	m
LEAKY	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
LEAKY_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
LETTERBOX_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
LHTAN	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
LHTAN_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
LINEAR	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
LINEAR_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
LIST_H	host/src/list.h	2;"	d
LOCAL	host/include/darknet.h	/^    LOCAL,$/;"	e	enum:__anon6
LOCAL_C_INCLUDES	Android.mk	/^LOCAL_C_INCLUDES := $(LOCAL_PATH)\/ta\/include \\$/;"	m
LOCAL_LAYER_H	host/src/local_layer.h	2;"	d
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := optee_example_darknetp$/;"	m
LOCAL_MODULE_TAGS	Android.mk	/^LOCAL_MODULE_TAGS := optional$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	ta/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SHARED_LIBRARIES	Android.mk	/^LOCAL_SHARED_LIBRARIES := libteec$/;"	m
LOCAL_TA	ta/include/darknet_TA.h	/^    LOCAL_TA,$/;"	e	enum:__anon46
LOCAL_VENDOR_MODULE	Android.mk	/^LOCAL_VENDOR_MODULE := true$/;"	m
LOGGY	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
LOGGY_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
LOGISTIC	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
LOGISTIC_LAYER_H	host/src/logistic_layer.h	2;"	d
LOGISTIC_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
LOGXENT	host/include/darknet.h	/^    LOGXENT,$/;"	e	enum:__anon6
LOGXENT_TA	ta/include/darknet_TA.h	/^    LOGXENT_TA,$/;"	e	enum:__anon46
LOOKUP_SIZE	ta/darknetp_ta.c	22;"	d	file:
LSTM	host/include/darknet.h	/^    LSTM,$/;"	e	enum:__anon6
LSTM_LAYER_H	host/src/lstm_layer.h	2;"	d
LSTM_TA	ta/include/darknet_TA.h	/^    LSTM_TA,$/;"	e	enum:__anon46
MAIN_CA_H	host/include/main.h	2;"	d
MAKE_CONNECTED_CMD	host/include/main.h	17;"	d
MAKE_CONNECTED_CMD	ta/include/darknetp_ta.h	25;"	d
MAKE_CONV_CMD	host/include/main.h	14;"	d
MAKE_CONV_CMD	ta/include/darknetp_ta.h	22;"	d
MAKE_COST_CMD	host/include/main.h	19;"	d
MAKE_COST_CMD	ta/include/darknetp_ta.h	27;"	d
MAKE_DROP_CMD	host/include/main.h	16;"	d
MAKE_DROP_CMD	ta/include/darknetp_ta.h	24;"	d
MAKE_MAX_CMD	host/include/main.h	15;"	d
MAKE_MAX_CMD	ta/include/darknetp_ta.h	23;"	d
MAKE_NETWORK_CMD	host/include/main.h	12;"	d
MAKE_NETWORK_CMD	ta/include/darknetp_ta.h	20;"	d
MAKE_SOFTMAX_CMD	host/include/main.h	18;"	d
MAKE_SOFTMAX_CMD	ta/include/darknetp_ta.h	26;"	d
MASKED	host/include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon7
MASKED_TA	ta/include/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon47
MATRIX_H	host/src/matrix.h	2;"	d
MAX	host/src/socket_client.c	8;"	d	file:
MAXPOOL	host/include/darknet.h	/^    MAXPOOL,$/;"	e	enum:__anon6
MAXPOOL_LAYER_H	host/src/maxpool_layer.h	2;"	d
MAXPOOL_LAYER_H	ta/include/maxpool_layer_TA.h	2;"	d
MAXPOOL_TA	ta/include/darknet_TA.h	/^    MAXPOOL_TA,$/;"	e	enum:__anon46
MULT	host/include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon5
MULTIPLY_AS_A_FUNCTION	ta/aes_TA.c	63;"	d	file:
MixColumns	ta/aes_TA.c	/^static void MixColumns(state_t* state)$/;"	f	file:
Multiply	ta/aes_TA.c	/^static uint8_t Multiply(uint8_t x, uint8_t y)$/;"	f	file:
Multiply	ta/aes_TA.c	335;"	d	file:
NETWORK	host/include/darknet.h	/^    NETWORK,$/;"	e	enum:__anon6
NETWORK_H	host/src/network.h	3;"	d
NETWORK_TA	ta/include/darknet_TA.h	/^    NETWORK_TA,$/;"	e	enum:__anon46
NETWORK_TA_H	ta/include/network_TA.h	2;"	d
NET_TRUTH_CMD	host/include/main.h	24;"	d
NET_TRUTH_CMD	ta/include/darknetp_ta.h	32;"	d
NM	host/Makefile	/^NM      ?= $(CROSS_COMPILE)nm$/;"	m
NORMALIZATION	host/include/darknet.h	/^    NORMALIZATION,$/;"	e	enum:__anon6
NORMALIZATION_LAYER_H	host/src/normalization_layer.h	2;"	d
NORMALIZATION_TA	ta/include/darknet_TA.h	/^    NORMALIZATION_TA,$/;"	e	enum:__anon46
NUMCHARS	host/src/data.c	489;"	d	file:
Nb	ta/aes_TA.c	46;"	d	file:
Nk	ta/aes_TA.c	49;"	d	file:
Nk	ta/aes_TA.c	52;"	d	file:
Nk	ta/aes_TA.c	55;"	d	file:
Nr	ta/aes_TA.c	50;"	d	file:
Nr	ta/aes_TA.c	53;"	d	file:
Nr	ta/aes_TA.c	56;"	d	file:
OBJ	host/Makefile	/^OBJ = diffprivate.o gemm.o utils.o cuda.o deconvolutional_layer.o convolutional_layer.o list.o image.o activations.o im2col.o col2im.o blas.o crop_layer.o dropout_layer.o maxpool_layer.o softmax_layer.o data.o matrix.o network.o connected_layer.o cost_layer.o parser.o option_list.o detection_layer.o route_layer.o upsample_layer.o box.o normalization_layer.o avgpool_layer.o layer.o local_layer.o shortcut_layer.o logistic_layer.o activation_layer.o rnn_layer.o gru_layer.o crnn_layer.o demo.o batchnorm_layer.o region_layer.o reorg_layer.o tree.o  lstm_layer.o l2norm_layer.o yolo_layer.o iseg_layer.o socket_server.o socket_client.o$/;"	m
OBJCOPY	host/Makefile	/^OBJCOPY ?= $(CROSS_COMPILE)objcopy$/;"	m
OBJDUMP	host/Makefile	/^OBJDUMP ?= $(CROSS_COMPILE)objdump$/;"	m
OBJS	host/Makefile	/^OBJS = $(addprefix $(OBJSCR), $(OBJ))$/;"	m
OBJSCR	host/Makefile	/^OBJSCR = src\/$/;"	m
OLD_CLASSIFICATION_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
OPTEE_CLIENT_EXPORT	Android.mk	/^OPTEE_CLIENT_EXPORT = $(LOCAL_PATH)\/..\/..\/optee_client\/out\/export$/;"	m
OPTION_LIST_H	host/src/option_list.h	2;"	d
OUTPUT_RETURN_CMD	host/include/main.h	27;"	d
OUTPUT_RETURN_CMD	ta/include/darknetp_ta.h	35;"	d
PARSER_H	host/src/parser.h	2;"	d
PAR_TA_H	ta/include/parser_TA.h	2;"	d
PI	ta/include/math_TA.h	5;"	d
PLSE	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
PLSE_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
PNG	host/include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon4
POLY	host/include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon9
POLY_TA	ta/include/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon49
PUTU32	ta/include/aes-internal.h	107;"	d
RAMP	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
RAMP_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
RANDOM	host/include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon9
RANDOM_TA	ta/include/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon49
RAND_NUMBER_GENERATOR	host/include/main.h	31;"	d
RAND_NUMBER_GENERATOR	ta/include/darknetp_ta.h	39;"	d
RCON	ta/include/aes-internal.h	28;"	d
RCON	ta/include/aes-internal.h	63;"	d
READELF	host/Makefile	/^READELF ?= $(CROSS_COMPILE)readelf$/;"	m
REGION	host/include/darknet.h	/^    REGION,$/;"	e	enum:__anon6
REGION_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
REGION_LAYER_H	host/src/region_layer.h	2;"	d
REGION_TA	ta/include/darknet_TA.h	/^    REGION_TA,$/;"	e	enum:__anon46
REGRESSION_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
RELIE	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
RELIE_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
RELU	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
RELU_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
REORG	host/include/darknet.h	/^    REORG,$/;"	e	enum:__anon6
REORG_LAYER_H	host/src/reorg_layer.h	2;"	d
REORG_TA	ta/include/darknet_TA.h	/^    REORG_TA,$/;"	e	enum:__anon46
RNN	host/include/darknet.h	/^    RNN,$/;"	e	enum:__anon6
RNN_LAYER_H	host/src/rnn_layer.h	3;"	d
RNN_TA	ta/include/darknet_TA.h	/^    RNN_TA,$/;"	e	enum:__anon46
ROUND	ta/aes-internal-enc.c	109;"	d	file:
ROUND	ta/aes-internal-enc.c	151;"	d	file:
ROUTE	host/include/darknet.h	/^    ROUTE,$/;"	e	enum:__anon6
ROUTE_LAYER_H	host/src/route_layer.h	2;"	d
ROUTE_TA	ta/include/darknet_TA.h	/^    ROUTE_TA,$/;"	e	enum:__anon46
Rcon	ta/aes_TA.c	/^static const uint8_t Rcon[11] = {$/;"	v	file:
RoundKey	ta/include/aes_TA.h	/^  uint8_t RoundKey[AES_keyExpSize];$/;"	m	struct:AES_ctx
SAVE_WEI_CMD	host/include/main.h	28;"	d
SAVE_WEI_CMD	ta/include/darknetp_ta.h	36;"	d
SECRET_NUM	host/include/darknet.h	24;"	d
SECRET_NUM_TA	ta/include/darknet_TA.h	8;"	d
SEG	host/include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon7
SEGMENTATION_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
SEG_TA	ta/include/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon47
SELU	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
SELU_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
SHORTCUT	host/include/darknet.h	/^    SHORTCUT,$/;"	e	enum:__anon6
SHORTCUT_LAYER_H	host/src/shortcut_layer.h	2;"	d
SHORTCUT_TA	ta/include/darknet_TA.h	/^    SHORTCUT_TA,$/;"	e	enum:__anon46
SIG	host/include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon9
SIG_TA	ta/include/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon49
SMOOTH	host/include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon7
SMOOTH_TA	ta/include/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon47
SOFTMAX	host/include/darknet.h	/^    SOFTMAX,$/;"	e	enum:__anon6
SOFTMAX_LAYER_H	host/src/softmax_layer.h	2;"	d
SOFTMAX_LAYER_TA_H	ta/include/softmax_layer_TA.h	2;"	d
SOFTMAX_TA	ta/include/darknet_TA.h	/^    SOFTMAX_TA,$/;"	e	enum:__anon46
SSE	host/include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon7
SSE_TA	ta/include/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon47
STAIR	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
STAIR_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
STBIDEF	host/src/stb_image.h	330;"	d
STBIDEF	host/src/stb_image.h	332;"	d
STBIWDEF	host/src/stb_image_write.h	154;"	d
STBIWDEF	host/src/stb_image_write.h	157;"	d
STBIWDEF	host/src/stb_image_write.h	159;"	d
STBIW_ASSERT	host/src/stb_image_write.h	236;"	d
STBIW_FREE	host/src/stb_image_write.h	221;"	d
STBIW_MALLOC	host/src/stb_image_write.h	219;"	d
STBIW_MEMMOVE	host/src/stb_image_write.h	230;"	d
STBIW_REALLOC	host/src/stb_image_write.h	220;"	d
STBIW_REALLOC_SIZED	host/src/stb_image_write.h	225;"	d
STBIW_UCHAR	host/src/stb_image_write.h	239;"	d
STBI_ASSERT	host/src/stb_image.h	525;"	d
STBI_FREE	host/src/stb_image.h	583;"	d
STBI_HAS_LROTL	host/src/stb_image.h	563;"	d
STBI_INCLUDE_STB_IMAGE_H	host/src/stb_image.h	107;"	d
STBI_MALLOC	host/src/stb_image.h	581;"	d
STBI_NEON	host/src/stb_image.h	672;"	d
STBI_NOTUSED	host/src/stb_image.h	557;"	d
STBI_NOTUSED	host/src/stb_image.h	559;"	d
STBI_NO_BMP	host/src/stb_image.h	482;"	d
STBI_NO_GIF	host/src/stb_image.h	491;"	d
STBI_NO_HDR	host/src/stb_image.h	494;"	d
STBI_NO_JPEG	host/src/stb_image.h	476;"	d
STBI_NO_PIC	host/src/stb_image.h	497;"	d
STBI_NO_PNG	host/src/stb_image.h	479;"	d
STBI_NO_PNM	host/src/stb_image.h	500;"	d
STBI_NO_PSD	host/src/stb_image.h	485;"	d
STBI_NO_SIMD	host/src/stb_image.h	605;"	d
STBI_NO_SIMD	host/src/stb_image.h	620;"	d
STBI_NO_TGA	host/src/stb_image.h	488;"	d
STBI_NO_ZLIB	host/src/stb_image.h	505;"	d
STBI_ORDER_BGR	host/src/stb_image.h	/^   STBI_ORDER_BGR$/;"	e	enum:__anon19
STBI_ORDER_RGB	host/src/stb_image.h	/^   STBI_ORDER_RGB,$/;"	e	enum:__anon19
STBI_REALLOC	host/src/stb_image.h	582;"	d
STBI_REALLOC_SIZED	host/src/stb_image.h	587;"	d
STBI_SIMD_ALIGN	host/src/stb_image.h	650;"	d
STBI_SIMD_ALIGN	host/src/stb_image.h	658;"	d
STBI_SIMD_ALIGN	host/src/stb_image.h	678;"	d
STBI_SIMD_ALIGN	host/src/stb_image.h	682;"	d
STBI_SSE2	host/src/stb_image.h	624;"	d
STBI_VERSION	host/src/stb_image.h	310;"	d
STBI__BYTECAST	host/src/stb_image.h	1500;"	d
STBI__CASE	host/src/stb_image.h	1538;"	d
STBI__CASE	host/src/stb_image.h	1556;"	d
STBI__CASE	host/src/stb_image.h	1587;"	d
STBI__CASE	host/src/stb_image.h	1605;"	d
STBI__CASE	host/src/stb_image.h	4411;"	d
STBI__CASE	host/src/stb_image.h	4424;"	d
STBI__CASE	host/src/stb_image.h	4428;"	d
STBI__CASE	host/src/stb_image.h	4441;"	d
STBI__COMBO	host/src/stb_image.h	1537;"	d
STBI__COMBO	host/src/stb_image.h	1586;"	d
STBI__F_avg	host/src/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon30
STBI__F_avg_first	host/src/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon30
STBI__F_none	host/src/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon30
STBI__F_paeth	host/src/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon30
STBI__F_paeth_first	host/src/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon30
STBI__F_sub	host/src/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon30
STBI__F_up	host/src/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon30
STBI__HDR_BUFLEN	host/src/stb_image.h	6619;"	d
STBI__IDCT_1D	host/src/stb_image.h	2167;"	d
STBI__MARKER_none	host/src/stb_image.h	2652;"	d
STBI__PNG_TYPE	host/src/stb_image.h	4729;"	d
STBI__RESTART	host/src/stb_image.h	2669;"	d
STBI__SCAN_header	host/src/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon21
STBI__SCAN_load	host/src/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon21
STBI__SCAN_type	host/src/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon21
STBI__X64_TARGET	host/src/stb_image.h	592;"	d
STBI__X86_TARGET	host/src/stb_image.h	594;"	d
STBI__ZFAST_BITS	host/src/stb_image.h	3789;"	d
STBI__ZFAST_MASK	host/src/stb_image.h	3790;"	d
STBI_default	host/src/stb_image.h	/^   STBI_default = 0, \/\/ only used for desired_channels$/;"	e	enum:__anon16
STBI_grey	host/src/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon16
STBI_grey_alpha	host/src/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon16
STBI_rgb	host/src/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon16
STBI_rgb_alpha	host/src/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon16
STB_IMAGE_IMPLEMENTATION	host/src/image.c	8;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	host/src/image.c	10;"	d	file:
STEP	host/include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon9
STEPS	host/include/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon9
STEPS_TA	ta/include/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon49
STEP_TA	ta/include/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon49
STUDY_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
SUB	host/include/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon5
SUPER_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
SWAG_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
ShiftRows	ta/aes_TA.c	/^static void ShiftRows(state_t* state)$/;"	f	file:
SocketConnect	host/src/socket_client.c	/^int SocketConnect(int hSocket, int port)$/;"	f
SocketCreate	host/src/socket_server.c	/^short SocketCreate(void)$/;"	f
SocketCreate_Client	host/src/socket_client.c	/^short SocketCreate_Client(void)$/;"	f
Socket_Client	host/src/socket_client.c	/^int Socket_Client(char *filename, char *filename1, int port, int mode)$/;"	f
Socket_Server	host/src/socket_server.c	/^int Socket_Server(char *filename, char *filesize, char *tag, char *tag_size, clock_t *time, int port, int mode)$/;"	f
SubBytes	ta/aes_TA.c	/^static void SubBytes(state_t* state)$/;"	f	file:
TAG_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
TANH	host/include/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon3
TANH_TA	ta/include/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon45
TA_CROSS_COMPILE	Makefile	/^TA_CROSS_COMPILE ?= $(CROSS_COMPILE)$/;"	m
TA_CURRENT_TA_EXT_PROPERTIES	ta/include/user_ta_header_defines.h	23;"	d
TA_CloseSessionEntryPoint	ta/darknetp_ta.c	/^void TA_CloseSessionEntryPoint(void __maybe_unused *sess_ctx)$/;"	f
TA_CreateEntryPoint	ta/darknetp_ta.c	/^TEE_Result TA_CreateEntryPoint(void)$/;"	f
TA_DARKNETP_H	ta/include/darknetp_ta.h	2;"	d
TA_DARKNETP_UUID	host/include/main.h	34;"	d
TA_DARKNETP_UUID	ta/include/darknetp_ta.h	15;"	d
TA_DATA_SIZE	ta/include/user_ta_header_defines.h	20;"	d
TA_DEV_KIT_DIR	ta/Makefile	/^	@echo 'Note: TA_DEV_KIT_DIR=$(TA_DEV_KIT_DIR)'$/;"	m
TA_DestroyEntryPoint	ta/darknetp_ta.c	/^void TA_DestroyEntryPoint(void)$/;"	f
TA_FLAGS	ta/include/user_ta_header_defines.h	14;"	d
TA_InvokeCommandEntryPoint	ta/darknetp_ta.c	/^TEE_Result TA_InvokeCommandEntryPoint(void __maybe_unused *sess_ctx,$/;"	f
TA_MY_TEST_H_MATH	ta/include/math_TA.h	2;"	d
TA_OpenSessionEntryPoint	ta/darknetp_ta.c	/^TEE_Result TA_OpenSessionEntryPoint(uint32_t param_types,$/;"	f
TA_STACK_SIZE	ta/include/user_ta_header_defines.h	17;"	d
TA_THRESHOLD_LIMIT	ta/include/darknet_TA.h	10;"	d
TA_UUID	ta/include/user_ta_header_defines.h	8;"	d
TD0	ta/include/aes-internal.h	48;"	d
TD0	ta/include/aes-internal.h	88;"	d
TD0_	ta/include/aes-internal.h	56;"	d
TD0_	ta/include/aes-internal.h	96;"	d
TD1	ta/include/aes-internal.h	49;"	d
TD1	ta/include/aes-internal.h	89;"	d
TD1_	ta/include/aes-internal.h	57;"	d
TD1_	ta/include/aes-internal.h	97;"	d
TD2	ta/include/aes-internal.h	50;"	d
TD2	ta/include/aes-internal.h	90;"	d
TD2_	ta/include/aes-internal.h	58;"	d
TD2_	ta/include/aes-internal.h	98;"	d
TD3	ta/include/aes-internal.h	51;"	d
TD3	ta/include/aes-internal.h	91;"	d
TD3_	ta/include/aes-internal.h	59;"	d
TD3_	ta/include/aes-internal.h	99;"	d
TD41	ta/include/aes-internal.h	52;"	d
TD41	ta/include/aes-internal.h	92;"	d
TD42	ta/include/aes-internal.h	53;"	d
TD42	ta/include/aes-internal.h	93;"	d
TD43	ta/include/aes-internal.h	54;"	d
TD43	ta/include/aes-internal.h	94;"	d
TD44	ta/include/aes-internal.h	55;"	d
TD44	ta/include/aes-internal.h	95;"	d
TE0	ta/include/aes-internal.h	30;"	d
TE0	ta/include/aes-internal.h	70;"	d
TE1	ta/include/aes-internal.h	31;"	d
TE1	ta/include/aes-internal.h	71;"	d
TE2	ta/include/aes-internal.h	32;"	d
TE2	ta/include/aes-internal.h	72;"	d
TE3	ta/include/aes-internal.h	33;"	d
TE3	ta/include/aes-internal.h	73;"	d
TE4	ta/include/aes-internal.h	46;"	d
TE4	ta/include/aes-internal.h	86;"	d
TE41	ta/include/aes-internal.h	34;"	d
TE41	ta/include/aes-internal.h	74;"	d
TE411	ta/include/aes-internal.h	42;"	d
TE411	ta/include/aes-internal.h	82;"	d
TE414	ta/include/aes-internal.h	41;"	d
TE414	ta/include/aes-internal.h	81;"	d
TE42	ta/include/aes-internal.h	35;"	d
TE42	ta/include/aes-internal.h	75;"	d
TE421	ta/include/aes-internal.h	38;"	d
TE421	ta/include/aes-internal.h	78;"	d
TE422	ta/include/aes-internal.h	43;"	d
TE422	ta/include/aes-internal.h	83;"	d
TE43	ta/include/aes-internal.h	36;"	d
TE43	ta/include/aes-internal.h	76;"	d
TE432	ta/include/aes-internal.h	39;"	d
TE432	ta/include/aes-internal.h	79;"	d
TE433	ta/include/aes-internal.h	44;"	d
TE433	ta/include/aes-internal.h	84;"	d
TE44	ta/include/aes-internal.h	37;"	d
TE44	ta/include/aes-internal.h	77;"	d
TE443	ta/include/aes-internal.h	40;"	d
TE443	ta/include/aes-internal.h	80;"	d
TE444	ta/include/aes-internal.h	45;"	d
TE444	ta/include/aes-internal.h	85;"	d
TGA	host/include/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon4
TIME	host/src/utils.h	8;"	d
TRANS_WEI_CMD	host/include/main.h	26;"	d
TRANS_WEI_CMD	ta/include/darknetp_ta.h	34;"	d
TREE_H	host/src/tree.h	2;"	d
TWO_PI	host/src/utils.h	15;"	d
Td0	ta/aes-internal.c	/^const aes_uint Td0[256] = {$/;"	v
Td1	ta/aes-internal.c	/^const aes_uint Td1[256] = {$/;"	v
Td2	ta/aes-internal.c	/^const aes_uint Td2[256] = {$/;"	v
Td3	ta/aes-internal.c	/^const aes_uint Td3[256] = {$/;"	v
Td4	ta/aes-internal.c	/^const aes_uint Td4[256] = {$/;"	v
Td4s	ta/aes-internal.c	/^const aes_uchar Td4s[256] = {$/;"	v
Te0	ta/aes-internal.c	/^const aes_uint Te0[256] = {$/;"	v
Te1	ta/aes-internal.c	/^const aes_uint Te1[256] = {$/;"	v
Te2	ta/aes-internal.c	/^const aes_uint Te2[256] = {$/;"	v
Te3	ta/aes-internal.c	/^const aes_uint Te3[256] = {$/;"	v
Te4	ta/aes-internal.c	/^const aes_uint Te4[256] = {$/;"	v
UID	ta/darknetp_ta.c	/^char UID[46] = "b8734d20-832e-43a9-bf9f-17f3e9e041e2";$/;"	v
UPDATE_CMD	host/include/main.h	23;"	d
UPDATE_CMD	ta/include/darknetp_ta.h	31;"	d
UPSAMPLE	host/include/darknet.h	/^    UPSAMPLE,$/;"	e	enum:__anon6
UPSAMPLE_LAYER_H	host/src/upsample_layer.h	2;"	d
UPSAMPLE_TA	ta/include/darknet_TA.h	/^    UPSAMPLE_TA,$/;"	e	enum:__anon46
USER_TA_HEADER_DEFINES_H	ta/include/user_ta_header_defines.h	3;"	d
USET	host/src/lstm_layer.h	7;"	d
USET	host/src/rnn_layer.h	8;"	d
UTILS_H	host/src/utils.h	2;"	d
UTILS_H_TA	ta/include/utils_TA.h	2;"	d
V	Makefile	/^export V?=0$/;"	m
VERIFY_ATTESTATION_TOKEN	host/include/main.h	32;"	d
VERIFY_ATTESTATION_TOKEN	ta/include/darknetp_ta.h	40;"	d
WGAN	host/include/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon7
WGAN_TA	ta/include/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon47
WORKSPACE_NETWORK_CMD	host/include/main.h	13;"	d
WORKSPACE_NETWORK_CMD	ta/include/darknetp_ta.h	21;"	d
WRITING_DATA	host/include/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon14
X	host/include/darknet.h	/^    matrix X;$/;"	m	struct:__anon13
XNOR	host/include/darknet.h	/^    XNOR,$/;"	e	enum:__anon6
XNOR_TA	ta/include/darknet_TA.h	/^    XNOR_TA,$/;"	e	enum:__anon46
XorWithIv	ta/aes_TA.c	/^static void XorWithIv(uint8_t* buf, const uint8_t* Iv)$/;"	f	file:
YCbCr_to_RGB_kernel	host/src/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon23
YOLO	host/include/darknet.h	/^    YOLO,$/;"	e	enum:__anon6
YOLO_LAYER_H	host/src/yolo_layer.h	2;"	d
YOLO_TA	ta/include/darknet_TA.h	/^    YOLO_TA,$/;"	e	enum:__anon46
_AES_H_	ta/include/aes_TA.h	2;"	d
_CRT_NONSTDC_NO_DEPRECATE	host/src/stb_image_write.h	197;"	d
_CRT_SECURE_NO_WARNINGS	host/src/stb_image_write.h	194;"	d
__BIG_ENDIAN	ta/include/aes-common.h	50;"	d
__BIG_ENDIAN	ta/include/aes-common.h	57;"	d
__BIG_ENDIAN	ta/include/aes-common.h	68;"	d
__BIG_ENDIAN	ta/include/aes-common.h	77;"	d
__BYTE_ORDER	ta/include/aes-common.h	48;"	d
__BYTE_ORDER	ta/include/aes-common.h	59;"	d
__BYTE_ORDER	ta/include/aes-common.h	61;"	d
__BYTE_ORDER	ta/include/aes-common.h	69;"	d
__BYTE_ORDER	ta/include/aes-common.h	75;"	d
__LITTLE_ENDIAN	ta/include/aes-common.h	49;"	d
__LITTLE_ENDIAN	ta/include/aes-common.h	56;"	d
__LITTLE_ENDIAN	ta/include/aes-common.h	67;"	d
__LITTLE_ENDIAN	ta/include/aes-common.h	76;"	d
abs_mean	host/examples/nightmare.c	/^float abs_mean(float *x, int n)$/;"	f
absolute	host/include/darknet.h	/^    int absolute;$/;"	m	struct:layer
absolute	ta/include/darknet_TA.h	/^    int absolute;$/;"	m	struct:layer_TA
activate	host/src/activations.c	/^float activate(float x, ACTIVATION a)$/;"	f
activate_TA	ta/activations_TA.c	/^float activate_TA(float x, ACTIVATION_TA a)$/;"	f
activate_array	host/src/activations.c	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
activate_array_TA	ta/activations_TA.c	/^float*  activate_array_TA(float *x, const int n, const ACTIVATION_TA a)$/;"	f
activation	host/include/darknet.h	/^    ACTIVATION activation;$/;"	m	struct:layer
activation	ta/include/darknet_TA.h	/^    ACTIVATION_TA activation;$/;"	m	struct:layer_TA
adam	host/include/darknet.h	/^    int adam;$/;"	m	struct:__anon8
adam	host/include/darknet.h	/^    int adam;$/;"	m	struct:network
adam	ta/include/darknet_TA.h	/^    int adam;$/;"	m	struct:__anon48
adam	ta/include/darknet_TA.h	/^    int adam;$/;"	m	struct:network_TA
add_bias	host/src/convolutional_layer.c	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f
add_bias_TA	ta/convolutional_layer_TA.c	/^void add_bias_TA(float *output, float *biases, int batch, int n, int size)$/;"	f
add_noise_TA	ta/network_TA.c	/^void add_noise_TA(layer *l)$/;"	f
add_pixel	host/src/image.c	/^static void add_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
aes_cbc_TA	ta/parser_TA.c	/^int aes_cbc_TA(char* xcrypt, float* gradient, int org_len, int mode)$/;"	f
aes_cbc_TA_token	ta/parser_TA.c	/^int aes_cbc_TA_token(char* xcrypt, char* attestation_buffer, int len)$/;"	f
aes_char	ta/include/aes-common.h	/^typedef signed char         aes_char;$/;"	t
aes_encrypt	ta/aes-internal-enc.c	/^void aes_encrypt(void *ctx, const aes_uchar *plain, aes_uchar *crypt)$/;"	f
aes_encrypt_deinit	ta/aes-internal-enc.c	/^void aes_encrypt_deinit(void *ctx)$/;"	f
aes_encrypt_init	ta/aes-internal-enc.c	/^void * aes_encrypt_init(const aes_uchar *key, size_t len)$/;"	f
aes_gcm_ad	ta/aes-gcm.c	/^int aes_gcm_ad(const aes_uchar *key, size_t key_len, const aes_uchar *iv, size_t iv_len,$/;"	f
aes_gcm_ae	ta/aes-gcm.c	/^int aes_gcm_ae(const aes_uchar *key, size_t key_len, const aes_uchar *iv, size_t iv_len,$/;"	f
aes_gcm_entry	ta/aes-gcm-entry.c	/^int aes_gcm_entry(char *xcrypt, uint8_t *gradient, uint8_t *tag_buffer, int size)$/;"	f
aes_gcm_gctr	ta/aes-gcm.c	/^static void aes_gcm_gctr(void *aes, const aes_uchar *J0, const aes_uchar *in, size_t len,$/;"	f	file:
aes_gcm_ghash	ta/aes-gcm.c	/^static void aes_gcm_ghash(const aes_uchar *H, const aes_uchar *aad, size_t aad_len,$/;"	f	file:
aes_gcm_init_hash_subkey	ta/aes-gcm.c	/^static void * aes_gcm_init_hash_subkey(const aes_uchar *key, size_t key_len, aes_uchar *H)$/;"	f	file:
aes_gcm_prepare_j0	ta/aes-gcm.c	/^static void aes_gcm_prepare_j0(const aes_uchar *iv, size_t iv_len, const aes_uchar *H, aes_uchar *J0)$/;"	f	file:
aes_gctr	ta/aes-gcm.c	/^static void aes_gctr(void *aes, const aes_uchar *icb, const aes_uchar *x, size_t xlen, aes_uchar *y)$/;"	f	file:
aes_gmac	ta/aes-gcm.c	/^int aes_gmac(const aes_uchar *key, size_t key_len, const aes_uchar *iv, size_t iv_len,$/;"	f
aes_int	ta/include/aes-common.h	/^typedef signed int          aes_int;$/;"	t
aes_long	ta/include/aes-common.h	/^typedef signed long long    aes_long;$/;"	t
aes_rijndael_encrypt	ta/aes-internal-enc.c	/^void aes_rijndael_encrypt(const aes_uint rk[], int Nr, const aes_uchar pt[16], aes_uchar ct[16])$/;"	f
aes_rijndael_key_setup_enc	ta/aes-internal-enc.c	/^int aes_rijndael_key_setup_enc(aes_uint rk[], const aes_uchar cipherKey[], size_t keyBits)$/;"	f
aes_short	ta/include/aes-common.h	/^typedef signed short        aes_short;$/;"	t
aes_uchar	ta/include/aes-common.h	/^typedef unsigned char       aes_uchar;$/;"	t
aes_uint	ta/include/aes-common.h	/^typedef unsigned int        aes_uint;$/;"	t
aes_ulong	ta/include/aes-common.h	/^typedef unsigned long long  aes_ulong;$/;"	t
aes_ushort	ta/include/aes-common.h	/^typedef unsigned short      aes_ushort;$/;"	t
all_a	host/src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon31
allocate_workspace_CA	host/main.c	/^void allocate_workspace_CA(int workspace_size)$/;"	f
allocate_workspace_TA_params	ta/darknetp_ta.c	/^static TEE_Result allocate_workspace_TA_params(uint32_t param_types,$/;"	f	file:
alpha	host/include/darknet.h	/^    float alpha;$/;"	m	struct:layer
alpha	ta/include/darknet_TA.h	/^    float alpha;$/;"	m	struct:layer_TA
alphanum_to_int	host/src/utils.c	/^int alphanum_to_int(char c)$/;"	f
angle	host/include/darknet.h	/^    float angle;$/;"	m	struct:layer
angle	host/include/darknet.h	/^    float angle;$/;"	m	struct:load_args
angle	host/include/darknet.h	/^    float angle;$/;"	m	struct:network
angle	ta/include/darknet_TA.h	/^    float angle;$/;"	m	struct:layer_TA
angle	ta/include/darknet_TA.h	/^    float angle;$/;"	m	struct:network_TA
app14_color_transform	host/src/stb_image.h	/^   int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anon23
aspect	host/include/darknet.h	/^    float aspect;$/;"	m	struct:__anon10
aspect	host/include/darknet.h	/^    float aspect;$/;"	m	struct:load_args
aspect	host/include/darknet.h	/^    float aspect;$/;"	m	struct:network
aspect	ta/include/darknet_TA.h	/^    float aspect;$/;"	m	struct:network_TA
asr	ta/math_TA.c	/^double asr(double a, double b, double eps, double A,int flag)$/;"	f
asr0	ta/math_TA.c	/^double asr0(double a, double b, double eps,int flag)$/;"	f
augment_args	host/include/darknet.h	/^} augment_args;$/;"	t	typeref:struct:__anon10
average	host/examples/darknet.c	/^void average(int argc, char *argv[])$/;"	f
avg	host/src/demo.c	/^static float *avg;$/;"	v	file:
avg_flipped_yolo	host/src/yolo_layer.c	/^void avg_flipped_yolo(layer l)$/;"	f
avg_loss	ta/network_TA.c	/^float avg_loss = -1;$/;"	v
avg_predictions	host/src/demo.c	/^detection *avg_predictions(network *net, int *nboxes)$/;"	f
avgpool_layer	host/src/avgpool_layer.h	/^typedef layer avgpool_layer;$/;"	t
axpy_cpu	host/src/blas.c	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
axpy_cpu_TA	ta/blas_TA.c	/^void axpy_cpu_TA(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
back	host/include/darknet.h	/^    node *back;$/;"	m	struct:list
background	host/include/darknet.h	/^    int background;$/;"	m	struct:layer
background	host/include/darknet.h	/^    int background;$/;"	m	struct:load_args
background	host/src/stb_image.h	/^   stbi_uc *background;          \/\/ The current "background" as far as a gif is concerned$/;"	m	struct:__anon34
background	ta/include/darknet_TA.h	/^    int background;$/;"	m	struct:layer_TA
backward	host/include/darknet.h	/^    void (*backward)  (struct layer, struct network);$/;"	m	struct:layer
backward_TA	host/include/darknet.h	/^    void (*backward_TA)   (struct layer, struct network);$/;"	m	struct:layer
backward_TA	ta/include/darknet_TA.h	/^    void (*backward_TA)  (struct layer_TA, struct network_TA);$/;"	m	struct:layer_TA
backward_activation_layer	host/src/activation_layer.c	/^void backward_activation_layer(layer l, network net)$/;"	f
backward_activation_layer_gpu	host/src/activation_layer.c	/^void backward_activation_layer_gpu(layer l, network net)$/;"	f
backward_avgpool_layer	host/src/avgpool_layer.c	/^void backward_avgpool_layer(const avgpool_layer l, network net)$/;"	f
backward_batchnorm_layer	host/src/batchnorm_layer.c	/^void backward_batchnorm_layer(layer l, network net)$/;"	f
backward_batchnorm_layer_TA	ta/batchnorm_layer_TA.c	/^void backward_batchnorm_layer_TA(layer_TA l, network_TA net)$/;"	f
backward_batchnorm_layer_gpu	host/src/batchnorm_layer.c	/^void backward_batchnorm_layer_gpu(layer l, network net)$/;"	f
backward_bias	host/src/convolutional_layer.c	/^void backward_bias(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_bias_TA	ta/convolutional_layer_TA.c	/^void backward_bias_TA(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_bias_diff	host/src/convolutional_layer.c	/^void backward_bias_diff(float *bias_updates, float *delta, int batch, int n, int size)$/;"	f
backward_connected_layer	host/src/connected_layer.c	/^void backward_connected_layer(layer l, network net)$/;"	f
backward_connected_layer_TA_new	ta/connected_layer_TA.c	/^void backward_connected_layer_TA_new(layer_TA l, network_TA net)$/;"	f
backward_connected_layer_gpu	host/src/connected_layer.c	/^void backward_connected_layer_gpu(layer l, network net)$/;"	f
backward_convolutional_layer	host/src/convolutional_layer.c	/^void backward_convolutional_layer(convolutional_layer l, network net)$/;"	f
backward_convolutional_layer_TA_new	ta/convolutional_layer_TA.c	/^void backward_convolutional_layer_TA_new(convolutional_layer_TA l, network_TA net)$/;"	f
backward_cost_layer	host/src/cost_layer.c	/^void backward_cost_layer(const cost_layer l, network net)$/;"	f
backward_cost_layer_TA	ta/cost_layer_TA.c	/^void backward_cost_layer_TA(const cost_layer_TA l, network_TA net)$/;"	f
backward_cost_layer_gpu	host/src/cost_layer.c	/^void backward_cost_layer_gpu(const cost_layer l, network net)$/;"	f
backward_crnn_layer	host/src/crnn_layer.c	/^void backward_crnn_layer(layer l, network net)$/;"	f
backward_crnn_layer_gpu	host/src/crnn_layer.c	/^void backward_crnn_layer_gpu(layer l, network net)$/;"	f
backward_crop_layer	host/src/crop_layer.c	/^void backward_crop_layer(const crop_layer l, network net){}$/;"	f
backward_crop_layer_gpu	host/src/crop_layer.c	/^void backward_crop_layer_gpu(const crop_layer l, network net){}$/;"	f
backward_deconvolutional_layer	host/src/deconvolutional_layer.c	/^void backward_deconvolutional_layer(layer l, network net)$/;"	f
backward_detection_layer	host/src/detection_layer.c	/^void backward_detection_layer(const detection_layer l, network net)$/;"	f
backward_detection_layer_gpu	host/src/detection_layer.c	/^void backward_detection_layer_gpu(detection_layer l, network net)$/;"	f
backward_dropout_layer	host/src/dropout_layer.c	/^void backward_dropout_layer(dropout_layer l, network net)$/;"	f
backward_dropout_layer_TA_new	ta/dropout_layer_TA.c	/^void backward_dropout_layer_TA_new(dropout_layer_TA l, network_TA net)$/;"	f
backward_gpu	host/include/darknet.h	/^    void (*backward_gpu)  (struct layer, struct network);$/;"	m	struct:layer
backward_gru_layer	host/src/gru_layer.c	/^void backward_gru_layer(layer l, network net)$/;"	f
backward_gru_layer_gpu	host/src/gru_layer.c	/^void backward_gru_layer_gpu(layer l, network net)$/;"	f
backward_iseg_layer	host/src/iseg_layer.c	/^void backward_iseg_layer(const layer l, network net)$/;"	f
backward_iseg_layer_gpu	host/src/iseg_layer.c	/^void backward_iseg_layer_gpu(const layer l, network net)$/;"	f
backward_l2norm_layer	host/src/l2norm_layer.c	/^void backward_l2norm_layer(const layer l, network net)$/;"	f
backward_l2norm_layer_gpu	host/src/l2norm_layer.c	/^void backward_l2norm_layer_gpu(const layer l, network net)$/;"	f
backward_local_layer	host/src/local_layer.c	/^void backward_local_layer(local_layer l, network net)$/;"	f
backward_local_layer_gpu	host/src/local_layer.c	/^void backward_local_layer_gpu(local_layer l, network net)$/;"	f
backward_logistic_layer	host/src/logistic_layer.c	/^void backward_logistic_layer(const layer l, network net)$/;"	f
backward_logistic_layer_gpu	host/src/logistic_layer.c	/^void backward_logistic_layer_gpu(const layer l, network net)$/;"	f
backward_lstm_layer	host/src/lstm_layer.c	/^void backward_lstm_layer(layer l, network state)$/;"	f
backward_lstm_layer_gpu	host/src/lstm_layer.c	/^void backward_lstm_layer_gpu(layer l, network state)$/;"	f
backward_maxpool_layer	host/src/maxpool_layer.c	/^void backward_maxpool_layer(const maxpool_layer l, network net)$/;"	f
backward_maxpool_layer_TA_new	ta/maxpool_layer_TA.c	/^void backward_maxpool_layer_TA_new(const maxpool_layer_TA l, network_TA net)$/;"	f
backward_network	host/src/network.c	/^void backward_network(network *netp)$/;"	f
backward_network_CA	host/main.c	/^void backward_network_CA(float *net_input, int l_inputs, int net_batch, float *net_delta, int net_train)$/;"	f
backward_network_CA_addidion	host/main.c	/^void backward_network_CA_addidion(int net_inputs, int net_batch)$/;"	f
backward_network_TA	ta/network_TA.c	/^void backward_network_TA(float *ca_net_input, float *ca_net_delta)$/;"	f
backward_network_TA_params	ta/darknetp_ta.c	/^static TEE_Result backward_network_TA_params(uint32_t param_types,$/;"	f	file:
backward_network_back_TA_params	ta/darknetp_ta.c	/^static TEE_Result backward_network_back_TA_params(uint32_t param_types,$/;"	f	file:
backward_network_gpu	host/src/network.c	/^void backward_network_gpu(network *netp)$/;"	f
backward_normalization_layer	host/src/normalization_layer.c	/^void backward_normalization_layer(const layer layer, network net)$/;"	f
backward_normalization_layer_gpu	host/src/normalization_layer.c	/^void backward_normalization_layer_gpu(const layer layer, network net)$/;"	f
backward_region_layer	host/src/region_layer.c	/^void backward_region_layer(const layer l, network net)$/;"	f
backward_region_layer_gpu	host/src/region_layer.c	/^void backward_region_layer_gpu(const layer l, network net)$/;"	f
backward_reorg_layer	host/src/reorg_layer.c	/^void backward_reorg_layer(const layer l, network net)$/;"	f
backward_reorg_layer_gpu	host/src/reorg_layer.c	/^void backward_reorg_layer_gpu(layer l, network net)$/;"	f
backward_rnn_layer	host/src/rnn_layer.c	/^void backward_rnn_layer(layer l, network net)$/;"	f
backward_rnn_layer_gpu	host/src/rnn_layer.c	/^void backward_rnn_layer_gpu(layer l, network net)$/;"	f
backward_route_layer	host/src/route_layer.c	/^void backward_route_layer(const route_layer l, network net)$/;"	f
backward_route_layer_gpu	host/src/route_layer.c	/^void backward_route_layer_gpu(const route_layer l, network net)$/;"	f
backward_scale_cpu	host/src/batchnorm_layer.c	/^void backward_scale_cpu(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_scale_cpu_TA	ta/batchnorm_layer_TA.c	/^void backward_scale_cpu_TA(float *x_norm, float *delta, int batch, int n, int size, float *scale_updates)$/;"	f
backward_shortcut_layer	host/src/shortcut_layer.c	/^void backward_shortcut_layer(const layer l, network net)$/;"	f
backward_shortcut_layer_gpu	host/src/shortcut_layer.c	/^void backward_shortcut_layer_gpu(const layer l, network net)$/;"	f
backward_softmax_layer	host/src/softmax_layer.c	/^void backward_softmax_layer(const softmax_layer l, network net)$/;"	f
backward_softmax_layer_TA	ta/softmax_layer_TA.c	/^void backward_softmax_layer_TA(const softmax_layer_TA l, network_TA net)$/;"	f
backward_softmax_layer_gpu	host/src/softmax_layer.c	/^void backward_softmax_layer_gpu(const softmax_layer layer, network net)$/;"	f
backward_upsample_layer	host/src/upsample_layer.c	/^void backward_upsample_layer(const layer l, network net)$/;"	f
backward_upsample_layer_gpu	host/src/upsample_layer.c	/^void backward_upsample_layer_gpu(const layer l, network net)$/;"	f
backward_yolo_layer	host/src/yolo_layer.c	/^void backward_yolo_layer(const layer l, network net)$/;"	f
backward_yolo_layer_gpu	host/src/yolo_layer.c	/^void backward_yolo_layer_gpu(const layer l, network net)$/;"	f
basecfg	host/src/utils.c	/^char *basecfg(char *cfgfile)$/;"	f
batch	host/include/darknet.h	/^    int batch;$/;"	m	struct:__anon8
batch	host/include/darknet.h	/^    int batch;$/;"	m	struct:layer
batch	host/include/darknet.h	/^    int batch;$/;"	m	struct:network
batch	host/src/parser.c	/^    int batch;$/;"	m	struct:size_params	file:
batch	ta/include/darknet_TA.h	/^    int batch;$/;"	m	struct:__anon48
batch	ta/include/darknet_TA.h	/^    int batch;$/;"	m	struct:layer_TA
batch	ta/include/darknet_TA.h	/^    int batch;$/;"	m	struct:network_TA
batch_normalize	host/include/darknet.h	/^    int batch_normalize;$/;"	m	struct:layer
batch_normalize	ta/include/darknet_TA.h	/^    int batch_normalize;$/;"	m	struct:layer_TA
bbox	host/include/darknet.h	/^    box bbox;$/;"	m	struct:detection
bd_algo	host/include/darknet.h	/^    cudnnConvolutionBwdDataAlgo_t bd_algo;$/;"	m	struct:layer
best_3d_shift	host/src/image.c	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f
best_3d_shift_r	host/src/image.c	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f
beta	host/include/darknet.h	/^    float beta;$/;"	m	struct:layer
beta	ta/include/darknet_TA.h	/^    float beta;$/;"	m	struct:layer_TA
bf_algo	host/include/darknet.h	/^    cudnnConvolutionBwdFilterAlgo_t bf_algo;$/;"	m	struct:layer
bgindex	host/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon34
bias_change_gpu	host/include/darknet.h	/^    float * bias_change_gpu;$/;"	m	struct:layer
bias_m	host/include/darknet.h	/^    float * bias_m;$/;"	m	struct:layer
bias_m	ta/include/darknet_TA.h	/^    float * bias_m;$/;"	m	struct:layer_TA
bias_m_gpu	host/include/darknet.h	/^    float *bias_m_gpu;$/;"	m	struct:layer
bias_match	host/include/darknet.h	/^    int bias_match;$/;"	m	struct:layer
bias_match	ta/include/darknet_TA.h	/^    int bias_match;$/;"	m	struct:layer_TA
bias_updates	host/include/darknet.h	/^    float * bias_updates;$/;"	m	struct:layer
bias_updates	ta/include/darknet_TA.h	/^    float * bias_updates;$/;"	m	struct:layer_TA
bias_updates_gpu	host/include/darknet.h	/^    float * bias_updates_gpu;$/;"	m	struct:layer
bias_v	host/include/darknet.h	/^    float * bias_v;$/;"	m	struct:layer
bias_v	ta/include/darknet_TA.h	/^    float * bias_v;$/;"	m	struct:layer_TA
bias_v_gpu	host/include/darknet.h	/^    float *bias_v_gpu;$/;"	m	struct:layer
biases	host/include/darknet.h	/^    float * biases;$/;"	m	struct:layer
biases	ta/include/darknet_TA.h	/^    float * biases;$/;"	m	struct:layer_TA
biases_gpu	host/include/darknet.h	/^    float * biases_gpu;$/;"	m	struct:layer
bilinear_init	host/src/deconvolutional_layer.c	/^void bilinear_init(layer l)$/;"	f
bilinear_interpolate	host/src/image.c	/^static float bilinear_interpolate(image im, float x, float y, int c)$/;"	f	file:
binarize_cpu	host/src/convolutional_layer.c	/^void binarize_cpu(float *input, int n, float *binary)$/;"	f
binarize_cpu_TA	ta/convolutional_layer_TA.c	/^void binarize_cpu_TA(float *input, int n, float *binary)$/;"	f
binarize_image	host/src/image.c	/^image binarize_image(image im)$/;"	f
binarize_input	host/src/convolutional_layer.c	/^void binarize_input(float *input, int n, int size, float *binary)$/;"	f
binarize_weights	host/src/convolutional_layer.c	/^void binarize_weights(float *weights, int n, int size, float *binary)$/;"	f
binarize_weights_TA	ta/convolutional_layer_TA.c	/^void binarize_weights_TA(float *weights, int n, int size, float *binary)$/;"	f
binary	host/include/darknet.h	/^    int binary;$/;"	m	struct:layer
binary	ta/include/darknet_TA.h	/^    int binary;$/;"	m	struct:layer_TA
binary_input	host/include/darknet.h	/^    float * binary_input;$/;"	m	struct:layer
binary_input	ta/include/darknet_TA.h	/^    float * binary_input;$/;"	m	struct:layer_TA
binary_input_gpu	host/include/darknet.h	/^    float * binary_input_gpu;$/;"	m	struct:layer
binary_weights	host/include/darknet.h	/^    float * binary_weights;$/;"	m	struct:layer
binary_weights	ta/include/darknet_TA.h	/^    float * binary_weights;$/;"	m	struct:layer_TA
binary_weights_gpu	host/include/darknet.h	/^    float * binary_weights_gpu;$/;"	m	struct:layer
bits_per_channel	host/src/stb_image.h	/^   int bits_per_channel;$/;"	m	struct:__anon20
blas_handle	host/src/cuda.c	/^cublasHandle_t blas_handle()$/;"	f
blend_image	host/src/image.c	/^image blend_image(image fore, image back, float alpha)$/;"	f
blocky_image	host/src/image.c	/^void blocky_image(image im, int s)$/;"	f
board	host/examples/go.c	/^    float *board;$/;"	m	struct:mcts_tree	file:
board_to_string	host/examples/go.c	/^void board_to_string(char *s, float *board)$/;"	f
border_image	host/src/image.c	/^image border_image(image a, int border)$/;"	f
bottom	host/include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon15
bound_image	host/src/data.c	/^box bound_image(image im)$/;"	f
box	host/include/darknet.h	/^} box;$/;"	t	typeref:struct:__anon12
box_intersection	host/src/box.c	/^float box_intersection(box a, box b)$/;"	f
box_iou	host/src/box.c	/^float box_iou(box a, box b)$/;"	f
box_label	host/include/darknet.h	/^} box_label;$/;"	t	typeref:struct:__anon15
box_rmse	host/src/box.c	/^float box_rmse(box a, box b)$/;"	f
box_union	host/src/box.c	/^float box_union(box a, box b)$/;"	f
boxes	host/include/darknet.h	/^    box **boxes;$/;"	m	struct:__anon13
bpp	host/src/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon31
bswap_16	ta/include/aes-common.h	84;"	d
bswap_32	ta/include/aes-common.h	90;"	d
bswap_32	ta/include/aes-common.h	92;"	d
bswap_64	ta/include/aes-common.h	101;"	d
bswap_64	ta/include/aes-common.h	103;"	d
bubble_sort_top	ta/math_TA.c	/^void bubble_sort_top(float *arr, int len) {$/;"	f
buff	host/src/demo.c	/^static image buff [3];$/;"	v	file:
buff_index	host/src/demo.c	/^static int buff_index = 0;$/;"	v	file:
buff_letter	host/src/demo.c	/^static image buff_letter[3];$/;"	v	file:
buffer_start	host/src/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon18
buflen	host/src/stb_image.h	/^   int buflen;$/;"	m	struct:__anon18
burn_in	host/include/darknet.h	/^    int burn_in;$/;"	m	struct:network
burn_in	ta/include/darknet_TA.h	/^    int burn_in;$/;"	m	struct:network_TA
c	host/include/darknet.h	/^    int c;$/;"	m	struct:__anon11
c	host/include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
c	host/include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer
c	host/src/parser.c	/^    int c;$/;"	m	struct:size_params	file:
c	ta/include/darknet_TA.h	/^    int h, w, c;$/;"	m	struct:network_TA
c	ta/include/darknet_TA.h	/^    int h,w,c;$/;"	m	struct:layer_TA
c_cpu	host/include/darknet.h	/^    float *c_cpu;$/;"	m	struct:layer
c_cpu	ta/include/darknet_TA.h	/^    float *c_cpu;$/;"	m	struct:layer_TA
c_gpu	host/include/darknet.h	/^    float *c_gpu;$/;"	m	struct:layer
calc_network_cost	host/src/network.c	/^void calc_network_cost(network *netp)$/;"	f
calc_network_cost_TA	ta/network_TA.c	/^void calc_network_cost_TA()$/;"	f
calc_network_loss_CA	host/main.c	/^void calc_network_loss_CA(int n, int batch)$/;"	f
calc_network_loss_TA	ta/network_TA.c	/^void calc_network_loss_TA(int n, int batch)$/;"	f
calc_network_loss_TA_params	ta/darknetp_ta.c	/^static TEE_Result calc_network_loss_TA_params(uint32_t param_types,$/;"	f	file:
calculate_liberties	host/examples/go.c	/^static int *calculate_liberties(float *board)$/;"	f	file:
calculate_loss	host/examples/nightmare.c	/^void calculate_loss(float *output, float *delta, int n, float thresh)$/;"	f
cap	host/src/demo.c	/^static void * cap;$/;"	v	file:
cell_cpu	host/include/darknet.h	/^    float *cell_cpu;$/;"	m	struct:layer
cell_cpu	ta/include/darknet_TA.h	/^    float *cell_cpu;$/;"	m	struct:layer_TA
cell_gpu	host/include/darknet.h	/^    float *cell_gpu;$/;"	m	struct:layer
censor_image	host/src/image.c	/^void censor_image(image im, int dx, int dy, int w, int h)$/;"	f
center	host/include/darknet.h	/^    int center;$/;"	m	struct:load_args
center	host/include/darknet.h	/^    int center;$/;"	m	struct:network
center	ta/include/darknet_TA.h	/^    int center;$/;"	m	struct:network_TA
center_crop_image	host/src/image.c	/^image center_crop_image(image im, int w, int h)$/;"	f
change_leaves	host/src/tree.c	/^void change_leaves(tree *t, char *leaf_list)$/;"	f
channel	host/src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon32
channel_order	host/src/stb_image.h	/^   int channel_order;$/;"	m	struct:__anon20
check_error	host/src/cuda.c	/^void check_error(cudaError_t status)$/;"	f
check_ko	host/examples/go.c	/^int check_ko(float *x, float *ko)$/;"	f
child	host/include/darknet.h	/^    int *child;$/;"	m	struct:__anon2
child	ta/include/darknet_TA.h	/^    int *child;$/;"	m	struct:__anon44
children	host/examples/go.c	/^    struct mcts_tree **children;$/;"	m	struct:mcts_tree	typeref:struct:mcts_tree::mcts_tree	file:
class_scale	host/include/darknet.h	/^    float class_scale;$/;"	m	struct:layer
class_scale	ta/include/darknet_TA.h	/^    float class_scale;$/;"	m	struct:layer_TA
classes	host/include/darknet.h	/^    int classes;$/;"	m	struct:__anon1
classes	host/include/darknet.h	/^    int classes;$/;"	m	struct:detection
classes	host/include/darknet.h	/^    int classes;$/;"	m	struct:layer
classes	host/include/darknet.h	/^    int classes;$/;"	m	struct:load_args
classes	ta/include/darknet_TA.h	/^    int classes;$/;"	m	struct:layer_TA
classfix	host/include/darknet.h	/^    int classfix;$/;"	m	struct:layer
classfix	ta/include/darknet_TA.h	/^    int classfix;$/;"	m	struct:layer_TA
clip	host/include/darknet.h	/^    float clip;$/;"	m	struct:layer
clip	host/include/darknet.h	/^    float clip;$/;"	m	struct:network
clip	ta/include/darknet_TA.h	/^    float clip;$/;"	m	struct:layer_TA
clip	ta/include/darknet_TA.h	/^    float clip;$/;"	m	struct:network_TA
coco_classes	host/examples/coco.c	/^char *coco_classes[] = {"person","bicycle","car","motorcycle","airplane","bus","train","truck","boat","traffic light","fire hydrant","stop sign","parking meter","bench","bird","cat","dog","horse","sheep","cow","elephant","bear","zebra","giraffe","backpack","umbrella","handbag","tie","suitcase","frisbee","skis","snowboard","sports ball","kite","baseball bat","baseball glove","skateboard","surfboard","tennis racket","bottle","wine glass","cup","fork","knife","spoon","bowl","banana","apple","sandwich","orange","broccoli","carrot","hot dog","pizza","donut","cake","chair","couch","potted plant","bed","dining table","toilet","tv","laptop","mouse","remote","keyboard","cell phone","microwave","oven","toaster","sink","refrigerator","book","clock","vase","scissors","teddy bear","hair drier","toothbrush"};$/;"	v
coco_ids	host/examples/coco.c	/^int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v
coco_ids	host/examples/detector.c	/^static int coco_ids[] = {1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,70,72,73,74,75,76,77,78,79,80,81,82,84,85,86,87,88,89,90};$/;"	v	file:
code	host/src/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon22
code_bits	host/src/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon23
code_buffer	host/src/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon23
code_buffer	host/src/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon27
codes	host/src/stb_image.h	/^   stbi__gif_lzw codes[8192];$/;"	m	struct:__anon34
coeff	host/src/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon23::__anon24
coeff_h	host/src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon23::__anon24
coeff_w	host/src/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon23::__anon24
col	host/examples/go.c	/^    int col;$/;"	m	struct:__anon42	file:
col2im_add_pixel	host/src/col2im.c	/^void col2im_add_pixel(float *im, int height, int width, int channels,$/;"	f
col2im_add_pixel_TA	ta/col2im_TA.c	/^void col2im_add_pixel_TA(float *im, int height, int width, int channels,$/;"	f
col2im_cpu	host/src/col2im.c	/^void col2im_cpu(float* data_col,$/;"	f
col2im_cpu_TA	ta/col2im_TA.c	/^void col2im_cpu_TA(float* data_col,$/;"	f
collapse_image_layers	host/src/image.c	/^image collapse_image_layers(image source, int border)$/;"	f
collapse_images_horz	host/src/image.c	/^image collapse_images_horz(image *ims, int n)$/;"	f
collapse_images_vert	host/src/image.c	/^image collapse_images_vert(image *ims, int n)$/;"	f
color_table	host/src/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon34
colors	host/src/image.c	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
cols	host/include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix
combine_cpu	host/include/darknet.h	/^    float * combine_cpu;$/;"	m	struct:layer
combine_cpu	ta/include/darknet_TA.h	/^    float * combine_cpu;$/;"	m	struct:layer_TA
combine_delta_cpu	host/include/darknet.h	/^    float * combine_delta_cpu;$/;"	m	struct:layer
combine_delta_cpu	ta/include/darknet_TA.h	/^    float * combine_delta_cpu;$/;"	m	struct:layer_TA
combine_delta_gpu	host/include/darknet.h	/^    float * combine_delta_gpu;$/;"	m	struct:layer
combine_gpu	host/include/darknet.h	/^    float * combine_gpu;$/;"	m	struct:layer
compare_board	host/examples/go.c	/^int compare_board(float *a, float *b)$/;"	f
compare_networks	host/src/network.c	/^void compare_networks(network *n1, network *n2, data test)$/;"	f
composite_3d	host/src/image.c	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f
composite_image	host/src/image.c	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f
concat	host/include/darknet.h	/^    float * concat;$/;"	m	struct:layer
concat	ta/include/darknet_TA.h	/^    float * concat;$/;"	m	struct:layer_TA
concat_data	host/src/data.c	/^data concat_data(data d1, data d2)$/;"	f
concat_datas	host/src/data.c	/^data concat_datas(data *d, int n)$/;"	f
concat_delta	host/include/darknet.h	/^    float * concat_delta;$/;"	m	struct:layer
concat_delta	ta/include/darknet_TA.h	/^    float * concat_delta;$/;"	m	struct:layer_TA
concat_delta_gpu	host/include/darknet.h	/^    float * concat_delta_gpu;$/;"	m	struct:layer
concat_gpu	host/include/darknet.h	/^    float * concat_gpu;$/;"	m	struct:layer
concat_matrix	host/src/data.c	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f
const_cpu	host/src/blas.c	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
constrain	host/src/utils.c	/^float constrain(float min, float max, float a)$/;"	f
constrain_image	host/src/image.c	/^void constrain_image(image im)$/;"	f
constrain_int	host/src/utils.c	/^int constrain_int(int a, int min, int max)$/;"	f
context	host/src/stb_image_write.h	/^   void *context;$/;"	m	struct:__anon35
convDesc	host/include/darknet.h	/^    cudnnConvolutionDescriptor_t convDesc;$/;"	m	struct:layer
convolutional_layer	host/src/convolutional_layer.h	/^typedef layer convolutional_layer;$/;"	t
convolutional_layer_TA	ta/include/convolutional_layer_TA.h	/^typedef layer_TA convolutional_layer_TA;$/;"	t
convolutional_out_height	host/src/convolutional_layer.c	/^int convolutional_out_height(convolutional_layer l)$/;"	f
convolutional_out_height_TA	ta/convolutional_layer_TA.c	/^int convolutional_out_height_TA(convolutional_layer_TA l)$/;"	f
convolutional_out_width	host/src/convolutional_layer.c	/^int convolutional_out_width(convolutional_layer l)$/;"	f
convolutional_out_width_TA	ta/convolutional_layer_TA.c	/^int convolutional_out_width_TA(convolutional_layer_TA l)$/;"	f
coord_scale	host/include/darknet.h	/^    float coord_scale;$/;"	m	struct:layer
coord_scale	ta/include/darknet_TA.h	/^    float coord_scale;$/;"	m	struct:layer_TA
coords	host/include/darknet.h	/^    int coords;$/;"	m	struct:layer
coords	host/include/darknet.h	/^    int coords;$/;"	m	struct:load_args
coords	ta/include/darknet_TA.h	/^    int coords;$/;"	m	struct:layer_TA
copy_board	host/examples/go.c	/^float *copy_board(float *board)$/;"	f
copy_cpu	host/src/blas.c	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_cpu_TA	ta/blas_TA.c	/^void copy_cpu_TA(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_data	host/src/data.c	/^data copy_data(data d)$/;"	f
copy_image	host/src/image.c	/^image copy_image(image p)$/;"	f
copy_image_into	host/src/image.c	/^void copy_image_into(image src, image dest)$/;"	f
copy_matrix	host/src/matrix.c	/^matrix copy_matrix(matrix m)$/;"	f
copy_string	host/src/utils.c	/^char *copy_string(char *s)$/;"	f
correct_boxes	host/src/data.c	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f
correct_region_boxes	host/src/region_layer.c	/^void correct_region_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative)$/;"	f
correct_yolo_boxes	host/src/yolo_layer.c	/^void correct_yolo_boxes(detection *dets, int n, int w, int h, int netw, int neth, int relative)$/;"	f
cost	host/include/darknet.h	/^    float * cost;$/;"	m	struct:layer
cost	host/include/darknet.h	/^    float *cost;$/;"	m	struct:network
cost	ta/include/darknet_TA.h	/^    float * cost;$/;"	m	struct:layer_TA
cost	ta/include/darknet_TA.h	/^    float *cost;$/;"	m	struct:network_TA
cost_layer	host/src/cost_layer.h	/^typedef layer cost_layer;$/;"	t
cost_layer_TA	ta/include/cost_layer_TA.h	/^typedef layer_TA cost_layer_TA;$/;"	t
cost_type	host/include/darknet.h	/^    COST_TYPE cost_type;$/;"	m	struct:layer
cost_type	ta/include/darknet_TA.h	/^    COST_TYPE_TA cost_type;$/;"	m	struct:layer_TA
count_fields	host/src/utils.c	/^int count_fields(char *line)$/;"	f
count_global	host/src/parser.c	/^int count_global = 0;$/;"	v
counts	host/include/darknet.h	/^    int   * counts;$/;"	m	struct:layer
counts	ta/include/darknet_TA.h	/^    int   * counts;$/;"	m	struct:layer_TA
crop_image	host/src/image.c	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f
crop_layer	host/src/crop_layer.h	/^typedef layer crop_layer;$/;"	t
csv_classifier	host/examples/classifier.c	/^void csv_classifier(char *datacfg, char *cfgfile, char *weightfile)$/;"	f
csv_to_matrix	host/src/matrix.c	/^matrix csv_to_matrix(char *filename)$/;"	f
ctx	host/main.c	/^TEEC_Context ctx;$/;"	v
cuda_compare	host/src/cuda.c	/^float cuda_compare(float *x_gpu, float *x, size_t n, char *s)$/;"	f
cuda_free	host/src/cuda.c	/^void cuda_free(float *x_gpu)$/;"	f
cuda_get_device	host/src/cuda.c	/^int cuda_get_device()$/;"	f
cuda_gridsize	host/src/cuda.c	/^dim3 cuda_gridsize(size_t n){$/;"	f
cuda_mag_array	host/src/cuda.c	/^float cuda_mag_array(float *x_gpu, size_t n)$/;"	f
cuda_make_array	host/src/cuda.c	/^float *cuda_make_array(float *x, size_t n)$/;"	f
cuda_make_int_array	host/src/cuda.c	/^int *cuda_make_int_array(int *x, size_t n)$/;"	f
cuda_pull_array	host/src/cuda.c	/^void cuda_pull_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_push_array	host/src/cuda.c	/^void cuda_push_array(float *x_gpu, float *x, size_t n)$/;"	f
cuda_random	host/src/cuda.c	/^void cuda_random(float *x_gpu, size_t n)$/;"	f
cuda_set_device	host/src/cuda.c	/^void cuda_set_device(int n)$/;"	f
cuda_set_device	host/src/cuda.c	/^void cuda_set_device(int n){}$/;"	f
cudnn_convolutional_setup	host/src/convolutional_layer.c	/^void cudnn_convolutional_setup(layer *l)$/;"	f
cudnn_handle	host/src/cuda.c	/^cudnnHandle_t cudnn_handle()$/;"	f
cur_x	host/src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon34
cur_y	host/src/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon34
cweights	host/include/darknet.h	/^    char  * cweights;$/;"	m	struct:layer
cweights	ta/include/darknet_TA.h	/^    char  * cweights;$/;"	m	struct:layer_TA
d	host/include/darknet.h	/^    data *d;$/;"	m	struct:load_args
d	host/src/network.c	/^    data d;$/;"	m	struct:__anon37	file:
darknet_main	host/examples/darknet.c	/^void darknet_main(int argc, char **argv)$/;"	f
data	host/examples/go.c	/^    char **data;$/;"	m	struct:__anon41	file:
data	host/include/darknet.h	/^    float *data;$/;"	m	struct:__anon11
data	host/include/darknet.h	/^} data;$/;"	t	typeref:struct:__anon13
data	host/src/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon23::__anon24
data_type	host/include/darknet.h	/^} data_type;$/;"	t	typeref:enum:__anon14
dbox	host/src/box.h	/^} dbox;$/;"	t	typeref:struct:__anon36
dc_cpu	host/include/darknet.h	/^    float *dc_cpu; $/;"	m	struct:layer
dc_cpu	ta/include/darknet_TA.h	/^    float *dc_cpu;$/;"	m	struct:layer_TA
dc_gpu	host/include/darknet.h	/^    float *dc_gpu; $/;"	m	struct:layer
dc_pred	host/src/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon23::__anon24
dct_bfly32o	host/src/stb_image.h	2302;"	d
dct_bfly32o	host/src/stb_image.h	2436;"	d
dct_bfly32o	host/src/stb_image.h	2488;"	d
dct_bfly32o	host/src/stb_image.h	2646;"	d
dct_const	host/src/stb_image.h	2274;"	d
dct_const	host/src/stb_image.h	2431;"	d
dct_interleave16	host/src/stb_image.h	2319;"	d
dct_interleave16	host/src/stb_image.h	2438;"	d
dct_interleave8	host/src/stb_image.h	2313;"	d
dct_interleave8	host/src/stb_image.h	2437;"	d
dct_long_mac	host/src/stb_image.h	2469;"	d
dct_long_mac	host/src/stb_image.h	2642;"	d
dct_long_mul	host/src/stb_image.h	2465;"	d
dct_long_mul	host/src/stb_image.h	2641;"	d
dct_pass	host/src/stb_image.h	2324;"	d
dct_pass	host/src/stb_image.h	2439;"	d
dct_pass	host/src/stb_image.h	2496;"	d
dct_pass	host/src/stb_image.h	2647;"	d
dct_rot	host/src/stb_image.h	2278;"	d
dct_rot	host/src/stb_image.h	2432;"	d
dct_trn16	host/src/stb_image.h	2556;"	d
dct_trn16	host/src/stb_image.h	2578;"	d
dct_trn32	host/src/stb_image.h	2557;"	d
dct_trn32	host/src/stb_image.h	2579;"	d
dct_trn64	host/src/stb_image.h	2558;"	d
dct_trn64	host/src/stb_image.h	2580;"	d
dct_trn8_16	host/src/stb_image.h	2602;"	d
dct_trn8_16	host/src/stb_image.h	2637;"	d
dct_trn8_32	host/src/stb_image.h	2603;"	d
dct_trn8_32	host/src/stb_image.h	2638;"	d
dct_trn8_8	host/src/stb_image.h	2601;"	d
dct_trn8_8	host/src/stb_image.h	2636;"	d
dct_wadd	host/src/stb_image.h	2292;"	d
dct_wadd	host/src/stb_image.h	2434;"	d
dct_wadd	host/src/stb_image.h	2478;"	d
dct_wadd	host/src/stb_image.h	2644;"	d
dct_widen	host/src/stb_image.h	2287;"	d
dct_widen	host/src/stb_image.h	2433;"	d
dct_widen	host/src/stb_image.h	2473;"	d
dct_widen	host/src/stb_image.h	2643;"	d
dct_wsub	host/src/stb_image.h	2297;"	d
dct_wsub	host/src/stb_image.h	2435;"	d
dct_wsub	host/src/stb_image.h	2483;"	d
dct_wsub	host/src/stb_image.h	2645;"	d
ddstTensorDesc	host/include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
debug_plot	host/main.c	/^void debug_plot(char *filename, int num, float *tobeplot, int length)$/;"	f
decay	host/include/darknet.h	/^    float decay;$/;"	m	struct:__anon8
decay	host/include/darknet.h	/^    float decay;$/;"	m	struct:network
decay	ta/include/darknet_TA.h	/^    float decay;$/;"	m	struct:__anon48
decay	ta/include/darknet_TA.h	/^    float decay;$/;"	m	struct:network_TA
decode_box	host/src/box.c	/^box decode_box(box b, box anchor)$/;"	f
deinter_cpu	host/src/blas.c	/^void deinter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
del_arg	host/src/utils.c	/^void del_arg(int argc, char **argv, int index)$/;"	f
delay	host/src/stb_image.h	/^   int delay;$/;"	m	struct:__anon34
delta	host/include/darknet.h	/^    float * delta;$/;"	m	struct:layer
delta	host/include/darknet.h	/^    float *delta;$/;"	m	struct:network
delta	host/src/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon22
delta	ta/include/darknet_TA.h	/^    float * delta;$/;"	m	struct:layer_TA
delta	ta/include/darknet_TA.h	/^    float *delta;$/;"	m	struct:network_TA
delta_gpu	host/include/darknet.h	/^    float * delta_gpu;$/;"	m	struct:layer
delta_gpu	host/include/darknet.h	/^    float *delta_gpu;$/;"	m	struct:network
delta_region_box	host/src/region_layer.c	/^float delta_region_box(box truth, float *x, float *biases, int n, int index, int i, int j, int w, int h, float *delta, float scale, int stride)$/;"	f
delta_region_class	host/src/region_layer.c	/^void delta_region_class(float *output, float *delta, int index, int class, int classes, tree *hier, float scale, int stride, float *avg_cat, int tag)$/;"	f
delta_region_mask	host/src/region_layer.c	/^void delta_region_mask(float *truth, float *x, int n, int index, float *delta, int stride, int scale)$/;"	f
delta_yolo_box	host/src/yolo_layer.c	/^float delta_yolo_box(box truth, float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, float *delta, float scale, int stride)$/;"	f
delta_yolo_class	host/src/yolo_layer.c	/^void delta_yolo_class(float *output, float *delta, int index, int class, int classes, int stride, float *avg_cat)$/;"	f
demo	host/src/demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg, float hier, int w, int h, int frames, int fullscreen)$/;"	f
demo	host/src/demo.c	/^void demo(char *cfgfile, char *weightfile, float thresh, int cam_index, const char *filename, char **names, int classes, int delay, char *prefix, int avg_frames, float hier, int w, int h, int frames, int fullscreen)$/;"	f
demo_alphabet	host/src/demo.c	/^static image **demo_alphabet;$/;"	v	file:
demo_art	host/examples/art.c	/^void demo_art(char *cfgfile, char *weightfile, int cam_index)$/;"	f
demo_classes	host/src/demo.c	/^static int demo_classes;$/;"	v	file:
demo_classifier	host/examples/classifier.c	/^void demo_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
demo_done	host/src/demo.c	/^static int demo_done = 0;$/;"	v	file:
demo_frame	host/src/demo.c	/^static int demo_frame = 3;$/;"	v	file:
demo_hier	host/src/demo.c	/^static float demo_hier = .5;$/;"	v	file:
demo_index	host/src/demo.c	/^static int demo_index = 0;$/;"	v	file:
demo_isegmenter	host/examples/instance-segmenter.c	/^void demo_isegmenter(char *datacfg, char *cfg, char *weights, int cam_index, const char *filename)$/;"	f
demo_names	host/src/demo.c	/^static char **demo_names;$/;"	v	file:
demo_regressor	host/examples/regressor.c	/^void demo_regressor(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
demo_segmenter	host/examples/segmenter.c	/^void demo_segmenter(char *datacfg, char *cfg, char *weights, int cam_index, const char *filename)$/;"	f
demo_thresh	host/src/demo.c	/^static float demo_thresh = 0;$/;"	v	file:
demo_time	host/src/demo.c	/^double demo_time;$/;"	v
demo_total	host/src/demo.c	/^static int demo_total = 0;$/;"	v	file:
denormalize_connected_layer	host/src/connected_layer.c	/^void denormalize_connected_layer(layer l)$/;"	f
denormalize_convolutional_layer	host/src/convolutional_layer.c	/^void denormalize_convolutional_layer(convolutional_layer l)$/;"	f
denormalize_deconvolutional_layer	host/src/deconvolutional_layer.c	/^void denormalize_deconvolutional_layer(layer l)$/;"	f
denormalize_net	host/examples/darknet.c	/^void denormalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
depth	host/src/stb_image.h	/^   int depth;$/;"	m	struct:__anon29
dequant	host/src/stb_image.h	/^   stbi__uint16 dequant[4][64];$/;"	m	struct:__anon23
derivative	host/src/box.c	/^dbox derivative(box a, box b)$/;"	f
detect_in_thread	host/src/demo.c	/^void *detect_in_thread(void *ptr)$/;"	f
detect_loop	host/src/demo.c	/^void *detect_loop(void *ptr)$/;"	f
detection	host/include/darknet.h	/^typedef struct detection{$/;"	s
detection	host/include/darknet.h	/^} detection;$/;"	t	typeref:struct:detection
detection_layer	host/src/detection_layer.h	/^typedef layer detection_layer;$/;"	t
dh	host/src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon36
dh_cpu	host/include/darknet.h	/^    float *dh_cpu;$/;"	m	struct:layer
dh_cpu	ta/include/darknet_TA.h	/^    float *dh_cpu;$/;"	m	struct:layer_TA
dh_gpu	host/include/darknet.h	/^    float *dh_gpu;$/;"	m	struct:layer
diff_private_SGD	ta/diffprivate_TA.c	/^void *diff_private_SGD(float *input, int len_input)$/;"	f
diff_private_func	host/src/diffprivate.c	/^void diff_private_func(float *input, int len_input)$/;"	f
dintersect	host/src/box.c	/^dbox dintersect(box a, box b)$/;"	f
diou	host/src/box.c	/^dbox diou(box a, box b)$/;"	f
display_in_thread	host/src/demo.c	/^void *display_in_thread(void *ptr)$/;"	f
display_loop	host/src/demo.c	/^void *display_loop(void *ptr)$/;"	f
dist_array	host/src/utils.c	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
distance_from_edge	host/src/data.h	/^static inline float distance_from_edge(int x, int max)$/;"	f
distort_image	host/src/image.c	/^void distort_image(image im, float hue, float sat, float val)$/;"	f
distribute_weights	host/src/network.c	/^void distribute_weights(layer l, layer base)$/;"	f
do_nms	host/src/box.c	/^void do_nms(box *boxes, float **probs, int total, int classes, float thresh)$/;"	f
do_nms_obj	host/src/box.c	/^void do_nms_obj(detection *dets, int total, int classes, float thresh)$/;"	f
do_nms_sort	host/src/box.c	/^void do_nms_sort(detection *dets, int total, int classes, float thresh)$/;"	f
done	host/examples/go.c	/^    int done;$/;"	m	struct:mcts_tree	file:
dontload	host/include/darknet.h	/^    int dontload;$/;"	m	struct:layer
dontload	ta/include/darknet_TA.h	/^    int dontload;$/;"	m	struct:layer_TA
dontloadscales	host/include/darknet.h	/^    int dontloadscales;$/;"	m	struct:layer
dontloadscales	ta/include/darknet_TA.h	/^    int dontloadscales;$/;"	m	struct:layer_TA
dontsave	host/include/darknet.h	/^    int dontsave;$/;"	m	struct:layer
dontsave	ta/include/darknet_TA.h	/^    int dontsave;$/;"	m	struct:layer_TA
dot	host/include/darknet.h	/^    float dot;$/;"	m	struct:layer
dot	ta/include/darknet_TA.h	/^    float dot;$/;"	m	struct:layer_TA
dot_cpu	host/src/blas.c	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
draw_bbox	host/src/image.c	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f
draw_box	host/src/image.c	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f
draw_box_width	host/src/image.c	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f
draw_detections	host/src/image.c	/^void draw_detections(image im, detection *dets, int num, float thresh, char **names, image **alphabet, int classes)$/;"	f
draw_label	host/src/image.c	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f
dropout_layer	host/src/dropout_layer.h	/^typedef layer dropout_layer;$/;"	t
dropout_layer_TA	ta/include/dropout_layer_TA.h	/^typedef layer_TA dropout_layer_TA;$/;"	t
dsrcTensorDesc	host/include/darknet.h	/^    cudnnTensorDescriptor_t dsrcTensorDesc, ddstTensorDesc;$/;"	m	struct:layer
dstTensorDesc	host/include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
dunion	host/src/box.c	/^dbox dunion(box a, box b)$/;"	f
dw	host/src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon36
dweightDesc	host/include/darknet.h	/^    cudnnFilterDescriptor_t dweightDesc;$/;"	m	struct:layer
dx	host/include/darknet.h	/^    float dx;$/;"	m	struct:__anon10
dx	host/src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon36
dy	host/include/darknet.h	/^    float dy;$/;"	m	struct:__anon10
dy	host/src/box.h	/^    float dx, dy, dw, dh;$/;"	m	struct:__anon36
e	ta/include/math_TA.h	6;"	d
eflags	host/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon34
elu_activate	host/src/activations.h	/^static inline float elu_activate(float x){return (x >= 0)*x + (x < 0)*(exp(x)-1);}$/;"	f
elu_activate_TA	ta/include/activations_TA.h	/^static inline float elu_activate_TA(float x){return (x >= 0)*x + (x < 0)*(ta_exp(x)-1);}$/;"	f
elu_gradient	host/src/activations.h	/^static inline float elu_gradient(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
elu_gradient_TA	ta/include/activations_TA.h	/^static inline float elu_gradient_TA(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
embed_image	host/src/image.c	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f
encode_box	host/src/box.c	/^box encode_box(box b, box anchor)$/;"	f
engine_go	host/examples/go.c	/^void engine_go(char *filename, char *weightfile, int mcts_iters, float secs, float temp, float cpuct, int anon, int resign)$/;"	f
entry_index	host/src/region_layer.c	/^int entry_index(layer l, int batch, int location, int entry)$/;"	f
entry_index	host/src/yolo_layer.c	/^static int entry_index(layer l, int batch, int location, int entry)$/;"	f	file:
eob_run	host/src/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon23
eof	host/src/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon17
epoch	host/include/darknet.h	/^    float epoch;$/;"	m	struct:network
epoch	ta/include/darknet_TA.h	/^    float epoch;$/;"	m	struct:network_TA
eps	host/include/darknet.h	/^    float eps;$/;"	m	struct:__anon8
eps	host/include/darknet.h	/^    float eps;$/;"	m	struct:network
eps	ta/include/darknet_TA.h	/^    float eps;$/;"	m	struct:__anon48
eps	ta/include/darknet_TA.h	/^    float eps;$/;"	m	struct:network_TA
err	host/src/network.c	/^    float *err;$/;"	m	struct:__anon37	file:
err_sum	ta/network_TA.c	/^float err_sum = 0;$/;"	v
error	host/src/utils.c	/^void error(const char *s)$/;"	f
eval_cifar_csv	host/examples/cifar.c	/^void eval_cifar_csv()$/;"	f
exclusive_image	host/src/data.c	/^void exclusive_image(image src)$/;"	f
expand	host/examples/go.c	/^mcts_tree *expand(float *next, float *ko, network *net)$/;"	f
expanded	host/src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon29
exposure	host/include/darknet.h	/^    float exposure;$/;"	m	struct:layer
exposure	host/include/darknet.h	/^    float exposure;$/;"	m	struct:load_args
exposure	host/include/darknet.h	/^    float exposure;$/;"	m	struct:network
exposure	ta/include/darknet_TA.h	/^    float exposure;$/;"	m	struct:layer_TA
exposure	ta/include/darknet_TA.h	/^    float exposure;$/;"	m	struct:network_TA
exposure_image	host/src/image.c	/^void exposure_image(image im, float sat)$/;"	f
extra	host/include/darknet.h	/^    int extra;$/;"	m	struct:layer
extra	ta/include/darknet_TA.h	/^    int extra;$/;"	m	struct:layer_TA
extract_cifar	host/examples/cifar.c	/^void extract_cifar()$/;"	f
f_cpu	host/include/darknet.h	/^    float *f_cpu;$/;"	m	struct:layer
f_cpu	ta/include/darknet_TA.h	/^    float *f_cpu;$/;"	m	struct:layer_TA
f_gpu	host/include/darknet.h	/^    float *f_gpu;$/;"	m	struct:layer
fabs	ta/include/math_TA.h	11;"	d
fast	host/src/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon26
fast	host/src/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon22
fast_ac	host/src/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon23
fetch_in_thread	host/src/demo.c	/^void *fetch_in_thread(void *ptr)$/;"	f
fgetgo	host/examples/go.c	/^char *fgetgo(FILE *fp)$/;"	f
fgetl	host/src/utils.c	/^char *fgetl(FILE *fp)$/;"	f
file_error	host/src/utils.c	/^void file_error(char *s)$/;"	f
file_output_classifier	host/examples/classifier.c	/^void file_output_classifier(char *datacfg, char *filename, char *weightfile, char *listfile)$/;"	f
fill_cpu	host/src/blas.c	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_cpu_TA	ta/blas_TA.c	/^void fill_cpu_TA(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_hierarchy	host/src/data.c	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f
fill_image	host/src/image.c	/^void fill_image(image m, float s)$/;"	f
fill_network_boxes	host/src/network.c	/^void fill_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, detection *dets)$/;"	f
fill_truth	host/src/data.c	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f
fill_truth_captcha	host/src/data.c	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f
fill_truth_detection	host/src/data.c	/^void fill_truth_detection(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_iseg	host/src/data.c	/^void fill_truth_iseg(char *path, int num_boxes, float *truth, int classes, int w, int h, augment_args aug, int flip, int mw, int mh)$/;"	f
fill_truth_mask	host/src/data.c	/^void fill_truth_mask(char *path, int num_boxes, float *truth, int classes, int w, int h, augment_args aug, int flip, int mw, int mh)$/;"	f
fill_truth_region	host/src/data.c	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_swag	host/src/data.c	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
find_arg	host/src/utils.c	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	host/src/utils.c	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_float_arg	host/src/utils.c	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	host/src/utils.c	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_replace	host/src/utils.c	/^void find_replace(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_paths	host/src/data.c	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f
first	host/src/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon33
first_aim_money	ta/include/math_TA.h	9;"	d
first_row_filter	host/src/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	host/src/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon26
firstsymbol	host/src/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon26
fix_data_captcha	host/examples/captcha.c	/^void fix_data_captcha(data d, int mask)$/;"	f
flags	host/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon34
flatten	host/include/darknet.h	/^    int flatten;$/;"	m	struct:layer
flatten	host/src/blas.c	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flatten	ta/include/darknet_TA.h	/^    int flatten;$/;"	m	struct:layer_TA
flip	host/include/darknet.h	/^    int flip;$/;"	m	struct:layer
flip	ta/include/darknet_TA.h	/^    int flip;$/;"	m	struct:layer_TA
flip_board	host/examples/go.c	/^void flip_board(float *board)$/;"	f
flip_image	host/src/image.c	/^void flip_image(image a)$/;"	f
flipped	host/include/darknet.h	/^    int flipped;$/;"	m	struct:layer
flipped	ta/include/darknet_TA.h	/^    int flipped;$/;"	m	struct:layer_TA
float_abs_compare	host/src/cost_layer.c	/^int float_abs_compare (const void * a, const void * b)$/;"	f
float_pair	host/examples/rnn.c	/^} float_pair;$/;"	t	typeref:struct:__anon43	file:
float_to_box	host/src/box.c	/^box float_to_box(float *f, int stride)$/;"	f
float_to_image	host/src/image.c	/^image float_to_image(int w, int h, int c, float *data)$/;"	f
focus	host/include/darknet.h	/^    float focus;$/;"	m	struct:layer
focus	ta/include/darknet_TA.h	/^    float focus;$/;"	m	struct:layer_TA
forced	host/include/darknet.h	/^    int forced;$/;"	m	struct:layer
forced	ta/include/darknet_TA.h	/^    int forced;$/;"	m	struct:layer_TA
forgot_delta	host/include/darknet.h	/^    float * forgot_delta;$/;"	m	struct:layer
forgot_delta	ta/include/darknet_TA.h	/^    float * forgot_delta;$/;"	m	struct:layer_TA
forgot_delta_gpu	host/include/darknet.h	/^    float * forgot_delta_gpu;$/;"	m	struct:layer
forgot_state	host/include/darknet.h	/^    float * forgot_state;$/;"	m	struct:layer
forgot_state	ta/include/darknet_TA.h	/^    float * forgot_state;$/;"	m	struct:layer_TA
forgot_state_gpu	host/include/darknet.h	/^    float * forgot_state_gpu;$/;"	m	struct:layer
forward	host/include/darknet.h	/^    void (*forward)   (struct layer, struct network);$/;"	m	struct:layer
forward_TA	host/include/darknet.h	/^    void (*forward_TA)   (struct layer, float* net_input, int net_train);$/;"	m	struct:layer
forward_TA	ta/include/darknet_TA.h	/^    void (*forward_TA)   (struct layer_TA, struct network_TA);$/;"	m	struct:layer_TA
forward_activation_layer	host/src/activation_layer.c	/^void forward_activation_layer(layer l, network net)$/;"	f
forward_activation_layer_gpu	host/src/activation_layer.c	/^void forward_activation_layer_gpu(layer l, network net)$/;"	f
forward_avgpool_layer	host/src/avgpool_layer.c	/^void forward_avgpool_layer(const avgpool_layer l, network net)$/;"	f
forward_batchnorm_layer	host/src/batchnorm_layer.c	/^void forward_batchnorm_layer(layer l, network net)$/;"	f
forward_batchnorm_layer_TA	ta/batchnorm_layer_TA.c	/^void forward_batchnorm_layer_TA(layer_TA l, network_TA net)$/;"	f
forward_batchnorm_layer_gpu	host/src/batchnorm_layer.c	/^void forward_batchnorm_layer_gpu(layer l, network net)$/;"	f
forward_connected_layer	host/src/connected_layer.c	/^void forward_connected_layer(layer l, network net)$/;"	f
forward_connected_layer_TA_new	ta/connected_layer_TA.c	/^void forward_connected_layer_TA_new(layer_TA l, network_TA net)$/;"	f
forward_connected_layer_gpu	host/src/connected_layer.c	/^void forward_connected_layer_gpu(layer l, network net)$/;"	f
forward_convolutional_layer	host/src/convolutional_layer.c	/^void forward_convolutional_layer(convolutional_layer l, network net)$/;"	f
forward_convolutional_layer_TA_new	ta/convolutional_layer_TA.c	/^void forward_convolutional_layer_TA_new(convolutional_layer_TA l, network_TA net)$/;"	f
forward_cost_layer	host/src/cost_layer.c	/^void forward_cost_layer(cost_layer l, network net)$/;"	f
forward_cost_layer_TA	ta/cost_layer_TA.c	/^void forward_cost_layer_TA(cost_layer_TA l, network_TA net)$/;"	f
forward_cost_layer_gpu	host/src/cost_layer.c	/^void forward_cost_layer_gpu(cost_layer l, network net)$/;"	f
forward_crnn_layer	host/src/crnn_layer.c	/^void forward_crnn_layer(layer l, network net)$/;"	f
forward_crnn_layer_gpu	host/src/crnn_layer.c	/^void forward_crnn_layer_gpu(layer l, network net)$/;"	f
forward_crop_layer	host/src/crop_layer.c	/^void forward_crop_layer(const crop_layer l, network net)$/;"	f
forward_deconvolutional_layer	host/src/deconvolutional_layer.c	/^void forward_deconvolutional_layer(const layer l, network net)$/;"	f
forward_detection_layer	host/src/detection_layer.c	/^void forward_detection_layer(const detection_layer l, network net)$/;"	f
forward_detection_layer_gpu	host/src/detection_layer.c	/^void forward_detection_layer_gpu(const detection_layer l, network net)$/;"	f
forward_dropout_layer	host/src/dropout_layer.c	/^void forward_dropout_layer(dropout_layer l, network net)$/;"	f
forward_dropout_layer_TA_new	ta/dropout_layer_TA.c	/^void forward_dropout_layer_TA_new(dropout_layer_TA l, network_TA net)$/;"	f
forward_gpu	host/include/darknet.h	/^    void (*forward_gpu)   (struct layer, struct network);$/;"	m	struct:layer
forward_gru_layer	host/src/gru_layer.c	/^void forward_gru_layer(layer l, network net)$/;"	f
forward_gru_layer_gpu	host/src/gru_layer.c	/^void forward_gru_layer_gpu(layer l, network net)$/;"	f
forward_iseg_layer	host/src/iseg_layer.c	/^void forward_iseg_layer(const layer l, network net)$/;"	f
forward_iseg_layer_gpu	host/src/iseg_layer.c	/^void forward_iseg_layer_gpu(const layer l, network net)$/;"	f
forward_l2norm_layer	host/src/l2norm_layer.c	/^void forward_l2norm_layer(const layer l, network net)$/;"	f
forward_l2norm_layer_gpu	host/src/l2norm_layer.c	/^void forward_l2norm_layer_gpu(const layer l, network net)$/;"	f
forward_local_layer	host/src/local_layer.c	/^void forward_local_layer(const local_layer l, network net)$/;"	f
forward_local_layer_gpu	host/src/local_layer.c	/^void forward_local_layer_gpu(const local_layer l, network net)$/;"	f
forward_logistic_layer	host/src/logistic_layer.c	/^void forward_logistic_layer(const layer l, network net)$/;"	f
forward_logistic_layer_gpu	host/src/logistic_layer.c	/^void forward_logistic_layer_gpu(const layer l, network net)$/;"	f
forward_lstm_layer	host/src/lstm_layer.c	/^void forward_lstm_layer(layer l, network state)$/;"	f
forward_lstm_layer_gpu	host/src/lstm_layer.c	/^void forward_lstm_layer_gpu(layer l, network state)$/;"	f
forward_maxpool_layer	host/src/maxpool_layer.c	/^void forward_maxpool_layer(const maxpool_layer l, network net)$/;"	f
forward_maxpool_layer_TA_new	ta/maxpool_layer_TA.c	/^void forward_maxpool_layer_TA_new(const maxpool_layer_TA l, network_TA net)$/;"	f
forward_network	host/src/network.c	/^void forward_network(network *netp)$/;"	f
forward_network_CA	host/main.c	/^void forward_network_CA(float *net_input, int l_inputs, int net_batch, int net_train)$/;"	f
forward_network_TA	ta/network_TA.c	/^void forward_network_TA()$/;"	f
forward_network_TA_params	ta/darknetp_ta.c	/^static TEE_Result forward_network_TA_params(uint32_t param_types,$/;"	f	file:
forward_network_gpu	host/src/network.c	/^void forward_network_gpu(network *netp)$/;"	f
forward_normalization_layer	host/src/normalization_layer.c	/^void forward_normalization_layer(const layer layer, network net)$/;"	f
forward_normalization_layer_gpu	host/src/normalization_layer.c	/^void forward_normalization_layer_gpu(const layer layer, network net)$/;"	f
forward_region_layer	host/src/region_layer.c	/^void forward_region_layer(const layer l, network net)$/;"	f
forward_region_layer_gpu	host/src/region_layer.c	/^void forward_region_layer_gpu(const layer l, network net)$/;"	f
forward_reorg_layer	host/src/reorg_layer.c	/^void forward_reorg_layer(const layer l, network net)$/;"	f
forward_reorg_layer_gpu	host/src/reorg_layer.c	/^void forward_reorg_layer_gpu(layer l, network net)$/;"	f
forward_rnn_layer	host/src/rnn_layer.c	/^void forward_rnn_layer(layer l, network net)$/;"	f
forward_rnn_layer_gpu	host/src/rnn_layer.c	/^void forward_rnn_layer_gpu(layer l, network net)$/;"	f
forward_route_layer	host/src/route_layer.c	/^void forward_route_layer(const route_layer l, network net)$/;"	f
forward_route_layer_gpu	host/src/route_layer.c	/^void forward_route_layer_gpu(const route_layer l, network net)$/;"	f
forward_shortcut_layer	host/src/shortcut_layer.c	/^void forward_shortcut_layer(const layer l, network net)$/;"	f
forward_shortcut_layer_gpu	host/src/shortcut_layer.c	/^void forward_shortcut_layer_gpu(const layer l, network net)$/;"	f
forward_softmax_CA	host/main.c	/^void forward_softmax_CA(float *net_input, int l_inputs, int net_batch, int l_outputs, float *net_output)$/;"	f
forward_softmax_TA_params	ta/darknetp_ta.c	/^static TEE_Result forward_softmax_TA_params(uint32_t param_types,$/;"	f	file:
forward_softmax_layer	host/src/softmax_layer.c	/^void forward_softmax_layer(const softmax_layer l, network net)$/;"	f
forward_softmax_layer_TA	ta/softmax_layer_TA.c	/^void forward_softmax_layer_TA(float *input)$/;"	f
forward_softmax_layer_gpu	host/src/softmax_layer.c	/^void forward_softmax_layer_gpu(const softmax_layer l, network net)$/;"	f
forward_upsample_layer	host/src/upsample_layer.c	/^void forward_upsample_layer(const layer l, network net)$/;"	f
forward_upsample_layer_gpu	host/src/upsample_layer.c	/^void forward_upsample_layer_gpu(const layer l, network net)$/;"	f
forward_yolo_layer	host/src/yolo_layer.c	/^void forward_yolo_layer(const layer l, network net)$/;"	f
forward_yolo_layer_gpu	host/src/yolo_layer.c	/^void forward_yolo_layer_gpu(const layer l, network net)$/;"	f
fps	host/src/demo.c	/^static float fps = 0;$/;"	v	file:
free_data	host/src/data.c	/^void free_data(data d)$/;"	f
free_detections	host/src/network.c	/^void free_detections(detection *dets, int n)$/;"	f
free_image	host/src/image.c	/^void free_image(image m)$/;"	f
free_layer	host/src/layer.c	/^void free_layer(layer l)$/;"	f
free_list	host/src/list.c	/^void free_list(list *l)$/;"	f
free_list_contents	host/src/list.c	/^void free_list_contents(list *l)$/;"	f
free_matrix	host/src/matrix.c	/^void free_matrix(matrix m)$/;"	f
free_mcts	host/examples/go.c	/^void free_mcts(mcts_tree *root)$/;"	f
free_network	host/src/network.c	/^void free_network(network *net)$/;"	f
free_node	host/src/list.c	/^void free_node(node *n)$/;"	f
free_ptrs	host/src/utils.c	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	host/src/parser.c	/^void free_section(section *s)$/;"	f
front	host/include/darknet.h	/^    node *front;$/;"	m	struct:list
ftoa	ta/math_TA.c	/^void ftoa(float n, char *res, int afterpoint)$/;"	f
func	host/src/stb_image_write.h	/^   stbi_write_func *func;$/;"	m	struct:__anon35
fw_algo	host/include/darknet.h	/^    cudnnConvolutionFwdAlgo_t fw_algo;$/;"	m	struct:layer
gGlobalBufferTracker	ta/darknetp_ta.c	/^uint32_t gGlobalBufferTracker = 8;$/;"	v
g_cpu	host/include/darknet.h	/^    float *g_cpu;$/;"	m	struct:layer
g_cpu	ta/include/darknet_TA.h	/^    float *g_cpu;$/;"	m	struct:layer_TA
g_gpu	host/include/darknet.h	/^    float *g_gpu;$/;"	m	struct:layer
gamma	host/include/darknet.h	/^    float gamma;$/;"	m	struct:network
gamma	ta/include/darknet_TA.h	/^    float gamma;$/;"	m	struct:network_TA
gate_delta_gpu	host/include/darknet.h	/^    float * gate_delta_gpu;$/;"	m	struct:layer
gate_gpu	host/include/darknet.h	/^    float * gate_gpu;$/;"	m	struct:layer
gemm	host/src/gemm.c	/^void gemm(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_TA	ta/gemm_TA.c	/^void gemm_TA(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_bin	host/src/gemm.c	/^void gemm_bin(int M, int N, int K, float ALPHA,$/;"	f
gemm_cpu	host/src/gemm.c	/^void gemm_cpu(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_cpu_TA	ta/gemm_TA.c	/^void gemm_cpu_TA(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_cpu_diff	host/src/gemm.c	/^void gemm_cpu_diff(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_diff	host/src/gemm.c	/^void gemm_diff(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_gpu	host/src/gemm.c	/^void gemm_gpu(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_nn	host/src/gemm.c	/^void gemm_nn(int M, int N, int K, float ALPHA,$/;"	f
gemm_nn_TA	ta/gemm_TA.c	/^void gemm_nn_TA(int M, int N, int K, float ALPHA,$/;"	f
gemm_nt	host/src/gemm.c	/^void gemm_nt(int M, int N, int K, float ALPHA,$/;"	f
gemm_nt_TA	ta/gemm_TA.c	/^void gemm_nt_TA(int M, int N, int K, float ALPHA,$/;"	f
gemm_nt_diff	host/src/gemm.c	/^void gemm_nt_diff(int M, int N, int K, float ALPHA,$/;"	f
gemm_tn	host/src/gemm.c	/^void gemm_tn(int M, int N, int K, float ALPHA,$/;"	f
gemm_tn_TA	ta/gemm_TA.c	/^void gemm_tn_TA(int M, int N, int K, float ALPHA,$/;"	f
gemm_tn_diff	host/src/gemm.c	/^void gemm_tn_diff(int M, int N, int K, float ALPHA,$/;"	f
gemm_tt	host/src/gemm.c	/^void gemm_tt(int M, int N, int K, float ALPHA,$/;"	f
gemm_tt_TA	ta/gemm_TA.c	/^void gemm_tt_TA(int M, int N, int K, float ALPHA,$/;"	f
generate_secure_random_number	ta/darknetp_ta.c	/^static TEE_Result generate_secure_random_number(uint32_t param_types,$/;"	f	file:
getDecStr	ta/darknetp_ta.c	/^void getDecStr(char* str, uint8_t len, uint8_t total_count, uint32_t val)$/;"	f
getMemory	host/examples/classifier.c	/^void getMemory(FILE *output_file) {$/;"	f
getSBoxInvert	ta/aes_TA.c	149;"	d	file:
getSBoxValue	ta/aes_TA.c	142;"	d	file:
get_activation	host/src/activations.c	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_TA	ta/activations_TA.c	/^ACTIVATION_TA get_activation_TA(char *s)$/;"	f
get_activation_string	host/src/activations.c	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_activation_string_TA	ta/activations_TA.c	/^char *get_activation_string_TA(ACTIVATION_TA a)$/;"	f
get_base_args	host/src/network.c	/^load_args get_base_args(network *net)$/;"	f
get_coco_image_id	host/examples/coco.c	/^int get_coco_image_id(char *filename)$/;"	f
get_coco_image_id	host/examples/detector.c	/^static int get_coco_image_id(char *filename)$/;"	f	file:
get_color	host/src/image.c	/^float get_color(int c, int x, int max)$/;"	f
get_convolutional_delta	host/src/convolutional_layer.c	/^image get_convolutional_delta(convolutional_layer l)$/;"	f
get_convolutional_image	host/src/convolutional_layer.c	/^image get_convolutional_image(convolutional_layer l)$/;"	f
get_convolutional_weight	host/src/convolutional_layer.c	/^image get_convolutional_weight(convolutional_layer l, int i)$/;"	f
get_cost_string	host/src/cost_layer.c	/^char *get_cost_string(COST_TYPE a)$/;"	f
get_cost_string_TA	ta/cost_layer_TA.c	/^char *get_cost_string_TA(COST_TYPE_TA a)$/;"	f
get_cost_type	host/src/cost_layer.c	/^COST_TYPE get_cost_type(char *s)$/;"	f
get_cost_type_TA	ta/cost_layer_TA.c	/^COST_TYPE_TA get_cost_type_TA(char *s)$/;"	f
get_crop_image	host/src/crop_layer.c	/^image get_crop_image(crop_layer l)$/;"	f
get_current_batch	host/src/network.c	/^size_t get_current_batch(network *net)$/;"	f
get_current_rate	host/src/network.c	/^float get_current_rate(network *net)$/;"	f
get_data_part	host/src/data.c	/^data get_data_part(data d, int part, int total)$/;"	f
get_detection_detections	host/src/detection_layer.c	/^void get_detection_detections(layer l, int w, int h, float thresh, detection *dets)$/;"	f
get_hierarchy_probability	host/src/tree.c	/^float get_hierarchy_probability(float *x, tree *hier, int c, int stride)$/;"	f
get_image_from_stream	host/src/image_opencv.cpp	/^image get_image_from_stream(void *p)$/;"	f
get_image_layer	host/src/image.c	/^image get_image_layer(image m, int l)$/;"	f
get_label	host/src/image.c	/^image get_label(image **characters, char *string, int size)$/;"	f
get_labels	host/src/data.c	/^char **get_labels(char *filename)$/;"	f
get_layer_string	host/src/network.c	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_maxpool_delta	host/src/maxpool_layer.c	/^image get_maxpool_delta(maxpool_layer l)$/;"	f
get_maxpool_image	host/src/maxpool_layer.c	/^image get_maxpool_image(maxpool_layer l)$/;"	f
get_metadata	host/src/option_list.c	/^metadata get_metadata(char *file)$/;"	f
get_network_boxes	host/src/network.c	/^detection *get_network_boxes(network *net, int w, int h, float thresh, float hier, int *map, int relative, int *num)$/;"	f
get_network_detection_layer	host/src/network.c	/^layer get_network_detection_layer(network *net)$/;"	f
get_network_image	host/src/network.c	/^image get_network_image(network *net)$/;"	f
get_network_image_layer	host/src/network.c	/^image get_network_image_layer(network *net, int i)$/;"	f
get_network_output_layer	host/src/network.c	/^layer get_network_output_layer(network *net)$/;"	f
get_next_batch	host/src/data.c	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f
get_paths	host/src/data.c	/^list *get_paths(char *filename)$/;"	f
get_pixel	host/src/image.c	/^static float get_pixel(image m, int x, int y, int c)$/;"	f	file:
get_pixel_extend	host/src/image.c	/^static float get_pixel_extend(image m, int x, int y, int c)$/;"	f	file:
get_policy	host/src/parser.c	/^learning_rate_policy get_policy(char *s)$/;"	f
get_predicted_class_network	host/src/network.c	/^int get_predicted_class_network(network *net)$/;"	f
get_random_batch	host/src/data.c	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f
get_random_data	host/src/data.c	/^data get_random_data(data d, int num)$/;"	f
get_random_paths	host/src/data.c	/^char **get_random_paths(char **paths, int n, int m)$/;"	f
get_region_box	host/src/region_layer.c	/^box get_region_box(float *x, float *biases, int n, int index, int i, int j, int w, int h, int stride)$/;"	f
get_region_detections	host/src/region_layer.c	/^void get_region_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, float tree_thresh, int relative, detection *dets)$/;"	f
get_regression_values	host/examples/classifier.c	/^float *get_regression_values(char **labels, int n)$/;"	f
get_rnn_data	host/examples/rnn.c	/^float_pair get_rnn_data(unsigned char *text, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_rnn_token_data	host/examples/rnn.c	/^float_pair get_rnn_token_data(int *tokens, size_t *offsets, int characters, size_t len, int batch, int steps)$/;"	f
get_secure_randomnumber	host/main.c	/^void get_secure_randomnumber(void)$/;"	f
get_segmentation_image	host/src/data.c	/^image get_segmentation_image(char *path, int w, int h, int classes)$/;"	f
get_segmentation_image2	host/src/data.c	/^image get_segmentation_image2(char *path, int w, int h, int classes)$/;"	f
get_seq2seq_data	host/examples/rnn.c	/^float_pair get_seq2seq_data(char **source, char **dest, int n, int characters, size_t len, int batch, int steps)$/;"	f
get_weights	host/src/convolutional_layer.c	/^image *get_weights(convolutional_layer l)$/;"	f
get_workspace_size	host/src/convolutional_layer.c	/^static size_t get_workspace_size(layer l){$/;"	f	file:
get_workspace_size	host/src/deconvolutional_layer.c	/^static size_t get_workspace_size(layer l){$/;"	f	file:
get_workspace_size_TA	ta/convolutional_layer_TA.c	/^static size_t get_workspace_size_TA(layer_TA l){$/;"	f	file:
get_yolo_box	host/src/yolo_layer.c	/^box get_yolo_box(float *x, float *biases, int n, int index, int i, int j, int lw, int lh, int w, int h, int stride)$/;"	f
get_yolo_detections	host/src/yolo_layer.c	/^int get_yolo_detections(layer l, int w, int h, int netw, int neth, float thresh, int *map, int relative, detection *dets)$/;"	f
gf_mult	ta/aes-gcm.c	/^static void gf_mult(const aes_uchar *x, const aes_uchar *y, aes_uchar *z)$/;"	f	file:
ghash	ta/aes-gcm.c	/^static void ghash(const aes_uchar *h, const aes_uchar *x, size_t xlen, aes_uchar *y)$/;"	f	file:
ghash_start	ta/aes-gcm.c	/^static void ghash_start(aes_uchar *y)$/;"	f	file:
ghost_image	host/src/image.c	/^void ghost_image(image source, image dest, int dx, int dy)$/;"	f
global_dp	host/src/parser.c	/^int global_dp = 0;$/;"	v
global_partition	host/src/parser.c	/^int global_partition = 0;$/;"	v
gpu_index	host/include/darknet.h	/^    int gpu_index;$/;"	m	struct:network
gpu_index	host/src/cuda.c	/^int gpu_index = 0;$/;"	v
gpu_index	ta/include/darknet_TA.h	/^    int gpu_index;$/;"	m	struct:network_TA
gradient	host/src/activations.c	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_TA	ta/activations_TA.c	/^float gradient_TA(float x, ACTIVATION_TA a)$/;"	f
gradient_array	host/src/activations.c	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
gradient_array_TA	ta/activations_TA.c	/^float * gradient_array_TA(const float *x, const int n, const ACTIVATION_TA a, float *delta)$/;"	f
grayscale_image	host/src/image.c	/^image grayscale_image(image im)$/;"	f
grayscale_image_3c	host/src/image.c	/^void grayscale_image_3c(image im)$/;"	f
group	host/include/darknet.h	/^    int *group;$/;"	m	struct:__anon2
group	ta/include/darknet_TA.h	/^    int *group;$/;"	m	struct:__anon44
group_offset	host/include/darknet.h	/^    int *group_offset;$/;"	m	struct:__anon2
group_offset	ta/include/darknet_TA.h	/^    int *group_offset;$/;"	m	struct:__anon44
group_size	host/include/darknet.h	/^    int *group_size;$/;"	m	struct:__anon2
group_size	ta/include/darknet_TA.h	/^    int *group_size;$/;"	m	struct:__anon44
groups	host/include/darknet.h	/^    int groups;$/;"	m	struct:__anon2
groups	host/include/darknet.h	/^    int groups;$/;"	m	struct:layer
groups	ta/include/darknet_TA.h	/^    int groups;$/;"	m	struct:__anon44
groups	ta/include/darknet_TA.h	/^    int groups;$/;"	m	struct:layer_TA
gun_classifier	host/examples/classifier.c	/^void gun_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
h	host/include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon12
h	host/include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon15
h	host/include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
h	host/include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer
h	host/include/darknet.h	/^    int h;$/;"	m	struct:__anon10
h	host/include/darknet.h	/^    int h;$/;"	m	struct:__anon11
h	host/include/darknet.h	/^    int h;$/;"	m	struct:load_args
h	host/include/darknet.h	/^    int w, h;$/;"	m	struct:__anon13
h	host/src/parser.c	/^    int h;$/;"	m	struct:size_params	file:
h	host/src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon23::__anon24
h	host/src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon34
h	ta/include/darknet_TA.h	/^    int h, w, c;$/;"	m	struct:network_TA
h	ta/include/darknet_TA.h	/^    int h,w,c;$/;"	m	struct:layer_TA
h2	host/src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon23::__anon24
h_cpu	host/include/darknet.h	/^    float *h_cpu;$/;"	m	struct:layer
h_cpu	ta/include/darknet_TA.h	/^    float *h_cpu;$/;"	m	struct:layer_TA
h_gpu	host/include/darknet.h	/^    float *h_gpu;$/;"	m	struct:layer
ha	host/src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon23::__anon24
hardtan_activate	host/src/activations.h	/^static inline float hardtan_activate(float x)$/;"	f
hardtan_activate_TA	ta/include/activations_TA.h	/^static inline float hardtan_activate_TA(float x)$/;"	f
hardtan_gradient	host/src/activations.h	/^static inline float hardtan_gradient(float x)$/;"	f
hardtan_gradient_TA	ta/include/activations_TA.h	/^static inline float hardtan_gradient_TA(float x)$/;"	f
harmless_update_network_gpu	host/src/network.c	/^void harmless_update_network_gpu(network *netp)$/;"	f
hd	host/src/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon23::__anon24
hh_cpu	host/include/darknet.h	/^    float *hh_cpu;$/;"	m	struct:layer
hh_cpu	ta/include/darknet_TA.h	/^    float *hh_cpu;$/;"	m	struct:layer_TA
hh_gpu	host/include/darknet.h	/^    float *hh_gpu;$/;"	m	struct:layer
hidden	host/include/darknet.h	/^    int hidden;$/;"	m	struct:layer
hidden	ta/include/darknet_TA.h	/^    int hidden;$/;"	m	struct:layer_TA
hierarchy	host/include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:load_args
hierarchy	host/include/darknet.h	/^    tree *hierarchy;$/;"	m	struct:network
hierarchy	ta/include/darknet_TA.h	/^    tree_TA *hierarchy;$/;"	m	struct:network_TA
hierarchy_predictions	host/src/tree.c	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves, int stride)$/;"	f
hierarchy_top_prediction	host/src/tree.c	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh, int stride)$/;"	f
history	host/src/stb_image.h	/^   stbi_uc *history; $/;"	m	struct:__anon34
hold_out_matrix	host/src/matrix.c	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f
hs	host/src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon25
hsv_to_rgb	host/src/image.c	/^void hsv_to_rgb(image im)$/;"	f
hsz	host/src/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon31
hue	host/include/darknet.h	/^    float hue;$/;"	m	struct:load_args
hue	host/include/darknet.h	/^    float hue;$/;"	m	struct:network
hue	ta/include/darknet_TA.h	/^    float hue;$/;"	m	struct:network_TA
hue_image	host/src/image.c	/^void hue_image(image im, float hue)$/;"	f
huff_ac	host/src/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon23
huff_dc	host/src/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon23
i_cpu	host/include/darknet.h	/^    float *i_cpu;$/;"	m	struct:layer
i_cpu	ta/include/darknet_TA.h	/^    float *i_cpu;$/;"	m	struct:layer_TA
i_gpu	host/include/darknet.h	/^    float *i_gpu;$/;"	m	struct:layer
id	host/include/darknet.h	/^    int id;$/;"	m	struct:__anon15
id	host/src/stb_image.h	/^      int id;$/;"	m	struct:__anon23::__anon24
idata	host/src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon29
idct_block_kernel	host/src/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon23
ignore_thresh	host/include/darknet.h	/^    float ignore_thresh;$/;"	m	struct:layer
ignore_thresh	ta/include/darknet_TA.h	/^    float ignore_thresh;$/;"	m	struct:layer_TA
im	host/include/darknet.h	/^    image *im;$/;"	m	struct:load_args
im2col_cpu	host/src/im2col.c	/^void im2col_cpu(float* data_im,$/;"	f
im2col_cpu_TA	ta/im2col_TA.c	/^void im2col_cpu_TA(float* data_im,$/;"	f
im2col_get_pixel	host/src/im2col.c	/^float im2col_get_pixel(float *im, int height, int width, int channels,$/;"	f
im2col_get_pixel_TA	ta/im2col_TA.c	/^float im2col_get_pixel_TA(float *im, int height, int width, int channels,$/;"	f
image	host/include/darknet.h	/^} image;$/;"	t	typeref:struct:__anon11
image_distance	host/src/image.c	/^image image_distance(image a, image b)$/;"	f
image_to_ipl	host/src/image_opencv.cpp	/^IplImage *image_to_ipl(image im)$/;"	f
image_to_mat	host/src/image_opencv.cpp	/^Mat image_to_mat(image im)$/;"	f
img_buffer	host/src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon18
img_buffer_end	host/src/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon18
img_buffer_original	host/src/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon18
img_buffer_original_end	host/src/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon18
img_comp	host/src/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon23	typeref:struct:__anon23::__anon24
img_h_max	host/src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon23
img_mcu_h	host/src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon23
img_mcu_w	host/src/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon23
img_mcu_x	host/src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon23
img_mcu_y	host/src/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon23
img_n	host/src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon18
img_out_n	host/src/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon18
img_v_max	host/src/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon23
img_x	host/src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon18
img_y	host/src/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon18
inc32	ta/aes-gcm.c	/^static void inc32(aes_uchar *block)$/;"	f	file:
increment_layer	host/src/crnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	host/src/gru_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	host/src/lstm_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
increment_layer	host/src/rnn_layer.c	/^static void increment_layer(layer *l, int steps)$/;"	f	file:
index	host/include/darknet.h	/^    int index;$/;"	m	struct:layer
index	host/include/darknet.h	/^    int index;$/;"	m	struct:network
index	host/src/parser.c	/^    int index;$/;"	m	struct:size_params	file:
index	ta/include/darknet_TA.h	/^    int index;$/;"	m	struct:layer_TA
index	ta/include/darknet_TA.h	/^    int index;$/;"	m	struct:network_TA
indexes	host/include/darknet.h	/^    int   * indexes;$/;"	m	struct:layer
indexes	ta/include/darknet_TA.h	/^    int   * indexes;$/;"	m	struct:layer_TA
indexes_gpu	host/include/darknet.h	/^    int *indexes_gpu;$/;"	m	struct:layer
inline	ta/include/aes-common.h	66;"	d
input	host/include/darknet.h	/^    float *input;$/;"	m	struct:network
input	ta/include/darknet_TA.h	/^    float *input;$/;"	m	struct:network_TA
input_gate_layer	host/include/darknet.h	/^    struct layer *input_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_gate_layer	ta/include/darknet_TA.h	/^    struct layer_TA *input_gate_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_gpu	host/include/darknet.h	/^    float *input_gpu;$/;"	m	struct:network
input_h_layer	host/include/darknet.h	/^    struct layer *input_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_h_layer	ta/include/darknet_TA.h	/^    struct layer_TA *input_h_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_layer	host/include/darknet.h	/^    struct layer *input_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layer	ta/include/darknet_TA.h	/^    struct layer_TA *input_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_layers	host/include/darknet.h	/^    int   * input_layers;$/;"	m	struct:layer
input_layers	ta/include/darknet_TA.h	/^    int   * input_layers;$/;"	m	struct:layer_TA
input_r_layer	host/include/darknet.h	/^    struct layer *input_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_r_layer	ta/include/darknet_TA.h	/^    struct layer_TA *input_r_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_save_layer	host/include/darknet.h	/^    struct layer *input_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_save_layer	ta/include/darknet_TA.h	/^    struct layer_TA *input_save_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_sizes	host/include/darknet.h	/^    int   * input_sizes;$/;"	m	struct:layer
input_sizes	ta/include/darknet_TA.h	/^    int   * input_sizes;$/;"	m	struct:layer_TA
input_state_layer	host/include/darknet.h	/^    struct layer *input_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_state_layer	ta/include/darknet_TA.h	/^    struct layer_TA *input_state_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_z_layer	host/include/darknet.h	/^    struct layer *input_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_z_layer	ta/include/darknet_TA.h	/^    struct layer_TA *input_z_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
inputs	host/include/darknet.h	/^    int inputs;$/;"	m	struct:layer
inputs	host/include/darknet.h	/^    int inputs;$/;"	m	struct:network
inputs	host/src/parser.c	/^    int inputs;$/;"	m	struct:size_params	file:
inputs	ta/include/darknet_TA.h	/^    int inputs;$/;"	m	struct:layer_TA
inputs	ta/include/darknet_TA.h	/^    int inputs;$/;"	m	struct:network_TA
intToStr	ta/math_TA.c	/^int intToStr(int x, char str[], int d)$/;"	f
int_index	host/src/utils.c	/^int int_index(int *a, int val, int n)$/;"	f
int_to_alphanum	host/src/utils.c	/^char int_to_alphanum(int i)$/;"	f
inter_cpu	host/src/blas.c	/^void inter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
inter_dcgan	host/examples/lsd.c	/^void inter_dcgan(char *cfgfile, char *weightfile)$/;"	f
inverted	host/examples/go.c	/^int inverted = 1;$/;"	v
io	host/src/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon18
io_user_data	host/src/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon18
ipl_to_image	host/src/image_opencv.cpp	/^image ipl_to_image(IplImage* src)$/;"	f
is_network	host/src/parser.c	/^int is_network(section *s)$/;"	f
j	host/src/network.c	/^    int j;$/;"	m	struct:__anon38	file:
jfif	host/src/stb_image.h	/^   int            jfif;$/;"	m	struct:__anon23
jitter	host/include/darknet.h	/^    float jitter;$/;"	m	struct:layer
jitter	host/include/darknet.h	/^    float jitter;$/;"	m	struct:load_args
jitter	ta/include/darknet_TA.h	/^    float jitter;$/;"	m	struct:layer_TA
joint	host/include/darknet.h	/^    int joint;$/;"	m	struct:layer
joint	ta/include/darknet_TA.h	/^    int joint;$/;"	m	struct:layer_TA
kappa	host/include/darknet.h	/^    float kappa;$/;"	m	struct:layer
kappa	ta/include/darknet_TA.h	/^    float kappa;$/;"	m	struct:layer_TA
key	host/src/option_list.h	/^    char *key;$/;"	m	struct:__anon39
kvp	host/src/option_list.h	/^} kvp;$/;"	t	typeref:struct:__anon39
l1_cpu	host/src/blas.c	/^void l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l1_cpu_TA	ta/blas_TA.c	/^void l1_cpu_TA(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_cpu	host/src/blas.c	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_cpu_TA	ta/blas_TA.c	/^void l2_cpu_TA(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2normalize_cpu	host/src/blas.c	/^void l2normalize_cpu(float *x, float *dx, int batch, int filters, int spatial)$/;"	f
label_classifier	host/examples/classifier.c	/^void label_classifier(char *datacfg, char *filename, char *weightfile)$/;"	f
labels	host/include/darknet.h	/^    char **labels;$/;"	m	struct:load_args
layer	host/include/darknet.h	/^struct layer{$/;"	s
layer	host/include/darknet.h	/^typedef struct layer layer;$/;"	t	typeref:struct:layer
layer_TA	ta/include/darknet_TA.h	/^struct layer_TA{$/;"	s
layer_TA	ta/include/darknet_TA.h	/^typedef struct layer_TA layer_TA;$/;"	t	typeref:struct:layer_TA
layers	host/include/darknet.h	/^    layer *layers;$/;"	m	struct:network
layers	ta/include/darknet_TA.h	/^    layer_TA *layers;$/;"	m	struct:network_TA
leaf	host/include/darknet.h	/^    int *leaf;$/;"	m	struct:__anon2
leaf	ta/include/darknet_TA.h	/^    int *leaf;$/;"	m	struct:__anon44
leaky_activate	host/src/activations.h	/^static inline float leaky_activate(float x){return (x>0) ? x : .1*x;}$/;"	f
leaky_activate_TA	ta/include/activations_TA.h	/^static inline float leaky_activate_TA(float x){return (x>0) ? x : .1*x;}$/;"	f
leaky_gradient	host/src/activations.h	/^static inline float leaky_gradient(float x){return (x>0) ? 1 : .1;}$/;"	f
leaky_gradient_TA	ta/include/activations_TA.h	/^static inline float leaky_gradient_TA(float x){return (x>0) ? 1 : .1;}$/;"	f
learning_rate	host/include/darknet.h	/^    float learning_rate;$/;"	m	struct:__anon8
learning_rate	host/include/darknet.h	/^    float learning_rate;$/;"	m	struct:network
learning_rate	ta/include/darknet_TA.h	/^    float learning_rate;$/;"	m	struct:__anon48
learning_rate	ta/include/darknet_TA.h	/^    float learning_rate;$/;"	m	struct:network_TA
learning_rate_policy	host/include/darknet.h	/^} learning_rate_policy;$/;"	t	typeref:enum:__anon9
learning_rate_policy_TA	ta/include/darknet_TA.h	/^} learning_rate_policy_TA;$/;"	t	typeref:enum:__anon49
learning_rate_scale	host/include/darknet.h	/^    float learning_rate_scale;$/;"	m	struct:layer
learning_rate_scale	ta/include/darknet_TA.h	/^    float learning_rate_scale;$/;"	m	struct:layer_TA
left	host/include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon15
legal_go	host/examples/go.c	/^int legal_go(float *b, float *ko, int p, int r, int c)$/;"	f
length	host/src/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon28
letterbox_image	host/src/image.c	/^image letterbox_image(image im, int w, int h)$/;"	f
letterbox_image_into	host/src/image.c	/^void letterbox_image_into(image im, int w, int h, image boxed)$/;"	f
lflags	host/src/stb_image.h	/^   int lflags;$/;"	m	struct:__anon34
lhtan_activate	host/src/activations.h	/^static inline float lhtan_activate(float x)$/;"	f
lhtan_activate_TA	ta/include/activations_TA.h	/^static inline float lhtan_activate_TA(float x)$/;"	f
lhtan_gradient	host/src/activations.h	/^static inline float lhtan_gradient(float x)$/;"	f
lhtan_gradient_TA	ta/include/activations_TA.h	/^static inline float lhtan_gradient_TA(float x)$/;"	f
line0	host/src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon25
line1	host/src/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon25
line_size	host/src/stb_image.h	/^   int line_size;$/;"	m	struct:__anon34
linear_activate	host/src/activations.h	/^static inline float linear_activate(float x){return x;}$/;"	f
linear_activate_TA	ta/include/activations_TA.h	/^static inline float linear_activate_TA(float x){return x;}$/;"	f
linear_gradient	host/src/activations.h	/^static inline float linear_gradient(float x){return 1;}$/;"	f
linear_gradient_TA	ta/include/activations_TA.h	/^static inline float linear_gradient_TA(float x){return 1;}$/;"	f
linebuf	host/src/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon23::__anon24
list	host/include/darknet.h	/^typedef struct list{$/;"	s
list	host/include/darknet.h	/^} list;$/;"	t	typeref:struct:list
list_insert	host/src/list.c	/^void list_insert(list *l, void *val)$/;"	f
list_pop	host/src/list.c	/^void *list_pop(list *l){$/;"	f
list_to_array	host/src/list.c	/^void **list_to_array(list *l)$/;"	f
ln_10	ta/include/math_TA.h	8;"	d
ln_2	ta/include/math_TA.h	7;"	d
load_all_cifar10	host/src/data.c	/^data load_all_cifar10()$/;"	f
load_alphabet	host/src/image.c	/^image **load_alphabet()$/;"	f
load_args	host/include/darknet.h	/^typedef struct load_args{$/;"	s
load_args	host/include/darknet.h	/^} load_args;$/;"	t	typeref:struct:load_args
load_batchnorm_weights	host/src/parser.c	/^void load_batchnorm_weights(layer l, FILE *fp)$/;"	f
load_batchnorm_weights_comm	host/src/parser.c	/^void load_batchnorm_weights_comm(layer l, FILE *fp, int i)$/;"	f
load_categorical_data_csv	host/src/data.c	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f
load_cifar10_data	host/src/data.c	/^data load_cifar10_data(char *filename)$/;"	f
load_connected_weights	host/src/parser.c	/^void load_connected_weights(layer l, FILE *fp, int transpose)$/;"	f
load_connected_weights_comm	host/src/parser.c	/^void load_connected_weights_comm(layer l, FILE *fp, int i, int transpose)$/;"	f
load_convolutional_weights	host/src/parser.c	/^void load_convolutional_weights(layer l, FILE *fp)$/;"	f
load_convolutional_weights_binary	host/src/parser.c	/^void load_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
load_convolutional_weights_comm	host/src/parser.c	/^void load_convolutional_weights_comm(layer l, FILE *fp, int i)$/;"	f
load_data	host/src/data.c	/^pthread_t load_data(load_args args)$/;"	f
load_data_augment	host/src/data.c	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)$/;"	f
load_data_blocking	host/src/data.c	/^void load_data_blocking(load_args args)$/;"	f
load_data_captcha	host/src/data.c	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f
load_data_captcha_encode	host/src/data.c	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f
load_data_compare	host/src/data.c	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f
load_data_detection	host/src/data.c	/^data load_data_detection(int n, char **paths, int m, int w, int h, int boxes, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_in_thread	host/src/data.c	/^pthread_t load_data_in_thread(load_args args)$/;"	f
load_data_iseg	host/src/data.c	/^data load_data_iseg(int n, char **paths, int m, int w, int h, int classes, int boxes, int div, int min, int max, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_mask	host/src/data.c	/^data load_data_mask(int n, char **paths, int m, int w, int h, int classes, int boxes, int coords, int min, int max, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_old	host/src/data.c	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f
load_data_region	host/src/data.c	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_regression	host/src/data.c	/^data load_data_regression(char **paths, int n, int m, int k, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_seg	host/src/data.c	/^data load_data_seg(int n, char **paths, int m, int w, int h, int classes, int min, int max, float angle, float aspect, float hue, float saturation, float exposure, int div)$/;"	f
load_data_super	host/src/data.c	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f
load_data_swag	host/src/data.c	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f
load_data_tag	host/src/data.c	/^data load_data_tag(char **paths, int n, int m, int k, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_writing	host/src/data.c	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f
load_files	host/examples/rnn.c	/^unsigned char **load_files(char *filename, int *n)$/;"	f
load_go	host/src/data.c	/^data load_go(char *filename)$/;"	f
load_go_moves	host/examples/go.c	/^moves load_go_moves(char *filename)$/;"	f
load_image	host/src/image.c	/^image load_image(char *filename, int w, int h, int c)$/;"	f
load_image_augment_paths	host/src/data.c	/^matrix load_image_augment_paths(char **paths, int n, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)$/;"	f
load_image_color	host/src/image.c	/^image load_image_color(char *filename, int w, int h)$/;"	f
load_image_cv	host/src/image_opencv.cpp	/^image load_image_cv(char *filename, int channels)$/;"	f
load_image_paths	host/src/data.c	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f
load_image_paths_gray	host/src/data.c	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f
load_image_stb	host/src/image.c	/^image load_image_stb(char *filename, int channels)$/;"	f
load_jpeg_image	host/src/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
load_labels_paths	host/src/data.c	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy)$/;"	f
load_network	host/src/network.c	/^network *load_network(char *cfg, char *weights, int clear)$/;"	f
load_regression_labels_paths	host/src/data.c	/^matrix load_regression_labels_paths(char **paths, int n, int k)$/;"	f
load_rle	host/src/data.c	/^void load_rle(image im, int *rle, int n)$/;"	f
load_tags_paths	host/src/data.c	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f
load_thread	host/src/data.c	/^void *load_thread(void *ptr)$/;"	f
load_threads	host/src/data.c	/^void *load_threads(void *ptr)$/;"	f
load_weights	host/src/parser.c	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_TA	ta/parser_TA.c	/^void load_weights_TA(float *vec, int length, int layer_i, char type, int transpose)$/;"	f
load_weights_upto	host/src/parser.c	/^void load_weights_upto(network *net, char *filename, int start, int cutoff)$/;"	f
local_layer	host/src/local_layer.h	/^typedef layer local_layer;$/;"	t
local_module	ta/Android.mk	/^local_module := 8aaaf200-2450-11e4-abe2-0002a5d5c51b.ta$/;"	m
local_out_height	host/src/local_layer.c	/^int local_out_height(local_layer l)$/;"	f
local_out_width	host/src/local_layer.c	/^int local_out_width(local_layer l)$/;"	f
log	host/include/darknet.h	/^    int log;$/;"	m	struct:layer
log	ta/include/darknet_TA.h	/^    int log;$/;"	m	struct:layer_TA
loggy_activate	host/src/activations.h	/^static inline float loggy_activate(float x){return 2.\/(1. + exp(-x)) - 1;}$/;"	f
loggy_activate_TA	ta/include/activations_TA.h	/^static inline float loggy_activate_TA(float x){return 2.\/(1. + ta_exp(-x)) - 1;}$/;"	f
loggy_gradient	host/src/activations.h	/^static inline float loggy_gradient(float x)$/;"	f
loggy_gradient_TA	ta/include/activations_TA.h	/^static inline float loggy_gradient_TA(float x)$/;"	f
logistic_activate	host/src/activations.h	/^static inline float logistic_activate(float x){return 1.\/(1. + exp(-x));}$/;"	f
logistic_activate_TA	ta/include/activations_TA.h	/^static inline float logistic_activate_TA(float x){return 1.\/(1. + ta_exp(-x));}$/;"	f
logistic_gradient	host/src/activations.h	/^static inline float logistic_gradient(float x){return (1-x)*x;}$/;"	f
logistic_gradient_TA	ta/include/activations_TA.h	/^static inline float logistic_gradient_TA(float x){return (1-x)*x;}$/;"	f
logistic_x_ent_cpu	host/src/blas.c	/^void logistic_x_ent_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
logit	host/src/region_layer.c	/^float logit(float x)$/;"	f
loss	host/include/darknet.h	/^    float * loss;$/;"	m	struct:layer
loss	ta/include/darknet_TA.h	/^    float * loss;$/;"	m	struct:layer_TA
loss_gpu	host/include/darknet.h	/^    float * loss_gpu;$/;"	m	struct:layer
lpal	host/src/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon34
m	host/include/darknet.h	/^    float * m;$/;"	m	struct:layer
m	host/include/darknet.h	/^    int m;$/;"	m	struct:load_args
m	ta/include/darknet_TA.h	/^    float * m;$/;"	m	struct:layer_TA
m_gpu	host/include/darknet.h	/^    float *m_gpu;$/;"	m	struct:layer
ma	host/src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon31
mag_array	host/src/utils.c	/^float mag_array(float *a, int n)$/;"	f
main	host/main.c	/^int main(int argc, char **argv)$/;"	f
make_activation_layer	host/src/activation_layer.c	/^layer make_activation_layer(int batch, int inputs, ACTIVATION activation)$/;"	f
make_avgpool_layer	host/src/avgpool_layer.c	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
make_batchnorm_layer	host/src/batchnorm_layer.c	/^layer make_batchnorm_layer(int batch, int w, int h, int c)$/;"	f
make_connected_layer	host/src/connected_layer.c	/^layer make_connected_layer(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize, int adam)$/;"	f
make_connected_layer_CA	host/main.c	/^void make_connected_layer_CA(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize, int adam)$/;"	f
make_connected_layer_TA_new	ta/connected_layer_TA.c	/^layer_TA make_connected_layer_TA_new(int batch, int inputs, int outputs, ACTIVATION_TA activation, int batch_normalize, int adam)$/;"	f
make_connected_layer_TA_params	ta/darknetp_ta.c	/^static TEE_Result make_connected_layer_TA_params(uint32_t param_types,$/;"	f	file:
make_convolutional_layer	host/src/convolutional_layer.c	/^convolutional_layer make_convolutional_layer(int batch, int h, int w, int c, int n, int groups, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam)$/;"	f
make_convolutional_layer_CA	host/main.c	/^void make_convolutional_layer_CA(int batch, int h, int w, int c, int n, int groups, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam, int flipped, float dot)$/;"	f
make_convolutional_layer_TA_new	ta/convolutional_layer_TA.c	/^convolutional_layer_TA make_convolutional_layer_TA_new(int batch, int h, int w, int c, int n, int groups, int size, int stride, int padding, ACTIVATION_TA activation, int batch_normalize, int binary, int xnor, int adam, int flipped, float dot)$/;"	f
make_convolutional_layer_TA_params	ta/darknetp_ta.c	/^static TEE_Result make_convolutional_layer_TA_params(uint32_t param_types,$/;"	f	file:
make_cost_layer	host/src/cost_layer.c	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale)$/;"	f
make_cost_layer_CA	host/main.c	/^void make_cost_layer_CA(int batch, int inputs, COST_TYPE cost_type, float scale, float ratio, float noobject_scale, float thresh)$/;"	f
make_cost_layer_TA_new	ta/cost_layer_TA.c	/^cost_layer_TA make_cost_layer_TA_new(int batch, int inputs, COST_TYPE_TA cost_type, float scale, float ratio, float noobject_scale, float thresh)$/;"	f
make_cost_layer_TA_params	ta/darknetp_ta.c	/^static TEE_Result make_cost_layer_TA_params(uint32_t param_types,$/;"	f	file:
make_crnn_layer	host/src/crnn_layer.c	/^layer make_crnn_layer(int batch, int h, int w, int c, int hidden_filters, int output_filters, int steps, ACTIVATION activation, int batch_normalize)$/;"	f
make_crop_layer	host/src/crop_layer.c	/^crop_layer make_crop_layer(int batch, int h, int w, int c, int crop_height, int crop_width, int flip, float angle, float saturation, float exposure)$/;"	f
make_deconvolutional_layer	host/src/deconvolutional_layer.c	/^layer make_deconvolutional_layer(int batch, int h, int w, int c, int n, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int adam)$/;"	f
make_detection_layer	host/src/detection_layer.c	/^detection_layer make_detection_layer(int batch, int inputs, int n, int side, int classes, int coords, int rescore)$/;"	f
make_dropout_layer	host/src/dropout_layer.c	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability)$/;"	f
make_dropout_layer_CA	host/main.c	/^void make_dropout_layer_CA(int batch, int inputs, float probability, int w, int h, int c, float *net_prev_output, float *net_prev_delta)$/;"	f
make_dropout_layer_TA_new	ta/dropout_layer_TA.c	/^dropout_layer_TA make_dropout_layer_TA_new(int batch, int inputs, float probability, int w, int h, int c, int netnum)$/;"	f
make_dropout_layer_TA_params	ta/darknetp_ta.c	/^static TEE_Result make_dropout_layer_TA_params(uint32_t param_types,$/;"	f	file:
make_empty_image	host/src/image.c	/^image make_empty_image(int w, int h, int c)$/;"	f
make_gru_layer	host/src/gru_layer.c	/^layer make_gru_layer(int batch, int inputs, int outputs, int steps, int batch_normalize, int adam)$/;"	f
make_image	host/src/image.c	/^image make_image(int w, int h, int c)$/;"	f
make_iseg_layer	host/src/iseg_layer.c	/^layer make_iseg_layer(int batch, int w, int h, int classes, int ids)$/;"	f
make_l2norm_layer	host/src/l2norm_layer.c	/^layer make_l2norm_layer(int batch, int inputs)$/;"	f
make_list	host/src/list.c	/^list *make_list()$/;"	f
make_local_layer	host/src/local_layer.c	/^local_layer make_local_layer(int batch, int h, int w, int c, int n, int size, int stride, int pad, ACTIVATION activation)$/;"	f
make_logistic_layer	host/src/logistic_layer.c	/^layer make_logistic_layer(int batch, int inputs)$/;"	f
make_lstm_layer	host/src/lstm_layer.c	/^layer make_lstm_layer(int batch, int inputs, int outputs, int steps, int batch_normalize, int adam)$/;"	f
make_matrix	host/src/matrix.c	/^matrix make_matrix(int rows, int cols)$/;"	f
make_maxpool_layer	host/src/maxpool_layer.c	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
make_maxpool_layer_CA	host/main.c	/^void make_maxpool_layer_CA(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
make_maxpool_layer_TA	ta/maxpool_layer_TA.c	/^maxpool_layer_TA make_maxpool_layer_TA(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
make_maxpool_layer_TA_params	ta/darknetp_ta.c	/^static TEE_Result make_maxpool_layer_TA_params(uint32_t param_types,$/;"	f	file:
make_netowork_TA_params	ta/darknetp_ta.c	/^static TEE_Result make_netowork_TA_params(uint32_t param_types,$/;"	f	file:
make_network	host/src/network.c	/^network *make_network(int n)$/;"	f
make_network_CA	host/main.c	/^void make_network_CA(int n, float learning_rate, float momentum, float decay, int time_steps, int notruth, int batch, int subdivisions, int random, int adam, float B1, float B2, float eps, int h, int w, int c, int inputs, int max_crop, int min_crop, float max_ratio, float min_ratio, int center, float clip, float angle, float aspect, float saturation, float exposure, float hue, int burn_in, float power, int max_batches)$/;"	f
make_network_TA	ta/network_TA.c	/^void make_network_TA(int n, float learning_rate, float momentum, float decay, int time_steps, int notruth, int batch, int subdivisions, int random, int adam, float B1, float B2, float eps, int h, int w, int c, int inputs, int max_crop, int min_crop, float max_ratio, float min_ratio, int center, float clip, float angle, float aspect, float saturation, float exposure, float hue, int burn_in, float power, int max_batches)$/;"	f
make_network_boxes	host/src/network.c	/^detection *make_network_boxes(network *net, float thresh, int *num)$/;"	f
make_normalization_layer	host/src/normalization_layer.c	/^layer make_normalization_layer(int batch, int w, int h, int c, int size, float alpha, float beta, float kappa)$/;"	f
make_random_image	host/src/image.c	/^image make_random_image(int w, int h, int c)$/;"	f
make_region_layer	host/src/region_layer.c	/^layer make_region_layer(int batch, int w, int h, int n, int classes, int coords)$/;"	f
make_reorg_layer	host/src/reorg_layer.c	/^layer make_reorg_layer(int batch, int w, int h, int c, int stride, int reverse, int flatten, int extra)$/;"	f
make_rnn_layer	host/src/rnn_layer.c	/^layer make_rnn_layer(int batch, int inputs, int outputs, int steps, ACTIVATION activation, int batch_normalize, int adam)$/;"	f
make_route_layer	host/src/route_layer.c	/^route_layer make_route_layer(int batch, int n, int *input_layers, int *input_sizes)$/;"	f
make_shortcut_layer	host/src/shortcut_layer.c	/^layer make_shortcut_layer(int batch, int index, int w, int h, int c, int w2, int h2, int c2)$/;"	f
make_softmax_layer	host/src/softmax_layer.c	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
make_softmax_layer_CA	host/main.c	/^void make_softmax_layer_CA(int batch, int inputs, int groups, float temperature, int w, int h, int c, int spatial, int noloss)$/;"	f
make_softmax_layer_TA_new	ta/softmax_layer_TA.c	/^softmax_layer_TA make_softmax_layer_TA_new(int batch, int inputs, int groups, float temperature, int w, int h, int c, int spatial, int noloss)$/;"	f
make_softmax_layer_TA_params	ta/darknetp_ta.c	/^static TEE_Result make_softmax_layer_TA_params(uint32_t param_types,$/;"	f	file:
make_upsample_layer	host/src/upsample_layer.c	/^layer make_upsample_layer(int batch, int w, int h, int c, int stride)$/;"	f
make_window	host/src/image_opencv.cpp	/^void make_window(char *name, int w, int h, int fullscreen)$/;"	f
make_yolo_layer	host/src/yolo_layer.c	/^layer make_yolo_layer(int batch, int w, int h, int n, int total, int *mask, int classes)$/;"	f
makes_safe_go	host/examples/go.c	/^static int makes_safe_go(float *b, int *lib, int p, int r, int c){$/;"	f	file:
malloc_error	host/src/utils.c	/^void malloc_error()$/;"	f
map	host/include/darknet.h	/^    int   * map;$/;"	m	struct:layer
map	ta/include/darknet_TA.h	/^    int   * map;$/;"	m	struct:layer_TA
marker	host/src/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon23
mask	host/include/darknet.h	/^    float *mask;$/;"	m	struct:detection
mask	host/include/darknet.h	/^    int *mask;$/;"	m	struct:layer
mask	ta/include/darknet_TA.h	/^    int *mask;$/;"	m	struct:layer_TA
mask_scale	host/include/darknet.h	/^    float mask_scale;$/;"	m	struct:layer
mask_scale	ta/include/darknet_TA.h	/^    float mask_scale;$/;"	m	struct:layer_TA
mask_to_rgb	host/src/image.c	/^image mask_to_rgb(image mask)$/;"	f
mat_to_image	host/src/image_opencv.cpp	/^image mat_to_image(Mat m)$/;"	f
matrix	host/include/darknet.h	/^typedef struct matrix{$/;"	s
matrix	host/include/darknet.h	/^} matrix;$/;"	t	typeref:struct:matrix
matrix_add_matrix	host/src/matrix.c	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f
matrix_to_csv	host/src/matrix.c	/^void matrix_to_csv(matrix m)$/;"	f
matrix_topk_accuracy	host/src/matrix.c	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f
max	host/include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
max	host/include/socket_api.h	17;"	d
max_batches	host/include/darknet.h	/^    int max_batches;$/;"	m	struct:network
max_batches	ta/include/darknet_TA.h	/^    int max_batches;$/;"	m	struct:network_TA
max_boxes	host/include/darknet.h	/^    int max_boxes;$/;"	m	struct:layer
max_boxes	ta/include/darknet_TA.h	/^    int max_boxes;$/;"	m	struct:layer_TA
max_crop	host/include/darknet.h	/^    int max_crop;$/;"	m	struct:network
max_crop	ta/include/darknet_TA.h	/^    int max_crop;$/;"	m	struct:network_TA
max_index	host/src/utils.c	/^int max_index(float *a, int n)$/;"	f
max_int_index	host/src/utils.c	/^int max_int_index(int *a, int n)$/;"	f
max_ratio	host/include/darknet.h	/^    float max_ratio;$/;"	m	struct:network
max_ratio	ta/include/darknet_TA.h	/^    float max_ratio;$/;"	m	struct:network_TA
max_x	host/src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon34
max_y	host/src/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon34
maxcode	host/src/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon26
maxcode	host/src/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon22
maxpool_layer	host/src/maxpool_layer.h	/^typedef layer maxpool_layer;$/;"	t
maxpool_layer_TA	ta/include/maxpool_layer_TA.h	/^typedef layer_TA maxpool_layer_TA;$/;"	t
mb	host/src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon31
mcts	host/examples/go.c	/^    float mcts;$/;"	m	struct:__anon42	file:
mcts_tree	host/examples/go.c	/^typedef struct mcts_tree{$/;"	s	file:
mcts_tree	host/examples/go.c	/^} mcts_tree;$/;"	t	typeref:struct:mcts_tree	file:
mean	host/examples/go.c	/^    float *mean;$/;"	m	struct:mcts_tree	file:
mean	host/include/darknet.h	/^    float * mean;$/;"	m	struct:layer
mean	ta/include/darknet_TA.h	/^    float * mean;$/;"	m	struct:layer_TA
mean_array	host/src/utils.c	/^float mean_array(float *a, int n)$/;"	f
mean_arrays	host/src/utils.c	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	host/src/blas.c	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_cpu_TA	ta/blas_TA.c	/^void mean_cpu_TA(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta	host/include/darknet.h	/^    float * mean_delta;$/;"	m	struct:layer
mean_delta	ta/include/darknet_TA.h	/^    float * mean_delta;$/;"	m	struct:layer_TA
mean_delta_cpu	host/src/batchnorm_layer.c	/^void mean_delta_cpu(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
mean_delta_cpu_TA	ta/batchnorm_layer_TA.c	/^void mean_delta_cpu_TA(float *delta, float *variance, int batch, int filters, int spatial, float *mean_delta)$/;"	f
mean_delta_gpu	host/include/darknet.h	/^    float * mean_delta_gpu;$/;"	m	struct:layer
mean_gpu	host/include/darknet.h	/^    float * mean_gpu;$/;"	m	struct:layer
merge_weights	host/src/network.c	/^void merge_weights(layer l, layer base)$/;"	f
metadata	host/include/darknet.h	/^} metadata;$/;"	t	typeref:struct:__anon1
mg	host/src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon31
min	host/include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
min	host/include/socket_api.h	16;"	d
min_crop	host/include/darknet.h	/^    int min_crop;$/;"	m	struct:network
min_crop	ta/include/darknet_TA.h	/^    int min_crop;$/;"	m	struct:network_TA
min_ratio	host/include/darknet.h	/^    float min_ratio;$/;"	m	struct:network
min_ratio	ta/include/darknet_TA.h	/^    float min_ratio;$/;"	m	struct:network_TA
mkimg	host/examples/darknet.c	/^void mkimg(char *cfgfile, char *weightfile, int h, int w, int num, char *prefix)$/;"	f
momentum	host/include/darknet.h	/^    float momentum;$/;"	m	struct:__anon8
momentum	host/include/darknet.h	/^    float momentum;$/;"	m	struct:network
momentum	ta/include/darknet_TA.h	/^    float momentum;$/;"	m	struct:__anon48
momentum	ta/include/darknet_TA.h	/^    float momentum;$/;"	m	struct:network_TA
move	host/examples/go.c	/^} move;$/;"	t	typeref:struct:__anon42	file:
move_go	host/examples/go.c	/^void move_go(float *b, int p, int r, int c)$/;"	f
move_mcts	host/examples/go.c	/^mcts_tree *move_mcts(mcts_tree *tree, int index)$/;"	f
moves	host/examples/go.c	/^} moves;$/;"	t	typeref:struct:__anon41	file:
mr	host/src/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon31
mse_array	host/src/utils.c	/^float mse_array(float *a, int n)$/;"	f
mul_cpu	host/src/blas.c	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mult_add_into_cpu	host/src/blas.c	/^void mult_add_into_cpu(int N, float *X, float *Y, float *Z)$/;"	f
mutex	host/src/data.c	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
n	host/examples/go.c	/^    int n;$/;"	m	struct:__anon41	file:
n	host/include/darknet.h	/^    int n;$/;"	m	struct:__anon2
n	host/include/darknet.h	/^    int n;$/;"	m	struct:layer
n	host/include/darknet.h	/^    int n;$/;"	m	struct:load_args
n	host/include/darknet.h	/^    int n;$/;"	m	struct:network
n	host/src/network.c	/^    int n;$/;"	m	struct:__anon38	file:
n	ta/include/darknet_TA.h	/^    int n;$/;"	m	struct:__anon44
n	ta/include/darknet_TA.h	/^    int n;$/;"	m	struct:layer_TA
n	ta/include/darknet_TA.h	/^    int n;$/;"	m	struct:network_TA
name	host/include/darknet.h	/^    char **name;$/;"	m	struct:__anon2
name	ta/include/darknet_TA.h	/^    char **name;$/;"	m	struct:__anon44
names	host/include/darknet.h	/^    char **names;$/;"	m	struct:__anon1
nbiases	host/include/darknet.h	/^    int nbiases;$/;"	m	struct:layer
nbiases	ta/include/darknet_TA.h	/^    int nbiases;$/;"	m	struct:layer_TA
net	host/src/demo.c	/^static network *net;$/;"	v	file:
net	host/src/network.c	/^    network *net;$/;"	m	struct:__anon37	file:
net	host/src/parser.c	/^    network *net;$/;"	m	struct:size_params	file:
net_delta_back	host/main.c	/^float *net_delta_back;$/;"	v
net_input_back	host/main.c	/^float *net_input_back;$/;"	v
net_output_back	host/main.c	/^float *net_output_back;$/;"	v
net_output_return_CA	host/main.c	/^void net_output_return_CA(int net_outputs, int net_batch)$/;"	f
net_output_return_TA_params	ta/darknetp_ta.c	/^static TEE_Result net_output_return_TA_params(uint32_t param_types,$/;"	f	file:
net_result_back	host/main.c	/^float *net_result_back;$/;"	v
net_tag_buffer	host/main.c	/^uint8_t *net_tag_buffer;$/;"	v
net_truth_CA	host/main.c	/^void net_truth_CA(float *net_truth, int net_truths, int net_batch)$/;"	f
net_truth_TA_params	ta/darknetp_ta.c	/^static TEE_Result net_truth_TA_params(uint32_t param_types,$/;"	f	file:
netnum	ta/darknetp_ta.c	/^int netnum = 0;$/;"	v
netnum	ta/include/darknet_TA.h	/^    int netnum;$/;"	m	struct:layer_TA
nets	host/src/network.c	/^    network **nets;$/;"	m	struct:__anon38	file:
netta	ta/network_TA.c	/^network_TA netta;$/;"	v
netta_truth	ta/darknetp_ta.c	/^float *netta_truth;$/;"	v
network	host/include/darknet.h	/^typedef struct network network;$/;"	t	typeref:struct:network
network	host/include/darknet.h	/^typedef struct network{$/;"	s
network	host/include/darknet.h	/^} network;$/;"	t	typeref:struct:network
network_TA	ta/include/darknet_TA.h	/^typedef struct network_TA network_TA;$/;"	t	typeref:struct:network_TA
network_TA	ta/include/darknet_TA.h	/^typedef struct network_TA{$/;"	s
network_TA	ta/include/darknet_TA.h	/^} network_TA;$/;"	t	typeref:struct:network_TA
network_accuracies	host/src/network.c	/^float *network_accuracies(network *net, data d, int n)$/;"	f
network_accuracy	host/src/network.c	/^float network_accuracy(network *net, data d)$/;"	f
network_accuracy_multi	host/src/network.c	/^float network_accuracy_multi(network *net, data d, int n)$/;"	f
network_height	host/src/network.c	/^int network_height(network *net){return net->h;}$/;"	f
network_inputs	host/src/network.c	/^int network_inputs(network *net)$/;"	f
network_output	host/src/network.c	/^float *network_output(network *net)$/;"	f
network_output_layer	host/src/network.c	/^layer network_output_layer(network *net)$/;"	f
network_outputs	host/src/network.c	/^int network_outputs(network *net)$/;"	f
network_predict	host/src/network.c	/^float *network_predict(network *net, float *input)$/;"	f
network_predict_data	host/src/network.c	/^matrix network_predict_data(network *net, data test)$/;"	f
network_predict_data_multi	host/src/network.c	/^matrix network_predict_data_multi(network *net, data test, int n)$/;"	f
network_predict_image	host/src/network.c	/^float *network_predict_image(network *net, image im)$/;"	f
network_predict_rotations	host/examples/go.c	/^float *network_predict_rotations(network *net, float *next)$/;"	f
network_predict_softmax	host/src/network.c	/^float *network_predict_softmax(char *data_file)$/;"	f
network_width	host/src/network.c	/^int network_width(network *net){return net->w;}$/;"	f
next	host/include/darknet.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
nh	host/include/darknet.h	/^    int nh;$/;"	m	struct:load_args
nind	host/examples/go.c	/^static const int nind = 10;$/;"	v	file:
nms_comparator	host/src/box.c	/^int nms_comparator(const void *pa, const void *pb)$/;"	f
noadjust	host/include/darknet.h	/^    int noadjust;$/;"	m	struct:layer
noadjust	ta/include/darknet_TA.h	/^    int noadjust;$/;"	m	struct:layer_TA
node	host/include/darknet.h	/^typedef struct node{$/;"	s
node	host/include/darknet.h	/^} node;$/;"	t	typeref:struct:node
noi	host/examples/go.c	/^int noi = 1;$/;"	v
noloss	host/include/darknet.h	/^    int noloss;$/;"	m	struct:layer
noloss	ta/include/darknet_TA.h	/^    int noloss;$/;"	m	struct:layer_TA
nomore	host/src/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon23
noobject_scale	host/include/darknet.h	/^    float noobject_scale;$/;"	m	struct:layer
noobject_scale	ta/include/darknet_TA.h	/^    float noobject_scale;$/;"	m	struct:layer_TA
normTensorDesc	host/include/darknet.h	/^    cudnnTensorDescriptor_t normTensorDesc;$/;"	m	struct:layer
normalize_array	host/src/utils.c	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	host/src/blas.c	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_cpu_TA	ta/blas_TA.c	/^void normalize_cpu_TA(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_data_rows	host/src/data.c	/^void normalize_data_rows(data d)$/;"	f
normalize_delta_cpu	host/src/batchnorm_layer.c	/^void normalize_delta_cpu(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_delta_cpu_TA	ta/batchnorm_layer_TA.c	/^void normalize_delta_cpu_TA(float *x, float *mean, float *variance, float *mean_delta, float *variance_delta, int batch, int filters, int spatial, float *delta)$/;"	f
normalize_image	host/src/image.c	/^void normalize_image(image p)$/;"	f
normalize_image2	host/src/image.c	/^void normalize_image2(image p)$/;"	f
normalize_layer	host/examples/darknet.c	/^layer normalize_layer(layer l, int n)$/;"	f
normalize_net	host/examples/darknet.c	/^void normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
norms	host/include/darknet.h	/^    float * norms;$/;"	m	struct:layer
norms	ta/include/darknet_TA.h	/^    float * norms;$/;"	m	struct:layer_TA
norms_gpu	host/include/darknet.h	/^    float * norms_gpu;$/;"	m	struct:layer
notruth	host/include/darknet.h	/^    int notruth;$/;"	m	struct:network
notruth	ta/include/darknet_TA.h	/^    int notruth;$/;"	m	struct:network_TA
num_bits	host/src/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon27
num_boxes	host/include/darknet.h	/^    int *num_boxes;$/;"	m	struct:__anon13
num_boxes	host/include/darknet.h	/^    int num_boxes;$/;"	m	struct:load_args
num_channels	host/src/stb_image.h	/^   int num_channels;$/;"	m	struct:__anon20
num_detections	host/src/network.c	/^int num_detections(network *net, float thresh)$/;"	f
num_of_digits_int	ta/darknetp_ta.c	/^int num_of_digits_int(int a)$/;"	f
num_steps	host/include/darknet.h	/^    int num_steps;$/;"	m	struct:network
num_steps	ta/include/darknet_TA.h	/^    int num_steps;$/;"	m	struct:network_TA
numload	host/include/darknet.h	/^    int numload;$/;"	m	struct:layer
numload	ta/include/darknet_TA.h	/^    int numload;$/;"	m	struct:layer_TA
numops	host/examples/darknet.c	/^long numops(network *net)$/;"	f
nw	host/include/darknet.h	/^    int nw;$/;"	m	struct:load_args
nweights	host/include/darknet.h	/^    int nweights;$/;"	m	struct:layer
nweights	ta/include/darknet_TA.h	/^    int nweights;$/;"	m	struct:layer_TA
o_cpu	host/include/darknet.h	/^    float *o_cpu;$/;"	m	struct:layer
o_cpu	ta/include/darknet_TA.h	/^    float *o_cpu;$/;"	m	struct:layer_TA
o_gpu	host/include/darknet.h	/^    float *o_gpu;$/;"	m	struct:layer
object_scale	host/include/darknet.h	/^    float object_scale;$/;"	m	struct:layer
object_scale	ta/include/darknet_TA.h	/^    float object_scale;$/;"	m	struct:layer_TA
objectness	host/include/darknet.h	/^    float objectness;$/;"	m	struct:detection
objectness	host/include/darknet.h	/^    int objectness;$/;"	m	struct:layer
objectness	ta/include/darknet_TA.h	/^    int objectness;$/;"	m	struct:layer_TA
occupied	host/examples/go.c	/^static int occupied(float *b, int i)$/;"	f	file:
offset	host/src/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon31
one_hot_encode	host/src/utils.c	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
oneoff	host/examples/darknet.c	/^void oneoff(char *cfgfile, char *weightfile, char *outfile)$/;"	f
oneoff2	host/examples/darknet.c	/^void oneoff2(char *cfgfile, char *weightfile, char *outfile, int l)$/;"	f
onlyforward	host/include/darknet.h	/^    int onlyforward;$/;"	m	struct:layer
onlyforward	ta/include/darknet_TA.h	/^    int onlyforward;$/;"	m	struct:layer_TA
open_video_stream	host/src/image_opencv.cpp	/^void *open_video_stream(const char *f, int c, int w, int h, int fps)$/;"	f
operations	host/examples/darknet.c	/^void operations(char *cfgfile)$/;"	f
optimize_picture	host/examples/nightmare.c	/^void optimize_picture(network *net, image orig, int max_layer, float scale, float rate, float thresh, int norm)$/;"	f
option_find	host/src/option_list.c	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	host/src/option_list.c	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	host/src/option_list.c	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	host/src/option_list.c	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	host/src/option_list.c	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	host/src/option_list.c	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_insert	host/src/option_list.c	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_unused	host/src/option_list.c	/^void option_unused(list *l)$/;"	f
options	host/src/parser.c	/^    list *options;$/;"	m	struct:__anon40	file:
or_image	host/src/data.c	/^void or_image(image src, image dest, int c)$/;"	f
order	host/src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon23
out	host/src/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon29
out	host/src/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon34
out_c	host/include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_c	ta/include/darknet_TA.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer_TA
out_h	host/include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_h	host/include/darknet.h	/^    int out_h;$/;"	m	struct:load_args
out_h	ta/include/darknet_TA.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer_TA
out_w	host/include/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_w	host/include/darknet.h	/^    int out_w;$/;"	m	struct:load_args
out_w	ta/include/darknet_TA.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer_TA
output	host/include/darknet.h	/^    float * output;$/;"	m	struct:layer
output	host/include/darknet.h	/^    float *output;$/;"	m	struct:network
output	ta/include/darknet_TA.h	/^    float * output;$/;"	m	struct:layer_TA
output	ta/include/darknet_TA.h	/^    float *output;$/;"	m	struct:network_TA
output_gpu	host/include/darknet.h	/^    float * output_gpu;$/;"	m	struct:layer
output_gpu	host/include/darknet.h	/^    float *output_gpu;$/;"	m	struct:network
output_layer	host/include/darknet.h	/^    struct layer *output_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
output_layer	ta/include/darknet_TA.h	/^    struct layer_TA *output_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
outputs	host/include/darknet.h	/^    int outputs;$/;"	m	struct:layer
outputs	host/include/darknet.h	/^    int outputs;$/;"	m	struct:network
outputs	ta/include/darknet_TA.h	/^    int outputs;$/;"	m	struct:layer_TA
outputs	ta/include/darknet_TA.h	/^    int outputs;$/;"	m	struct:network_TA
overlap	host/src/box.c	/^float overlap(float x1, float w1, float x2, float w2)$/;"	f
pad	host/include/darknet.h	/^    int pad;$/;"	m	struct:layer
pad	ta/include/darknet_TA.h	/^    int pad;$/;"	m	struct:layer_TA
pal	host/src/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon34
parent	host/include/darknet.h	/^    int *parent;$/;"	m	struct:__anon2
parent	ta/include/darknet_TA.h	/^    int *parent;$/;"	m	struct:__anon44
parse	host/src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon34
parse_activation	host/src/parser.c	/^layer parse_activation(list *options, size_params params)$/;"	f
parse_avgpool	host/src/parser.c	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_batchnorm	host/src/parser.c	/^layer parse_batchnorm(list *options, size_params params)$/;"	f
parse_connected	host/src/parser.c	/^layer parse_connected(list *options, size_params params)$/;"	f
parse_convolutional	host/src/parser.c	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	host/src/parser.c	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_crnn	host/src/parser.c	/^layer parse_crnn(list *options, size_params params)$/;"	f
parse_crop	host/src/parser.c	/^crop_layer parse_crop(list *options, size_params params)$/;"	f
parse_csv_line	host/src/utils.c	/^list *parse_csv_line(char *line)$/;"	f
parse_data	host/src/parser.c	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_deconvolutional	host/src/parser.c	/^layer parse_deconvolutional(list *options, size_params params)$/;"	f
parse_detection	host/src/parser.c	/^detection_layer parse_detection(list *options, size_params params)$/;"	f
parse_dropout	host/src/parser.c	/^dropout_layer parse_dropout(list *options, size_params params, float *net_prev_output, float *net_prev_delta)$/;"	f
parse_fields	host/src/utils.c	/^float *parse_fields(char *line, int n)$/;"	f
parse_gru	host/src/parser.c	/^layer parse_gru(list *options, size_params params)$/;"	f
parse_iseg	host/src/parser.c	/^layer parse_iseg(list *options, size_params params)$/;"	f
parse_l2norm	host/src/parser.c	/^layer parse_l2norm(list *options, size_params params)$/;"	f
parse_last_layer	host/examples/classifier.c	/^int parse_last_layer(char *filesize)$/;"	f
parse_local	host/src/parser.c	/^local_layer parse_local(list *options, size_params params)$/;"	f
parse_logistic	host/src/parser.c	/^layer parse_logistic(list *options, size_params params)$/;"	f
parse_lstm	host/src/parser.c	/^layer parse_lstm(list *options, size_params params)$/;"	f
parse_maxpool	host/src/parser.c	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_net_options	host/src/parser.c	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	host/src/parser.c	/^network *parse_network_cfg(char *filename)$/;"	f
parse_normalization	host/src/parser.c	/^layer parse_normalization(list *options, size_params params)$/;"	f
parse_region	host/src/parser.c	/^layer parse_region(list *options, size_params params)$/;"	f
parse_reorg	host/src/parser.c	/^layer parse_reorg(list *options, size_params params)$/;"	f
parse_rnn	host/src/parser.c	/^layer parse_rnn(list *options, size_params params)$/;"	f
parse_route	host/src/parser.c	/^route_layer parse_route(list *options, size_params params, network *net)$/;"	f
parse_shortcut	host/src/parser.c	/^layer parse_shortcut(list *options, size_params params, network *net)$/;"	f
parse_softmax	host/src/parser.c	/^layer parse_softmax(list *options, size_params params)$/;"	f
parse_upsample	host/src/parser.c	/^layer parse_upsample(list *options, size_params params, network *net)$/;"	f
parse_yolo	host/src/parser.c	/^layer parse_yolo(list *options, size_params params)$/;"	f
parse_yolo_mask	host/src/parser.c	/^int *parse_yolo_mask(char *a, int *num)$/;"	f
partial	host/examples/darknet.c	/^void partial(char *cfgfile, char *weightfile, char *outfile, int max)$/;"	f
partition_point	host/src/parser.c	/^int partition_point = 0; \/\/4,5\/\/ number 5 is the dropout layer$/;"	v
pass	host/examples/go.c	/^    int pass;$/;"	m	struct:mcts_tree	file:
path	host/include/darknet.h	/^    char *path;$/;"	m	struct:load_args
paths	host/include/darknet.h	/^    char **paths;$/;"	m	struct:load_args
pick_move	host/examples/go.c	/^move pick_move(mcts_tree *tree, float temp, int player)$/;"	f
place_image	host/src/image.c	/^void place_image(image im, int w, int h, int dx, int dy, image canvas)$/;"	f
plse_activate	host/src/activations.h	/^static inline float plse_activate(float x)$/;"	f
plse_activate_TA	ta/include/activations_TA.h	/^static inline float plse_activate_TA(float x)$/;"	f
plse_gradient	host/src/activations.h	/^static inline float plse_gradient(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f
plse_gradient_TA	ta/include/activations_TA.h	/^static inline float plse_gradient_TA(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f
pm	host/src/utils.c	/^void pm(int M, int N, float *A)$/;"	f
policy	host/include/darknet.h	/^    learning_rate_policy policy;$/;"	m	struct:network
policy	ta/include/darknet_TA.h	/^    learning_rate_policy_TA policy;$/;"	m	struct:network_TA
ponder	host/examples/go.c	/^mcts_tree *ponder(mcts_tree *tree, network *net, float *b, float *ko, int player, float cpuct)$/;"	f
pop_column	host/src/matrix.c	/^float *pop_column(matrix *m, int c)$/;"	f
pow_cpu	host/src/blas.c	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
power	host/include/darknet.h	/^    float power;$/;"	m	struct:network
power	ta/include/darknet_TA.h	/^    float power;$/;"	m	struct:network_TA
predict_classifier	host/examples/classifier.c	/^void predict_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int top)$/;"	f
predict_isegmenter	host/examples/instance-segmenter.c	/^void predict_isegmenter(char *datafile, char *cfg, char *weights, char *filename)$/;"	f
predict_move2	host/examples/go.c	/^float predict_move2(network *net, float *board, float *move, int multi)$/;"	f
predict_regressor	host/examples/regressor.c	/^void predict_regressor(char *cfgfile, char *weightfile, char *filename)$/;"	f
predict_segmenter	host/examples/segmenter.c	/^void predict_segmenter(char *datafile, char *cfg, char *weights, char *filename)$/;"	f
predictions	host/src/demo.c	/^static float **predictions;$/;"	v	file:
prefix	host/src/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon33
prepare_tee_session	host/main.c	/^void prepare_tee_session()$/;"	f
prev	host/include/darknet.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node
prev_cell_cpu	host/include/darknet.h	/^    float *prev_cell_cpu;$/;"	m	struct:layer
prev_cell_cpu	ta/include/darknet_TA.h	/^    float *prev_cell_cpu;$/;"	m	struct:layer_TA
prev_cell_gpu	host/include/darknet.h	/^    float *prev_cell_gpu;$/;"	m	struct:layer
prev_state	host/include/darknet.h	/^    float * prev_state;$/;"	m	struct:layer
prev_state	ta/include/darknet_TA.h	/^    float * prev_state;$/;"	m	struct:layer_TA
prev_state_cpu	host/include/darknet.h	/^    float * prev_state_cpu;$/;"	m	struct:layer
prev_state_cpu	ta/include/darknet_TA.h	/^    float * prev_state_cpu;$/;"	m	struct:layer_TA
prev_state_gpu	host/include/darknet.h	/^    float * prev_state_gpu;$/;"	m	struct:layer
print_board	host/examples/go.c	/^void print_board(FILE *stream, float *board, int player, int *indexes)$/;"	f
print_cocos	host/examples/coco.c	/^static void print_cocos(FILE *fp, int image_id, detection *dets, int num_boxes, int classes, int w, int h)$/;"	f	file:
print_cocos	host/examples/detector.c	/^static void print_cocos(FILE *fp, char *image_path, detection *dets, int num_boxes, int classes, int w, int h)$/;"	f	file:
print_detector_detections	host/examples/detector.c	/^void print_detector_detections(FILE **fps, char *id, detection *dets, int total, int classes, int w, int h)$/;"	f
print_game	host/examples/go.c	/^int print_game(float *board, FILE *fp)$/;"	f
print_image	host/src/image.c	/^void print_image(image m)$/;"	f
print_imagenet_detections	host/examples/detector.c	/^void print_imagenet_detections(FILE *fp, int id, detection *dets, int total, int classes, int w, int h)$/;"	f
print_letters	host/src/data.c	/^void print_letters(float *pred, int n)$/;"	f
print_matrix	host/src/matrix.c	/^void print_matrix(matrix m)$/;"	f
print_network	host/src/network.c	/^void print_network(network *net)$/;"	f
print_statistics	host/src/utils.c	/^void print_statistics(float *a, int n)$/;"	f
print_symbol	host/examples/rnn.c	/^void print_symbol(int n, char **tokens){$/;"	f
print_weights	host/examples/darknet.c	/^void print_weights(char *cfgfile, char *weightfile, int n)$/;"	f
print_yolo_detections	host/examples/yolo.c	/^void print_yolo_detections(FILE **fps, char *id, int total, int classes, int w, int h, detection *dets)$/;"	f
prior	host/examples/go.c	/^    float *prior;$/;"	m	struct:mcts_tree	file:
prob	host/examples/go.c	/^    float *prob;$/;"	m	struct:mcts_tree	file:
prob	host/include/darknet.h	/^    float *prob;$/;"	m	struct:detection
probability	host/include/darknet.h	/^    float probability;$/;"	m	struct:layer
probability	ta/include/darknet_TA.h	/^    float probability;$/;"	m	struct:layer_TA
progressive	host/src/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon23
propagate_liberty	host/examples/go.c	/^static void propagate_liberty(float *board, int *lib, int *visited, int row, int col, int side)$/;"	f	file:
pull_batchnorm_layer	host/src/batchnorm_layer.c	/^void pull_batchnorm_layer(layer l)$/;"	f
pull_connected_layer	host/src/connected_layer.c	/^void pull_connected_layer(layer l)$/;"	f
pull_cost_layer	host/src/cost_layer.c	/^void pull_cost_layer(cost_layer l)$/;"	f
pull_crnn_layer	host/src/crnn_layer.c	/^void pull_crnn_layer(layer l)$/;"	f
pull_gru_layer	host/src/gru_layer.c	/^void pull_gru_layer(layer l)$/;"	f
pull_local_layer	host/src/local_layer.c	/^void pull_local_layer(local_layer l)$/;"	f
pull_network_output	host/src/network.c	/^void pull_network_output(network *net)$/;"	f
pull_rnn_layer	host/src/rnn_layer.c	/^void pull_rnn_layer(layer l)$/;"	f
pull_softmax_layer_output	host/src/softmax_layer.c	/^void pull_softmax_layer_output(const softmax_layer layer)$/;"	f
pull_weights	host/src/network.c	/^void pull_weights(layer l)$/;"	f
push_batchnorm_layer	host/src/batchnorm_layer.c	/^void push_batchnorm_layer(layer l)$/;"	f
push_connected_layer	host/src/connected_layer.c	/^void push_connected_layer(layer l)$/;"	f
push_cost_layer	host/src/cost_layer.c	/^void push_cost_layer(cost_layer l)$/;"	f
push_crnn_layer	host/src/crnn_layer.c	/^void push_crnn_layer(layer l)$/;"	f
push_gru_layer	host/src/gru_layer.c	/^void push_gru_layer(layer l)$/;"	f
push_local_layer	host/src/local_layer.c	/^void push_local_layer(local_layer l)$/;"	f
push_rnn_layer	host/src/rnn_layer.c	/^void push_rnn_layer(layer l)$/;"	f
push_weights	host/src/network.c	/^void push_weights(layer l)$/;"	f
r_cpu	host/include/darknet.h	/^    float *r_cpu;$/;"	m	struct:layer
r_cpu	ta/include/darknet_TA.h	/^    float *r_cpu;$/;"	m	struct:layer_TA
r_gpu	host/include/darknet.h	/^    float *r_gpu;$/;"	m	struct:layer
rad	host/include/darknet.h	/^    float rad;$/;"	m	struct:__anon10
ramp_activate	host/src/activations.h	/^static inline float ramp_activate(float x){return x*(x>0)+.1*x;}$/;"	f
ramp_activate_TA	ta/include/activations_TA.h	/^static inline float ramp_activate_TA(float x){return x*(x>0)+.1*x;}$/;"	f
ramp_gradient	host/src/activations.h	/^static inline float ramp_gradient(float x){return (x>0)+.1;}$/;"	f
ramp_gradient_TA	ta/include/activations_TA.h	/^static inline float ramp_gradient_TA(float x){return (x>0)+.1;}$/;"	f
rand	host/include/darknet.h	/^    float * rand;$/;"	m	struct:layer
rand	ta/include/darknet_TA.h	/^    float * rand;$/;"	m	struct:layer_TA
rand_gpu	host/include/darknet.h	/^    float * rand_gpu;$/;"	m	struct:layer
rand_int	host/src/utils.c	/^int rand_int(int min, int max)$/;"	f
rand_normal	host/src/utils.c	/^float rand_normal()$/;"	f
rand_normal_TA	ta/utils_TA.c	/^float rand_normal_TA(float mu, float sigma){$/;"	f
rand_normal_ms	host/src/utils.c	/^float rand_normal_ms(float mu, float sigma){$/;"	f
rand_scale	host/src/utils.c	/^float rand_scale(float s)$/;"	f
rand_size_t	host/src/utils.c	/^size_t rand_size_t()$/;"	f
rand_uniform	host/src/utils.c	/^float rand_uniform(float min, float max)$/;"	f
rand_uniform_TA	ta/utils_TA.c	/^float rand_uniform_TA(float min, float max)$/;"	f
random	host/include/darknet.h	/^    int random;$/;"	m	struct:layer
random	host/include/darknet.h	/^    int random;$/;"	m	struct:network
random	ta/include/darknet_TA.h	/^    int random;$/;"	m	struct:layer_TA
random	ta/include/darknet_TA.h	/^    int random;$/;"	m	struct:network_TA
random_augment_args	host/src/image.c	/^augment_args random_augment_args(image im, float angle, float aspect, int low, int high, int w, int h)$/;"	f
random_augment_image	host/src/image.c	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int w, int h)$/;"	f
random_crop_image	host/src/image.c	/^image random_crop_image(image im, int w, int h)$/;"	f
random_distort_image	host/src/image.c	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f
random_go_moves	host/examples/go.c	/^data random_go_moves(moves m, int n)$/;"	f
random_index_order	host/src/utils.c	/^int *random_index_order(int min, int max)$/;"	f
random_matrix	host/src/gemm.c	/^float *random_matrix(int rows, int cols)$/;"	f
random_unit_vector_image	host/examples/lsd.c	/^image random_unit_vector_image(int w, int h, int c)$/;"	f
randomize_boxes	host/src/data.c	/^void randomize_boxes(box_label *b, int n)$/;"	f
randomize_data	host/src/data.c	/^void randomize_data(data d)$/;"	f
ratio	host/include/darknet.h	/^    float ratio;$/;"	m	struct:layer
ratio	host/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon34
ratio	ta/include/darknet_TA.h	/^    float ratio;$/;"	m	struct:layer_TA
raw_coeff	host/src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon23::__anon24
raw_data	host/src/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon23::__anon24
rcon	ta/aes-internal.c	/^const aes_uint rcon[] = {$/;"	v
rcons	ta/aes-internal.c	/^const aes_uchar rcons[] = {$/;"	v
read	host/src/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon17
read_all	host/src/utils.c	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	host/src/utils.c	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_boxes	host/src/data.c	/^box_label *read_boxes(char *filename, int *n)$/;"	f
read_cfg	host/src/parser.c	/^list *read_cfg(char *filename)$/;"	f
read_data_cfg	host/src/option_list.c	/^list *read_data_cfg(char *filename)$/;"	f
read_file	host/src/utils.c	/^unsigned char *read_file(char *filename)$/;"	f
read_from_callbacks	host/src/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon18
read_int	host/src/utils.c	/^int read_int(int fd)$/;"	f
read_intlist	host/src/utils.c	/^int *read_intlist(char *gpu_list, int *ngpus, int d)$/;"	f
read_map	host/src/utils.c	/^int *read_map(char *filename)$/;"	f
read_option	host/src/option_list.c	/^int read_option(char *s, list *options)$/;"	f
read_tokenized_data	host/examples/rnn.c	/^int *read_tokenized_data(char *filename, size_t *read)$/;"	f
read_tokens	host/examples/rnn.c	/^char **read_tokens(char *filename, size_t *read)$/;"	f
read_tree	host/src/tree.c	/^tree *read_tree(char *filename)$/;"	f
readdata	host/src/socket_server.c	/^bool readdata(int sock, void *buf, int buflen)$/;"	f
readfile	host/src/socket_server.c	/^bool readfile(int sock, FILE *f, FILE *f1)$/;"	f
readlong	host/src/socket_server.c	/^bool readlong(int sock, long *value)$/;"	f
reconstruct_picture	host/examples/nightmare.c	/^void reconstruct_picture(network *net, float *features, image recon, image update, float rate, float momentum, float lambda, int smooth_size, int iters)$/;"	f
relie_activate	host/src/activations.h	/^static inline float relie_activate(float x){return (x>0) ? x : .01*x;}$/;"	f
relie_activate_TA	ta/include/activations_TA.h	/^static inline float relie_activate_TA(float x){return (x>0) ? x : .01*x;}$/;"	f
relie_gradient	host/src/activations.h	/^static inline float relie_gradient(float x){return (x>0) ? 1 : .01;}$/;"	f
relie_gradient_TA	ta/include/activations_TA.h	/^static inline float relie_gradient_TA(float x){return (x>0) ? 1 : .01;}$/;"	f
relu_activate	host/src/activations.h	/^static inline float relu_activate(float x){return x*(x>0);}$/;"	f
relu_activate_TA	ta/include/activations_TA.h	/^static inline float relu_activate_TA(float x){return x*(x>0);}$/;"	f
relu_gradient	host/src/activations.h	/^static inline float relu_gradient(float x){return (x>0);}$/;"	f
relu_gradient_TA	ta/include/activations_TA.h	/^static inline float relu_gradient_TA(float x){return (x>0);}$/;"	f
remember_network	host/src/demo.c	/^void remember_network(network *net)$/;"	f
remote_attestation	host/main.c	/^int remote_attestation(void)$/;"	f
remove_connected	host/examples/go.c	/^static void remove_connected(float *b, int *lib, int p, int r, int c)$/;"	f	file:
reorg	host/include/darknet.h	/^    int reorg;$/;"	m	struct:layer
reorg	ta/include/darknet_TA.h	/^    int reorg;$/;"	m	struct:layer_TA
reorg_cpu	host/src/blas.c	/^void reorg_cpu(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f
resample	host/src/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon25
resample_row_1	host/src/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	host/src/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	host/src/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon23
rescale_net	host/examples/darknet.c	/^void rescale_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rescale_weights	host/src/convolutional_layer.c	/^void rescale_weights(convolutional_layer l, float scale, float trans)$/;"	f
rescore	host/include/darknet.h	/^    int rescore;$/;"	m	struct:layer
rescore	ta/include/darknet_TA.h	/^    int rescore;$/;"	m	struct:layer_TA
reset_layer	host/include/darknet.h	/^    struct layer *reset_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
reset_layer	ta/include/darknet_TA.h	/^    struct layer_TA *reset_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
reset_network_state	host/src/network.c	/^void reset_network_state(network *net, int b)$/;"	f
reset_normalize_net	host/examples/darknet.c	/^void reset_normalize_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
reset_rnn	host/src/network.c	/^void reset_rnn(network *net)$/;"	f
resize_avgpool_layer	host/src/avgpool_layer.c	/^void resize_avgpool_layer(avgpool_layer *l, int w, int h)$/;"	f
resize_batchnorm_layer	host/src/batchnorm_layer.c	/^void resize_batchnorm_layer(layer *layer, int w, int h)$/;"	f
resize_convolutional_layer	host/src/convolutional_layer.c	/^void resize_convolutional_layer(convolutional_layer *l, int w, int h)$/;"	f
resize_cost_layer	host/src/cost_layer.c	/^void resize_cost_layer(cost_layer *l, int inputs)$/;"	f
resize_crop_layer	host/src/crop_layer.c	/^void resize_crop_layer(layer *l, int w, int h)$/;"	f
resize_data	host/src/data.c	/^data resize_data(data orig, int w, int h)$/;"	f
resize_deconvolutional_layer	host/src/deconvolutional_layer.c	/^void resize_deconvolutional_layer(layer *l, int h, int w)$/;"	f
resize_dropout_layer	host/src/dropout_layer.c	/^void resize_dropout_layer(dropout_layer *l, int inputs)$/;"	f
resize_dropout_layer_TA	ta/dropout_layer_TA.c	/^void resize_dropout_layer_TA(dropout_layer_TA *l, int inputs)$/;"	f
resize_image	host/src/image.c	/^image resize_image(image im, int w, int h)$/;"	f
resize_iseg_layer	host/src/iseg_layer.c	/^void resize_iseg_layer(layer *l, int w, int h)$/;"	f
resize_matrix	host/src/matrix.c	/^matrix resize_matrix(matrix m, int size)$/;"	f
resize_max	host/src/image.c	/^image resize_max(image im, int max)$/;"	f
resize_maxpool_layer	host/src/maxpool_layer.c	/^void resize_maxpool_layer(maxpool_layer *l, int w, int h)$/;"	f
resize_maxpool_layer_TA	ta/maxpool_layer_TA.c	/^void resize_maxpool_layer_TA(maxpool_layer_TA *l, int w, int h)$/;"	f
resize_min	host/src/image.c	/^image resize_min(image im, int min)$/;"	f
resize_network	host/src/network.c	/^int resize_network(network *net, int w, int h)$/;"	f
resize_normalization_layer	host/src/normalization_layer.c	/^void resize_normalization_layer(layer *layer, int w, int h)$/;"	f
resize_region_layer	host/src/region_layer.c	/^void resize_region_layer(layer *l, int w, int h)$/;"	f
resize_reorg_layer	host/src/reorg_layer.c	/^void resize_reorg_layer(layer *l, int w, int h)$/;"	f
resize_route_layer	host/src/route_layer.c	/^void resize_route_layer(route_layer *l, network *net)$/;"	f
resize_shortcut_layer	host/src/shortcut_layer.c	/^void resize_shortcut_layer(layer *l, int w, int h)$/;"	f
resize_upsample_layer	host/src/upsample_layer.c	/^void resize_upsample_layer(layer *l, int w, int h)$/;"	f
resize_yolo_layer	host/src/yolo_layer.c	/^void resize_yolo_layer(layer *l, int w, int h)$/;"	f
resized	host/include/darknet.h	/^    image *resized;$/;"	m	struct:load_args
restart_interval	host/src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon23
result	host/examples/go.c	/^    float result;$/;"	m	struct:mcts_tree	file:
reverse	host/include/darknet.h	/^    int reverse;$/;"	m	struct:layer
reverse	ta/include/darknet_TA.h	/^    int reverse;$/;"	m	struct:layer_TA
reverse	ta/math_TA.c	/^void reverse(char *str, int len)$/;"	f
rgb	host/src/stb_image.h	/^   int            rgb;$/;"	m	struct:__anon23
rgb_to_hsv	host/src/image.c	/^void rgb_to_hsv(image im)$/;"	f
rgb_to_yuv	host/src/image.c	/^void rgb_to_yuv(image im)$/;"	f
rgbgr_image	host/src/image.c	/^void rgbgr_image(image im)$/;"	f
rgbgr_net	host/examples/darknet.c	/^void rgbgr_net(char *cfgfile, char *weightfile, char *outfile)$/;"	f
rgbgr_weights	host/src/convolutional_layer.c	/^void rgbgr_weights(convolutional_layer l)$/;"	f
right	host/include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon15
rolling_mean	host/include/darknet.h	/^    float * rolling_mean;$/;"	m	struct:layer
rolling_mean	ta/include/darknet_TA.h	/^    float * rolling_mean;$/;"	m	struct:layer_TA
rolling_mean_gpu	host/include/darknet.h	/^    float * rolling_mean_gpu;$/;"	m	struct:layer
rolling_variance	host/include/darknet.h	/^    float * rolling_variance;$/;"	m	struct:layer
rolling_variance	ta/include/darknet_TA.h	/^    float * rolling_variance;$/;"	m	struct:layer_TA
rolling_variance_gpu	host/include/darknet.h	/^    float * rolling_variance_gpu;$/;"	m	struct:layer
rotate_crop_image	host/src/image.c	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f
rotate_image	host/src/image.c	/^image rotate_image(image im, float rad)$/;"	f
rotate_image_cw	host/src/image.c	/^void rotate_image_cw(image im, int times)$/;"	f
rotr	ta/include/aes-internal.h	/^static inline aes_uint rotr(aes_uint val, int bits)$/;"	f
roundnum	ta/network_TA.c	/^int roundnum = 0;$/;"	v
route_layer	host/src/route_layer.h	/^typedef layer route_layer;$/;"	t
row	host/examples/go.c	/^    int row;$/;"	m	struct:__anon42	file:
rows	host/include/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix
rsbox	ta/aes_TA.c	/^static const uint8_t rsbox[256] = {$/;"	v	file:
run_art	host/examples/art.c	/^void run_art(int argc, char **argv)$/;"	f
run_captcha	host/examples/captcha.c	/^void run_captcha(int argc, char **argv)$/;"	f
run_char_rnn	host/examples/rnn.c	/^void run_char_rnn(int argc, char **argv)$/;"	f
run_cifar	host/examples/cifar.c	/^void run_cifar(int argc, char **argv)$/;"	f
run_classifier	host/examples/classifier.c	/^void run_classifier(int argc, char **argv)$/;"	f
run_coco	host/examples/coco.c	/^void run_coco(int argc, char **argv)$/;"	f
run_detector	host/examples/detector.c	/^void run_detector(int argc, char **argv)$/;"	f
run_go	host/examples/go.c	/^void run_go(int argc, char **argv)$/;"	f
run_isegmenter	host/examples/instance-segmenter.c	/^void run_isegmenter(int argc, char **argv)$/;"	f
run_lsd	host/examples/lsd.c	/^void run_lsd(int argc, char **argv)$/;"	f
run_mcts	host/examples/go.c	/^mcts_tree *run_mcts(mcts_tree *tree, network *net, float *board, float *ko, int player, int n, float cpuct, float secs)$/;"	f
run_nightmare	host/examples/nightmare.c	/^void run_nightmare(int argc, char **argv)$/;"	f
run_regressor	host/examples/regressor.c	/^void run_regressor(int argc, char **argv)$/;"	f
run_segmenter	host/examples/segmenter.c	/^void run_segmenter(int argc, char **argv)$/;"	f
run_super	host/examples/super.c	/^void run_super(int argc, char **argv)$/;"	f
run_tag	host/examples/tag.c	/^void run_tag(int argc, char **argv)$/;"	f
run_yolo	host/examples/yolo.c	/^void run_yolo(int argc, char **argv)$/;"	f
running	host/src/demo.c	/^static int running = 0;$/;"	v	file:
s	host/src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon23
s	host/src/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon29
sample_array	host/src/utils.c	/^int sample_array(float *a, int n)$/;"	f
saturate_exposure_image	host/src/image.c	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f
saturate_image	host/src/image.c	/^void saturate_image(image im, float sat)$/;"	f
saturation	host/include/darknet.h	/^    float saturation;$/;"	m	struct:layer
saturation	host/include/darknet.h	/^    float saturation;$/;"	m	struct:load_args
saturation	host/include/darknet.h	/^    float saturation;$/;"	m	struct:network
saturation	ta/include/darknet_TA.h	/^    float saturation;$/;"	m	struct:layer_TA
saturation	ta/include/darknet_TA.h	/^    float saturation;$/;"	m	struct:network_TA
save_batchnorm_weights	host/src/parser.c	/^void save_batchnorm_weights(layer l, FILE *fp)$/;"	f
save_batchnorm_weights_comm	host/src/parser.c	/^void save_batchnorm_weights_comm(layer l, int i)$/;"	f
save_connected_weights	host/src/parser.c	/^void save_connected_weights(layer l, FILE *fp)$/;"	f
save_connected_weights_comm	host/src/parser.c	/^void save_connected_weights_comm(layer l, int i)$/;"	f
save_convolutional_weights	host/src/parser.c	/^void save_convolutional_weights(layer l, FILE *fp)$/;"	f
save_convolutional_weights_binary	host/src/parser.c	/^void save_convolutional_weights_binary(layer l, FILE *fp)$/;"	f
save_convolutional_weights_comm	host/src/parser.c	/^void save_convolutional_weights_comm(layer l, int i)$/;"	f
save_delta_gpu	host/include/darknet.h	/^    float * save_delta_gpu;$/;"	m	struct:layer
save_gpu	host/include/darknet.h	/^    float * save_gpu;$/;"	m	struct:layer
save_image	host/src/image.c	/^void save_image(image im, const char *name)$/;"	f
save_image_options	host/src/image.c	/^void save_image_options(image im, const char *name, IMTYPE f, int quality)$/;"	f
save_weights	host/src/parser.c	/^void save_weights(network *net, char *filename)$/;"	f
save_weights_CA	host/main.c	/^void save_weights_CA(float *vec, int length, int layer_i, char type)$/;"	f
save_weights_TA	ta/parser_TA.c	/^void save_weights_TA(float *weights_encrypted, int length, int layer_i, char type)$/;"	f
save_weights_TA_params	ta/darknetp_ta.c	/^static TEE_Result save_weights_TA_params(uint32_t param_types,$/;"	f	file:
save_weights_upto	host/src/parser.c	/^void save_weights_upto(network *net, char *filename, int cutoff)$/;"	f
sbox	ta/aes_TA.c	/^static const uint8_t sbox[256] = {$/;"	v	file:
scal_cpu	host/src/blas.c	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scal_cpu_TA	ta/blas_TA.c	/^void scal_cpu_TA(int N, float ALPHA, float *X, int INCX)$/;"	f
scale	host/include/darknet.h	/^    float scale;$/;"	m	struct:__anon10
scale	host/include/darknet.h	/^    float scale;$/;"	m	struct:layer
scale	host/include/darknet.h	/^    float scale;$/;"	m	struct:network
scale	host/include/darknet.h	/^    int scale;$/;"	m	struct:load_args
scale	ta/include/darknet_TA.h	/^    float scale;$/;"	m	struct:layer_TA
scale	ta/include/darknet_TA.h	/^    float scale;$/;"	m	struct:network_TA
scale_array	host/src/utils.c	/^void scale_array(float *a, int n, float s)$/;"	f
scale_bias	host/src/convolutional_layer.c	/^void scale_bias(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_bias_TA	ta/convolutional_layer_TA.c	/^void scale_bias_TA(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_change_gpu	host/include/darknet.h	/^    float * scale_change_gpu;$/;"	m	struct:layer
scale_data_rows	host/src/data.c	/^void scale_data_rows(data d, float s)$/;"	f
scale_image	host/src/image.c	/^void scale_image(image m, float s)$/;"	f
scale_image_channel	host/src/image.c	/^void scale_image_channel(image im, int c, float v)$/;"	f
scale_m	host/include/darknet.h	/^    float * scale_m;$/;"	m	struct:layer
scale_m	ta/include/darknet_TA.h	/^    float * scale_m;$/;"	m	struct:layer_TA
scale_m_gpu	host/include/darknet.h	/^    float *scale_m_gpu;$/;"	m	struct:layer
scale_matrix	host/src/matrix.c	/^void scale_matrix(matrix m, float scale)$/;"	f
scale_updates	host/include/darknet.h	/^    float * scale_updates;$/;"	m	struct:layer
scale_updates	ta/include/darknet_TA.h	/^    float * scale_updates;$/;"	m	struct:layer_TA
scale_updates_gpu	host/include/darknet.h	/^    float * scale_updates_gpu;$/;"	m	struct:layer
scale_v	host/include/darknet.h	/^    float * scale_v;$/;"	m	struct:layer
scale_v	ta/include/darknet_TA.h	/^    float * scale_v;$/;"	m	struct:layer_TA
scale_v_gpu	host/include/darknet.h	/^    float *scale_v_gpu;$/;"	m	struct:layer
scale_weights	host/src/network.c	/^void scale_weights(layer l, float s)$/;"	f
scales	host/include/darknet.h	/^    float * scales;$/;"	m	struct:layer
scales	host/include/darknet.h	/^    float *scales;$/;"	m	struct:network
scales	ta/include/darknet_TA.h	/^    float * scales;$/;"	m	struct:layer_TA
scales	ta/include/darknet_TA.h	/^    float *scales;$/;"	m	struct:network_TA
scales_gpu	host/include/darknet.h	/^    float * scales_gpu;$/;"	m	struct:layer
scan_n	host/src/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon23
score_game	host/examples/go.c	/^float score_game(float *board)$/;"	f
sec	host/src/utils.c	/^float sec(clock_t clocks)$/;"	f
section	host/src/parser.c	/^}section;$/;"	t	typeref:struct:__anon40	file:
seen	host/include/darknet.h	/^    size_t *seen;$/;"	m	struct:network
seen	ta/include/darknet_TA.h	/^    size_t *seen;$/;"	m	struct:network_TA
select_data	host/src/data.c	/^data select_data(data *orig, int *inds)$/;"	f
select_mcts	host/examples/go.c	/^float select_mcts(mcts_tree *root, network *net, float *prev, float cpuct)$/;"	f
self_go	host/examples/go.c	/^void self_go(char *filename, char *weightfile, char *f2, char *w2, int multi)$/;"	f
self_layer	host/include/darknet.h	/^    struct layer *self_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
self_layer	ta/include/darknet_TA.h	/^    struct layer_TA *self_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
selu_activate	host/src/activations.h	/^static inline float selu_activate(float x){return (x >= 0)*1.0507*x + (x < 0)*1.0507*1.6732*(exp(x)-1);}$/;"	f
selu_activate_TA	ta/include/activations_TA.h	/^static inline float selu_activate_TA(float x){return (x >= 0)*1.0507*x + (x < 0)*1.0507*1.6732*(ta_exp(x)-1);}$/;"	f
selu_gradient	host/src/activations.h	/^static inline float selu_gradient(float x){return (x >= 0)*1.0507 + (x < 0)*(x + 1.0507*1.6732);}$/;"	f
selu_gradient_TA	ta/include/activations_TA.h	/^static inline float selu_gradient_TA(float x){return (x >= 0)*1.0507 + (x < 0)*(x + 1.0507*1.6732);}$/;"	f
senddata	host/src/socket_client.c	/^bool senddata(int sock, void *buf, int buflen)$/;"	f
sendfile	host/src/socket_client.c	/^bool sendfile(int sock, FILE *f)$/;"	f
sendlong	host/src/socket_client.c	/^bool sendlong(int sock, long value)$/;"	f
sess	host/main.c	/^TEEC_Session sess;$/;"	v
session_token	host/main.c	/^uint32_t session_token;$/;"	v
set_batch_network	host/src/network.c	/^void set_batch_network(network *net, int b)$/;"	f
set_network_alpha_beta	host/examples/lsd.c	/^void set_network_alpha_beta(network *net, float alpha, float beta)$/;"	f
set_pixel	host/src/image.c	/^static void set_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
set_temp_network	host/src/network.c	/^void set_temp_network(network *net, float t)$/;"	f
shallow	host/include/darknet.h	/^    int shallow;$/;"	m	struct:__anon13
shift	host/include/darknet.h	/^    float shift;$/;"	m	struct:layer
shift	ta/include/darknet_TA.h	/^    float shift;$/;"	m	struct:layer_TA
shift_right_block	ta/aes-gcm.c	/^static void shift_right_block(aes_uchar *v)$/;"	f	file:
shortcut	host/include/darknet.h	/^    int shortcut;$/;"	m	struct:layer
shortcut	ta/include/darknet_TA.h	/^    int shortcut;$/;"	m	struct:layer_TA
shortcut_cpu	host/src/blas.c	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float s1, float s2, float *out)$/;"	f
show_image	host/src/image.c	/^int show_image(image p, const char *name, int ms)$/;"	f
show_image_collapsed	host/src/image.c	/^void show_image_collapsed(image p, char *name)$/;"	f
show_image_cv	host/src/image_opencv.cpp	/^int show_image_cv(image im, const char* name, int ms)$/;"	f
show_image_layers	host/src/image.c	/^void show_image_layers(image p, char *name)$/;"	f
show_image_normalized	host/src/image.c	/^void show_image_normalized(image im, const char *name)$/;"	f
show_images	host/src/image.c	/^void show_images(image *ims, int n, char *window)$/;"	f
shuffle	host/src/utils.c	/^void shuffle(void *arr, size_t n, size_t size)$/;"	f
side	host/include/darknet.h	/^    int side;$/;"	m	struct:layer
side	ta/include/darknet_TA.h	/^    int side;$/;"	m	struct:layer_TA
simpson	ta/math_TA.c	/^double simpson(double a, double b,int flag)$/;"	f
size	host/include/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
size	host/include/darknet.h	/^    int size;$/;"	m	struct:layer
size	host/include/darknet.h	/^    int size;$/;"	m	struct:list
size	host/src/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon22
size	host/src/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon26
size	host/src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon32
size	ta/include/darknet_TA.h	/^    int size;$/;"	m	struct:layer_TA
size_network	host/src/demo.c	/^int size_network(network *net)$/;"	f
size_params	host/src/parser.c	/^typedef struct size_params{$/;"	s	file:
size_params	host/src/parser.c	/^} size_params;$/;"	t	typeref:struct:size_params	file:
skip	host/src/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon17
sl	host/examples/classifier.c	/^layer sl;$/;"	v
slerp	host/examples/lsd.c	/^void slerp(float *start, float *end, float s, int n, float *out)$/;"	f
smooth	host/examples/nightmare.c	/^void smooth(image recon, image update, float lambda, int num)$/;"	f
smooth	host/include/darknet.h	/^    float smooth;$/;"	m	struct:layer
smooth	ta/include/darknet_TA.h	/^    float smooth;$/;"	m	struct:layer_TA
smooth_data	host/src/data.c	/^void smooth_data(data d)$/;"	f
smooth_l1_cpu	host/src/blas.c	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
smooth_l1_cpu_TA	ta/blas_TA.c	/^void smooth_l1_cpu_TA(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softmax	host/include/darknet.h	/^    int softmax;$/;"	m	struct:layer
softmax	host/src/blas.c	/^void softmax(float *input, int n, float temp, int stride, float *output)$/;"	f
softmax	ta/include/darknet_TA.h	/^    int softmax;$/;"	m	struct:layer_TA
softmax_TA	ta/blas_TA.c	/^void softmax_TA(float *input, int n, float temp, int stride, float *output)$/;"	f
softmax_cpu	host/src/blas.c	/^void softmax_cpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_cpu_TA	ta/blas_TA.c	/^void softmax_cpu_TA(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_layer	host/src/softmax_layer.h	/^typedef layer softmax_layer;$/;"	t
softmax_layer_TA	ta/include/softmax_layer_TA.h	/^typedef layer_TA softmax_layer_TA;$/;"	t
softmax_lta	ta/darknetp_ta.c	/^layer_TA softmax_lta;$/;"	v
softmax_tree	host/include/darknet.h	/^    tree *softmax_tree;$/;"	m	struct:layer
softmax_tree	ta/include/darknet_TA.h	/^    tree_TA *softmax_tree;$/;"	m	struct:layer_TA
softmax_x_ent_cpu	host/src/blas.c	/^void softmax_x_ent_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softmax_x_ent_cpu_TA	ta/blas_TA.c	/^void softmax_x_ent_cpu_TA(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
sort_class	host/include/darknet.h	/^    int sort_class;$/;"	m	struct:detection
sorta_shuffle	host/src/utils.c	/^void sorta_shuffle(void *arr, size_t n, size_t size, size_t sections)$/;"	f
spatial	host/include/darknet.h	/^    int spatial;$/;"	m	struct:layer
spatial	ta/include/darknet_TA.h	/^    int spatial;$/;"	m	struct:layer_TA
spatial_mean	host/include/darknet.h	/^    float * spatial_mean;$/;"	m	struct:layer
spatial_mean	ta/include/darknet_TA.h	/^    float * spatial_mean;$/;"	m	struct:layer_TA
spec_end	host/src/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon23
spec_start	host/src/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon23
speed	host/examples/darknet.c	/^void speed(char *cfgfile, int tics)$/;"	f
split_data	host/src/data.c	/^data *split_data(data d, int part, int total)$/;"	f
split_str	host/src/utils.c	/^list *split_str(char *s, char delim)$/;"	f
sqrt	host/include/darknet.h	/^    int sqrt;$/;"	m	struct:layer
sqrt	ta/include/darknet_TA.h	/^    int sqrt;$/;"	m	struct:layer_TA
squared	host/include/darknet.h	/^    float * squared;$/;"	m	struct:layer
squared	ta/include/darknet_TA.h	/^    float * squared;$/;"	m	struct:layer_TA
squared_gpu	host/include/darknet.h	/^    float * squared_gpu;$/;"	m	struct:layer
srcTensorDesc	host/include/darknet.h	/^    cudnnTensorDescriptor_t srcTensorDesc, dstTensorDesc;$/;"	m	struct:layer
stair_activate	host/src/activations.h	/^static inline float stair_activate(float x)$/;"	f
stair_activate_TA	ta/include/activations_TA.h	/^static inline float stair_activate_TA(float x)$/;"	f
stair_gradient	host/src/activations.h	/^static inline float stair_gradient(float x)$/;"	f
stair_gradient_TA	ta/include/activations_TA.h	/^static inline float stair_gradient_TA(float x)$/;"	f
start_x	host/src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon34
start_y	host/src/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon34
state	host/include/darknet.h	/^    float * state;$/;"	m	struct:layer
state	host/main.c	/^char state;$/;"	v
state	ta/include/darknet_TA.h	/^    float * state;$/;"	m	struct:layer_TA
state_delta	host/include/darknet.h	/^    float * state_delta;$/;"	m	struct:layer
state_delta	ta/include/darknet_TA.h	/^    float * state_delta;$/;"	m	struct:layer_TA
state_delta_gpu	host/include/darknet.h	/^    float * state_delta_gpu;$/;"	m	struct:layer
state_gate_layer	host/include/darknet.h	/^    struct layer *state_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_gate_layer	ta/include/darknet_TA.h	/^    struct layer_TA *state_gate_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_gpu	host/include/darknet.h	/^    float * state_gpu;$/;"	m	struct:layer
state_h_layer	host/include/darknet.h	/^    struct layer *state_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_h_layer	ta/include/darknet_TA.h	/^    struct layer_TA *state_h_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_layer	host/include/darknet.h	/^    struct layer *state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_layer	ta/include/darknet_TA.h	/^    struct layer_TA *state_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_r_layer	host/include/darknet.h	/^    struct layer *state_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_r_layer	ta/include/darknet_TA.h	/^    struct layer_TA *state_r_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_save_layer	host/include/darknet.h	/^    struct layer *state_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_save_layer	ta/include/darknet_TA.h	/^    struct layer_TA *state_save_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_state_layer	host/include/darknet.h	/^    struct layer *state_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_state_layer	ta/include/darknet_TA.h	/^    struct layer_TA *state_state_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_t	ta/aes_TA.c	/^typedef uint8_t state_t[4][4];$/;"	t	file:
state_z_layer	host/include/darknet.h	/^    struct layer *state_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_z_layer	ta/include/darknet_TA.h	/^    struct layer_TA *state_z_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
statistics_connected_layer	host/src/connected_layer.c	/^void statistics_connected_layer(layer l)$/;"	f
statistics_net	host/examples/darknet.c	/^void statistics_net(char *cfgfile, char *weightfile)$/;"	f
stb_image_write_test	host/src/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__DNL	host/src/stb_image.h	3084;"	d
stbi__EOI	host/src/stb_image.h	3086;"	d
stbi__SOF	host/src/stb_image.h	3087;"	d
stbi__SOF_progressive	host/src/stb_image.h	3090;"	d
stbi__SOI	host/src/stb_image.h	3085;"	d
stbi__SOS	host/src/stb_image.h	3088;"	d
stbi__YCbCr_to_RGB_row	host/src/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	host/src/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__addsizes_valid	host/src/stb_image.h	/^static int stbi__addsizes_valid(int a, int b)$/;"	f
stbi__at_eof	host/src/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	host/src/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	host/src/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	host/src/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__blinn_8x8	host/src/stb_image.h	/^static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)$/;"	f
stbi__bmask	host/src/stb_image.h	/^static const stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_data	host/src/stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon31
stbi__bmp_info	host/src/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	host/src/stb_image.h	/^static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__bmp_parse_header	host/src/stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f
stbi__bmp_test	host/src/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	host/src/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	host/src/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	host/src/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	host/src/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	host/src/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	host/src/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	host/src/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	host/src/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_transparency16	host/src/stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f
stbi__compute_y	host/src/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__compute_y_16	host/src/stb_image.h	/^static stbi__uint16 stbi__compute_y_16(int r, int g, int b)$/;"	f
stbi__context	host/src/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon18
stbi__convert_16_to_8	host/src/stb_image.h	/^static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)$/;"	f
stbi__convert_8_to_16	host/src/stb_image.h	/^static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)$/;"	f
stbi__convert_format	host/src/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__convert_format16	host/src/stb_image.h	/^static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	host/src/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	host/src/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	host/src/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	host/src/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	host/src/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	host/src/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	host/src/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	host/src/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	host/src/stb_image.h	/^static const stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	host/src/stb_image.h	3211;"	d
stbi__div4	host/src/stb_image.h	3162;"	d
stbi__do_png	host/src/stb_image.h	/^static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)$/;"	f
stbi__do_zlib	host/src/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__end_write_file	host/src/stb_image_write.h	/^static void stbi__end_write_file(stbi__write_context *s)$/;"	f
stbi__err	host/src/stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	host/src/stb_image.h	942;"	d
stbi__err	host/src/stb_image.h	944;"	d
stbi__err	host/src/stb_image.h	946;"	d
stbi__errpf	host/src/stb_image.h	949;"	d
stbi__errpuc	host/src/stb_image.h	950;"	d
stbi__expand_png_palette	host/src/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	host/src/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	host/src/stb_image.h	2163;"	d
stbi__fill_bits	host/src/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__flip_vertically_on_write	host/src/stb_image_write.h	/^int stbi__flip_vertically_on_write=0;$/;"	v
stbi__flip_vertically_on_write	host/src/stb_image_write.h	/^static int stbi__flip_vertically_on_write=0;$/;"	v
stbi__float2fixed	host/src/stb_image.h	3367;"	d
stbi__float2int	host/src/stb_image.h	1634;"	d
stbi__float_postprocess	host/src/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	host/src/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__free_jpeg_components	host/src/stb_image.h	/^static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)$/;"	f
stbi__fsh	host/src/stb_image.h	2164;"	d
stbi__g_failure_reason	host/src/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	host/src/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	host/src/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	host/src/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	host/src/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	host/src/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	host/src/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	host/src/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	host/src/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	host/src/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon34
stbi__gif_header	host/src/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	host/src/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	host/src/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	host/src/stb_image.h	/^static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__gif_load_next	host/src/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stbi_uc *two_back)$/;"	f
stbi__gif_lzw	host/src/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon33
stbi__gif_parse_colortable	host/src/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	host/src/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	host/src/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	host/src/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	host/src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	host/src/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	host/src/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	host/src/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	host/src/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	host/src/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__hdr_test	host/src/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	host/src/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s, const char *signature)$/;"	f
stbi__hdr_to_ldr	host/src/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	host/src/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	host/src/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon22
stbi__idct_block	host/src/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	host/src/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	host/src/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__int16	host/src/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	host/src/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	host/src/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	host/src/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__is_16_main	host/src/stb_image.h	/^static int stbi__is_16_main(stbi__context *s)$/;"	f
stbi__jbias	host/src/stb_image.h	/^static const int stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	host/src/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon23
stbi__jpeg_decode_block	host/src/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	host/src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	host/src/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	host/src/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_dezigzag	host/src/stb_image.h	/^static const stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	host/src/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	host/src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	host/src/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	host/src/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	host/src/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	host/src/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	host/src/stb_image.h	/^static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__jpeg_reset	host/src/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	host/src/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	host/src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	host/src/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	host/src/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_and_postprocess_16bit	host/src/stb_image.h	/^static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_and_postprocess_8bit	host/src/stb_image.h	/^static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_gif_main	host/src/stb_image.h	/^static void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp)$/;"	f
stbi__load_main	host/src/stb_image.h	/^static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__loadf_main	host/src/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__mad2sizes_valid	host/src/stb_image.h	/^static int stbi__mad2sizes_valid(int a, int b, int add)$/;"	f
stbi__mad3sizes_valid	host/src/stb_image.h	/^static int stbi__mad3sizes_valid(int a, int b, int c, int add)$/;"	f
stbi__mad4sizes_valid	host/src/stb_image.h	/^static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)$/;"	f
stbi__malloc	host/src/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__malloc_mad2	host/src/stb_image.h	/^static void *stbi__malloc_mad2(int a, int b, int add)$/;"	f
stbi__malloc_mad3	host/src/stb_image.h	/^static void *stbi__malloc_mad3(int a, int b, int c, int add)$/;"	f
stbi__malloc_mad4	host/src/stb_image.h	/^static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)$/;"	f
stbi__mul2sizes_valid	host/src/stb_image.h	/^static int stbi__mul2sizes_valid(int a, int b)$/;"	f
stbi__out_gif_code	host/src/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	host/src/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	host/src/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	host/src/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	host/src/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncompressed_block	host/src/stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	host/src/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	host/src/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	host/src/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	host/src/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	host/src/stb_image.h	/^static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)$/;"	f
stbi__pic_load_core	host/src/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	host/src/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon32
stbi__pic_test	host/src/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	host/src/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	host/src/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon29
stbi__png_info	host/src/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	host/src/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_is16	host/src/stb_image.h	/^static int stbi__png_is16(stbi__context *s)$/;"	f
stbi__png_load	host/src/stb_image.h	/^static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__png_test	host/src/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	host/src/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon28
stbi__pnm_getinteger	host/src/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	host/src/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	host/src/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	host/src/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	host/src/stb_image.h	/^static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__pnm_skip_whitespace	host/src/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	host/src/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	host/src/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	host/src/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	host/src/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	host/src/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_decode_rle	host/src/stb_image.h	/^static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)$/;"	f
stbi__psd_info	host/src/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_is16	host/src/stb_image.h	/^static int stbi__psd_is16(stbi__context *s)$/;"	f
stbi__psd_load	host/src/stb_image.h	/^static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__psd_test	host/src/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	host/src/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	host/src/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	host/src/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon25
stbi__resample_row_generic	host/src/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	host/src/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	host/src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	host/src/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	host/src/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__result_info	host/src/stb_image.h	/^} stbi__result_info;$/;"	t	typeref:struct:__anon20
stbi__rewind	host/src/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	host/src/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	host/src/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	host/src/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	host/src/stb_image.h	/^static int stbi__sse2_available(void)$/;"	f
stbi__start_callbacks	host/src/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	host/src/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	host/src/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__start_write_callbacks	host/src/stb_image_write.h	/^static void stbi__start_write_callbacks(stbi__write_context *s, stbi_write_func *c, void *context)$/;"	f
stbi__start_write_file	host/src/stb_image_write.h	/^static int stbi__start_write_file(stbi__write_context *s, const char *filename)$/;"	f
stbi__stdio_callbacks	host/src/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	host/src/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	host/src/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	host/src/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__stdio_write	host/src/stb_image_write.h	/^static void stbi__stdio_write(void *context, void *data, int size)$/;"	f
stbi__tga_get_comp	host/src/stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f
stbi__tga_info	host/src/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	host/src/stb_image.h	/^static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__tga_read_rgb16	host/src/stb_image.h	/^static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f
stbi__tga_test	host/src/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	host/src/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	host/src/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	host/src/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	host/src/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	host/src/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertical_flip	host/src/stb_image.h	/^static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)$/;"	f
stbi__vertical_flip_slices	host/src/stb_image.h	/^static void stbi__vertical_flip_slices(void *image, int w, int h, int z, int bytes_per_pixel)$/;"	f
stbi__vertically_flip_on_load	host/src/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__write_context	host/src/stb_image_write.h	/^} stbi__write_context;$/;"	t	typeref:struct:__anon35
stbi__zbuf	host/src/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon27
stbi__zbuild_huffman	host/src/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	host/src/stb_image.h	/^static const stbi_uc stbi__zdefault_distance[32] =$/;"	v
stbi__zdefault_length	host/src/stb_image.h	/^static const stbi_uc stbi__zdefault_length[288] =$/;"	v
stbi__zdist_base	host/src/stb_image.h	/^static const int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	host/src/stb_image.h	/^static const int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	host/src/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	host/src/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	host/src/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon26
stbi__zhuffman_decode	host/src/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	host/src/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	host/src/stb_image.h	/^static const int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	host/src/stb_image.h	/^static const int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	host/src/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	host/src/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_failure_reason	host/src/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_flip_vertically_on_write	host/src/stb_image_write.h	/^STBIWDEF void stbi_flip_vertically_on_write(int flag)$/;"	f
stbi_hdr_to_ldr_gamma	host/src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	host/src/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	host/src/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	host/src/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	host/src/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	host/src/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	host/src/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	host/src/stb_image.h	531;"	d
stbi_inline	host/src/stb_image.h	533;"	d
stbi_inline	host/src/stb_image.h	536;"	d
stbi_io_callbacks	host/src/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon17
stbi_is_16_bit	host/src/stb_image.h	/^STBIDEF int stbi_is_16_bit(char const *filename)$/;"	f
stbi_is_16_bit_from_callbacks	host/src/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)$/;"	f
stbi_is_16_bit_from_file	host/src/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_file(FILE *f)$/;"	f
stbi_is_16_bit_from_memory	host/src/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_is_hdr	host/src/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	host/src/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	host/src/stb_image.h	/^STBIDEF int stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	host/src/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	host/src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	host/src/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	host/src/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16	host/src/stb_image.h	/^STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16_from_callbacks	host/src/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_16_from_memory	host/src/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_from_callbacks	host/src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	host/src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file_16	host/src/stb_image.h	/^STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	host/src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_gif_from_memory	host/src/stb_image.h	/^STBIDEF stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp)$/;"	f
stbi_loadf	host/src/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	host/src/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	host/src/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	host/src/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	host/src/stb_image.h	567;"	d
stbi_lrot	host/src/stb_image.h	569;"	d
stbi_set_flip_vertically_on_load	host/src/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	host/src/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	host/src/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_us	host/src/stb_image.h	/^typedef unsigned short stbi_us;$/;"	t
stbi_write_bmp	host/src/stb_image_write.h	/^STBIWDEF int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_core	host/src/stb_image_write.h	/^static int stbi_write_bmp_core(stbi__write_context *s, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_to_func	host/src/stb_image_write.h	/^STBIWDEF int stbi_write_bmp_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_force_png_filter	host/src/stb_image_write.h	/^int stbi_write_force_png_filter = -1;$/;"	v
stbi_write_force_png_filter	host/src/stb_image_write.h	/^static int stbi_write_force_png_filter = -1;$/;"	v
stbi_write_func	host/src/stb_image_write.h	/^typedef void stbi_write_func(void *context, void *data, int size);$/;"	t
stbi_write_hdr	host/src/stb_image_write.h	/^STBIWDEF int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_hdr_core	host/src/stb_image_write.h	/^static int stbi_write_hdr_core(stbi__write_context *s, int x, int y, int comp, float *data)$/;"	f
stbi_write_hdr_to_func	host/src/stb_image_write.h	/^STBIWDEF int stbi_write_hdr_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const float *data)$/;"	f
stbi_write_jpg	host/src/stb_image_write.h	/^STBIWDEF int stbi_write_jpg(char const *filename, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_jpg_core	host/src/stb_image_write.h	/^static int stbi_write_jpg_core(stbi__write_context *s, int width, int height, int comp, const void* data, int quality) {$/;"	f
stbi_write_jpg_to_func	host/src/stb_image_write.h	/^STBIWDEF int stbi_write_jpg_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_png	host/src/stb_image_write.h	/^STBIWDEF int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_compression_level	host/src/stb_image_write.h	/^int stbi_write_png_compression_level = 8;$/;"	v
stbi_write_png_compression_level	host/src/stb_image_write.h	/^static int stbi_write_png_compression_level = 8;$/;"	v
stbi_write_png_to_func	host/src/stb_image_write.h	/^STBIWDEF int stbi_write_png_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	host/src/stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	host/src/stb_image_write.h	/^STBIWDEF int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_core	host/src/stb_image_write.h	/^static int stbi_write_tga_core(stbi__write_context *s, int x, int y, int comp, void *data)$/;"	f
stbi_write_tga_to_func	host/src/stb_image_write.h	/^STBIWDEF int stbi_write_tga_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_with_rle	host/src/stb_image_write.h	/^int stbi_write_tga_with_rle = 1;$/;"	v
stbi_write_tga_with_rle	host/src/stb_image_write.h	/^static int stbi_write_tga_with_rle = 1;$/;"	v
stbi_zlib_compress	host/src/stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbi_zlib_decode_buffer	host/src/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	host/src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	host/src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	host/src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	host/src/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	host/src/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbiw__ZHASH	host/src/stb_image_write.h	808;"	d
stbiw__crc32	host/src/stb_image_write.h	/^static unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__encode_png_line	host/src/stb_image_write.h	/^static void stbiw__encode_png_line(unsigned char *pixels, int stride_bytes, int width, int height, int y, int n, int filter_type, signed char *line_buffer)$/;"	f
stbiw__jpg_DCT	host/src/stb_image_write.h	/^static void stbiw__jpg_DCT(float *d0p, float *d1p, float *d2p, float *d3p, float *d4p, float *d5p, float *d6p, float *d7p) {$/;"	f
stbiw__jpg_ZigZag	host/src/stb_image_write.h	/^static const unsigned char stbiw__jpg_ZigZag[] = { 0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,$/;"	v
stbiw__jpg_calcBits	host/src/stb_image_write.h	/^static void stbiw__jpg_calcBits(int val, unsigned short bits[2]) {$/;"	f
stbiw__jpg_processDU	host/src/stb_image_write.h	/^static int stbiw__jpg_processDU(stbi__write_context *s, int *bitBuf, int *bitCnt, float *CDU, float *fdtbl, int DC, const unsigned short HTDC[256][2], const unsigned short HTAC[256][2]) {$/;"	f
stbiw__jpg_writeBits	host/src/stb_image_write.h	/^static void stbiw__jpg_writeBits(stbi__write_context *s, int *bitBufP, int *bitCntP, const unsigned short *bs) {$/;"	f
stbiw__linear_to_rgbe	host/src/stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	host/src/stb_image_write.h	553;"	d
stbiw__outfile	host/src/stb_image_write.h	/^static int stbiw__outfile(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
stbiw__paeth	host/src/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__putc	host/src/stb_image_write.h	/^static void stbiw__putc(stbi__write_context *s, unsigned char c)$/;"	f
stbiw__sbcount	host/src/stb_image_write.h	740;"	d
stbiw__sbfree	host/src/stb_image_write.h	741;"	d
stbiw__sbgrow	host/src/stb_image_write.h	737;"	d
stbiw__sbgrowf	host/src/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbm	host/src/stb_image_write.h	732;"	d
stbiw__sbmaybegrow	host/src/stb_image_write.h	736;"	d
stbiw__sbn	host/src/stb_image_write.h	733;"	d
stbiw__sbneedgrow	host/src/stb_image_write.h	735;"	d
stbiw__sbpush	host/src/stb_image_write.h	739;"	d
stbiw__sbraw	host/src/stb_image_write.h	731;"	d
stbiw__wp32	host/src/stb_image_write.h	970;"	d
stbiw__wpcrc	host/src/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	host/src/stb_image_write.h	969;"	d
stbiw__wptag	host/src/stb_image_write.h	971;"	d
stbiw__write3	host/src/stb_image_write.h	/^static void stbiw__write3(stbi__write_context *s, unsigned char a, unsigned char b, unsigned char c)$/;"	f
stbiw__write_dump_data	host/src/stb_image_write.h	/^void stbiw__write_dump_data(stbi__write_context *s, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	host/src/stb_image_write.h	/^void stbiw__write_hdr_scanline(stbi__write_context *s, int width, int ncomp, unsigned char *scratch, float *scanline)$/;"	f
stbiw__write_pixel	host/src/stb_image_write.h	/^static void stbiw__write_pixel(stbi__write_context *s, int rgb_dir, int comp, int write_alpha, int expand_mono, unsigned char *d)$/;"	f
stbiw__write_pixels	host/src/stb_image_write.h	/^static void stbiw__write_pixels(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
stbiw__write_run_data	host/src/stb_image_write.h	/^void stbiw__write_run_data(stbi__write_context *s, int length, unsigned char databyte)$/;"	f
stbiw__writef	host/src/stb_image_write.h	/^static void stbiw__writef(stbi__write_context *s, const char *fmt, ...)$/;"	f
stbiw__writefv	host/src/stb_image_write.h	/^static void stbiw__writefv(stbi__write_context *s, const char *fmt, va_list v)$/;"	f
stbiw__zhash	host/src/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	host/src/stb_image_write.h	797;"	d
stbiw__zlib_bitrev	host/src/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	host/src/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	host/src/stb_image_write.h	796;"	d
stbiw__zlib_flushf	host/src/stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff	host/src/stb_image_write.h	805;"	d
stbiw__zlib_huff1	host/src/stb_image_write.h	801;"	d
stbiw__zlib_huff2	host/src/stb_image_write.h	802;"	d
stbiw__zlib_huff3	host/src/stb_image_write.h	803;"	d
stbiw__zlib_huff4	host/src/stb_image_write.h	804;"	d
stbiw__zlib_huffa	host/src/stb_image_write.h	799;"	d
stbiw__zlib_huffb	host/src/stb_image_write.h	806;"	d
stbiw_uint32	host/src/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
stdin_ready	host/examples/go.c	/^int stdin_ready()$/;"	f
step	host/include/darknet.h	/^    int step;$/;"	m	struct:network
step	host/src/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon34
step	ta/include/darknet_TA.h	/^    int step;$/;"	m	struct:network_TA
steps	host/include/darknet.h	/^    int   *steps;$/;"	m	struct:network
steps	host/include/darknet.h	/^    int steps;$/;"	m	struct:layer
steps	ta/include/darknet_TA.h	/^    int   *steps;$/;"	m	struct:network_TA
steps	ta/include/darknet_TA.h	/^    int steps;$/;"	m	struct:layer_TA
stopbackward	host/include/darknet.h	/^    int stopbackward;$/;"	m	struct:layer
stopbackward	ta/include/darknet_TA.h	/^    int stopbackward;$/;"	m	struct:layer_TA
stride	host/include/darknet.h	/^    int stride;$/;"	m	struct:layer
stride	ta/include/darknet_TA.h	/^    int stride;$/;"	m	struct:layer_TA
string_to_board	host/examples/go.c	/^void string_to_board(char *s, float *board)$/;"	f
string_to_layer_type	host/src/parser.c	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
strip	host/src/utils.c	/^void strip(char *s)$/;"	f
strip_char	host/src/utils.c	/^void strip_char(char *s, char bad)$/;"	f
subdivisions	host/include/darknet.h	/^    int subdivisions;$/;"	m	struct:network
subdivisions	ta/include/darknet_TA.h	/^    int subdivisions;$/;"	m	struct:network_TA
succ_high	host/src/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon23
succ_low	host/src/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon23
suffix	host/src/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon33
suicide_go	host/examples/go.c	/^int suicide_go(float *b, int p, int r, int c)$/;"	f
sum_array	host/src/utils.c	/^float sum_array(float *a, int n)$/;"	f
sum_array_TA	ta/utils_TA.c	/^float sum_array_TA(float *a, int n)$/;"	f
sums	host/include/darknet.h	/^    float ** sums;$/;"	m	struct:layer
sums	ta/include/darknet_TA.h	/^    float ** sums;$/;"	m	struct:layer_TA
swap_binary	host/src/convolutional_layer.c	/^void swap_binary(convolutional_layer *l)$/;"	f
swap_binary_TA	ta/convolutional_layer_TA.c	/^void swap_binary_TA(convolutional_layer_TA *l)$/;"	f
sync_args	host/src/network.c	/^} sync_args;$/;"	t	typeref:struct:__anon38	file:
sync_layer	host/src/network.c	/^void sync_layer(network **nets, int n, int j)$/;"	f
sync_layer_in_thread	host/src/network.c	/^pthread_t sync_layer_in_thread(network **nets, int n, int j)$/;"	f
sync_layer_thread	host/src/network.c	/^void *sync_layer_thread(void *ptr)$/;"	f
sync_nets	host/src/network.c	/^void sync_nets(network **nets, int n, int interval)$/;"	f
sysCount	host/main.c	/^int sysCount = 0;$/;"	v
t	host/include/darknet.h	/^    int *t;$/;"	m	struct:network
t	host/include/darknet.h	/^    int t;$/;"	m	struct:__anon8
t	ta/include/darknet_TA.h	/^    int *t;$/;"	m	struct:network_TA
t	ta/include/darknet_TA.h	/^    int t;$/;"	m	struct:__anon48
t3_aad	ta/aes-gcm-entry.c	/^const unsigned char t3_aad[] = {};$/;"	v
t3_iv	ta/aes-gcm-entry.c	/^const unsigned char t3_iv[] = {$/;"	v
t3_key	ta/aes-gcm-entry.c	/^const unsigned char t3_key[] = {$/;"	v
t3_tag	ta/aes-gcm-entry.c	/^const unsigned char t3_tag[] = {$/;"	v
ta_cos	ta/math_TA.c	/^double ta_cos(double x)$/;"	f
ta_eee	ta/math_TA.c	/^double ta_eee(double x)$/;"	f
ta_exp	ta/math_TA.c	/^double ta_exp(double x)$/;"	f
ta_floor	ta/math_TA.c	/^int ta_floor(double x)$/;"	f
ta_ln	ta/math_TA.c	/^double ta_ln(double x)$/;"	f
ta_log	ta/math_TA.c	/^double ta_log(double a,double N)$/;"	f
ta_max	ta/math_TA.c	/^float ta_max(float a, float b)$/;"	f
ta_net_delta	ta/network_TA.c	/^float *ta_net_delta;$/;"	v
ta_net_input	ta/network_TA.c	/^float *ta_net_input;$/;"	v
ta_net_output	ta/network_TA.c	/^float *ta_net_output;$/;"	v
ta_pow	ta/math_TA.c	/^double ta_pow(double a, int n)$/;"	f
ta_rand	ta/math_TA.c	/^ float ta_rand()$/;"	f
ta_random_number	ta/network_TA.c	/^uint32_t ta_random_number;$/;"	v
ta_sin	ta/math_TA.c	/^double ta_sin(double x)$/;"	f
ta_sqrt	ta/math_TA.c	/^double ta_sqrt(double x)$/;"	f
ta_tag_buffer	ta/network_TA.c	/^uint8_t *ta_tag_buffer;$/;"	v
ta_tan	ta/math_TA.c	/^double ta_tan(double x)$/;"	f
tanh	host/include/darknet.h	/^    int tanh;$/;"	m	struct:layer
tanh	ta/include/darknet_TA.h	/^    int tanh;$/;"	m	struct:layer_TA
tanh_activate	host/src/activations.h	/^static inline float tanh_activate(float x){return (exp(2*x)-1)\/(exp(2*x)+1);}$/;"	f
tanh_activate_TA	ta/include/activations_TA.h	/^static inline float tanh_activate_TA(float x){return (ta_exp(2*x)-1)\/(ta_exp(2*x)+1);}$/;"	f
tanh_gradient	host/src/activations.h	/^static inline float tanh_gradient(float x){return 1-x*x;}$/;"	f
tanh_gradient_TA	ta/include/activations_TA.h	/^static inline float tanh_gradient_TA(float x){return 1-x*x;}$/;"	f
temp2_cpu	host/include/darknet.h	/^    float *temp2_cpu;$/;"	m	struct:layer
temp2_cpu	ta/include/darknet_TA.h	/^    float *temp2_cpu;$/;"	m	struct:layer_TA
temp2_gpu	host/include/darknet.h	/^    float *temp2_gpu;$/;"	m	struct:layer
temp3_cpu	host/include/darknet.h	/^    float *temp3_cpu;$/;"	m	struct:layer
temp3_cpu	ta/include/darknet_TA.h	/^    float *temp3_cpu;$/;"	m	struct:layer_TA
temp3_gpu	host/include/darknet.h	/^    float *temp3_gpu;$/;"	m	struct:layer
temp_cpu	host/include/darknet.h	/^    float *temp_cpu;$/;"	m	struct:layer
temp_cpu	ta/include/darknet_TA.h	/^    float *temp_cpu;$/;"	m	struct:layer_TA
temp_gpu	host/include/darknet.h	/^    float *temp_gpu;$/;"	m	struct:layer
temperature	host/include/darknet.h	/^    float temperature;$/;"	m	struct:layer
temperature	ta/include/darknet_TA.h	/^    float temperature;$/;"	m	struct:layer_TA
terminate_tee_session	host/main.c	/^void terminate_tee_session()$/;"	f
test_box	host/src/box.c	/^void test_box()$/;"	f
test_captcha	host/examples/captcha.c	/^void test_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_char_rnn	host/examples/rnn.c	/^void test_char_rnn(char *cfgfile, char *weightfile, int num, char *seed, float temp, int rseed, char *token_file)$/;"	f
test_cifar	host/examples/cifar.c	/^void test_cifar(char *filename, char *weightfile)$/;"	f
test_cifar_csv	host/examples/cifar.c	/^void test_cifar_csv(char *filename, char *weightfile)$/;"	f
test_cifar_csvtrain	host/examples/cifar.c	/^void test_cifar_csvtrain(char *cfg, char *weights)$/;"	f
test_cifar_multi	host/examples/cifar.c	/^void test_cifar_multi(char *filename, char *weightfile)$/;"	f
test_classifier	host/examples/classifier.c	/^void test_classifier(char *datacfg, char *cfgfile, char *weightfile, int target_layer)$/;"	f
test_coco	host/examples/coco.c	/^void test_coco(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
test_dcgan	host/examples/lsd.c	/^void test_dcgan(char *cfgfile, char *weightfile)$/;"	f
test_detector	host/examples/detector.c	/^void test_detector(char *datacfg, char *cfgfile, char *weightfile, char *filename, float thresh, float hier_thresh, char *outfile, int fullscreen)$/;"	f
test_dintersect	host/src/box.c	/^void test_dintersect()$/;"	f
test_dunion	host/src/box.c	/^void test_dunion()$/;"	f
test_go	host/examples/go.c	/^void test_go(char *cfg, char *weights, int multi)$/;"	f
test_gpu_accuracy	host/src/gemm.c	/^void test_gpu_accuracy(int TA, int TB, int m, int k, int n)$/;"	f
test_gpu_blas	host/src/gemm.c	/^int test_gpu_blas()$/;"	f
test_lsd	host/examples/lsd.c	/^void test_lsd(char *cfg, char *weights, char *filename, int gray)$/;"	f
test_resize	host/src/image.c	/^void test_resize(char *filename)$/;"	f
test_super	host/examples/super.c	/^void test_super(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_tactic_rnn	host/examples/rnn.c	/^void test_tactic_rnn(char *cfgfile, char *weightfile, int num, float temp, int rseed, char *token_file)$/;"	f
test_tactic_rnn_multi	host/examples/rnn.c	/^void test_tactic_rnn_multi(char *cfgfile, char *weightfile, int num, float temp, int rseed, char *token_file)$/;"	f
test_tag	host/examples/tag.c	/^void test_tag(char *cfgfile, char *weightfile, char *filename)$/;"	f
test_yolo	host/examples/yolo.c	/^void test_yolo(char *cfgfile, char *weightfile, char *filename, float thresh)$/;"	f
threads	host/include/darknet.h	/^    int threads;$/;"	m	struct:load_args
threat_classifier	host/examples/classifier.c	/^void threat_classifier(char *datacfg, char *cfgfile, char *weightfile, int cam_index, const char *filename)$/;"	f
three_way_max	host/src/image.c	/^float three_way_max(float a, float b, float c)$/;"	f
three_way_min	host/src/image.c	/^float three_way_min(float a, float b, float c)$/;"	f
thresh	host/include/darknet.h	/^    float thresh;$/;"	m	struct:layer
thresh	ta/include/darknet_TA.h	/^    float thresh;$/;"	m	struct:layer_TA
threshold_image	host/src/image.c	/^image threshold_image(image im, float thresh)$/;"	f
tile_data	host/src/data.c	/^data *tile_data(data orig, int divs, int size)$/;"	f
tile_images	host/src/image.c	/^image tile_images(image a, image b, int dx)$/;"	f
time_gpu	host/src/gemm.c	/^void time_gpu(int TA, int TB, int m, int k, int n)$/;"	f
time_gpu_random_matrix	host/src/gemm.c	/^void time_gpu_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_random_matrix	host/src/gemm.c	/^void time_random_matrix(int TA, int TB, int m, int k, int n)$/;"	f
time_steps	host/include/darknet.h	/^    int time_steps;$/;"	m	struct:network
time_steps	host/src/parser.c	/^    int time_steps;$/;"	m	struct:size_params	file:
time_steps	ta/include/darknet_TA.h	/^    int time_steps;$/;"	m	struct:network_TA
tisnan	host/src/region_layer.c	/^float tisnan(float x)$/;"	f
todo	host/src/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon23
top	host/include/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon15
top_k	host/src/utils.c	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_predictions	host/src/network.c	/^void top_predictions(network *net, int k, int *index)$/;"	f
total	host/include/darknet.h	/^    int total;$/;"	m	struct:layer
total	ta/include/darknet_TA.h	/^    int total;$/;"	m	struct:layer_TA
total_count	host/examples/go.c	/^    int total_count;$/;"	m	struct:mcts_tree	file:
tq	host/src/stb_image.h	/^      int tq;$/;"	m	struct:__anon23::__anon24
train	host/include/darknet.h	/^    int train;$/;"	m	struct:network
train	ta/include/darknet_TA.h	/^    int train;$/;"	m	struct:network_TA
train_args	host/src/network.c	/^} train_args;$/;"	t	typeref:struct:__anon37	file:
train_captcha	host/examples/captcha.c	/^void train_captcha(char *cfgfile, char *weightfile)$/;"	f
train_char_rnn	host/examples/rnn.c	/^void train_char_rnn(char *cfgfile, char *weightfile, char *filename, int clear, int tokenized)$/;"	f
train_cifar	host/examples/cifar.c	/^void train_cifar(char *cfgfile, char *weightfile)$/;"	f
train_cifar_distill	host/examples/cifar.c	/^void train_cifar_distill(char *cfgfile, char *weightfile)$/;"	f
train_classifier	host/examples/classifier.c	/^void train_classifier(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)$/;"	f
train_coco	host/examples/coco.c	/^void train_coco(char *cfgfile, char *weightfile)$/;"	f
train_colorizer	host/examples/lsd.c	/^void train_colorizer(char *cfg, char *weight, char *acfg, char *aweight, int clear, int display)$/;"	f
train_dcgan	host/examples/lsd.c	/^void train_dcgan(char *cfg, char *weight, char *acfg, char *aweight, int clear, int display, char *train_images, int maxbatch)$/;"	f
train_detector	host/examples/detector.c	/^void train_detector(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)$/;"	f
train_go	host/examples/go.c	/^void train_go(char *cfgfile, char *weightfile, char *filename, int *gpus, int ngpus, int clear)$/;"	f
train_isegmenter	host/examples/instance-segmenter.c	/^void train_isegmenter(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int display)$/;"	f
train_network	host/src/network.c	/^float train_network(network *net, data d)$/;"	f
train_network_datum	host/src/network.c	/^float train_network_datum(network *net)$/;"	f
train_network_in_thread	host/src/network.c	/^pthread_t train_network_in_thread(network *net, data d, float *err)$/;"	f
train_network_sgd	host/src/network.c	/^float train_network_sgd(network *net, data d, int n)$/;"	f
train_networks	host/src/network.c	/^float train_networks(network **nets, int n, data d, int interval)$/;"	f
train_prog	host/examples/lsd.c	/^void train_prog(char *cfg, char *weight, char *acfg, char *aweight, int clear, int display, char *train_images, int maxbatch)$/;"	f
train_regressor	host/examples/regressor.c	/^void train_regressor(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear)$/;"	f
train_segmenter	host/examples/segmenter.c	/^void train_segmenter(char *datacfg, char *cfgfile, char *weightfile, int *gpus, int ngpus, int clear, int display)$/;"	f
train_super	host/examples/super.c	/^void train_super(char *cfgfile, char *weightfile, int clear)$/;"	f
train_tag	host/examples/tag.c	/^void train_tag(char *cfgfile, char *weightfile, int clear)$/;"	f
train_thread	host/src/network.c	/^void *train_thread(void *ptr)$/;"	f
train_yolo	host/examples/yolo.c	/^void train_yolo(char *cfgfile, char *weightfile)$/;"	f
transfer_weights_CA	host/main.c	/^void transfer_weights_CA(float *vec, int length, int layer_i, char type, int additional)$/;"	f
transfer_weights_TA_params	ta/darknetp_ta.c	/^static TEE_Result transfer_weights_TA_params(uint32_t param_types,$/;"	f	file:
translate_array	host/src/utils.c	/^void translate_array(float *a, int n, float s)$/;"	f
translate_data_rows	host/src/data.c	/^void translate_data_rows(data d, float s)$/;"	f
translate_image	host/src/image.c	/^void translate_image(image m, float s)$/;"	f
translate_image_channel	host/src/image.c	/^void translate_image_channel(image im, int c, float v)$/;"	f
transparent	host/src/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon34
transpose_image	host/src/image.c	/^void transpose_image(image im)$/;"	f
transpose_matrix	host/src/parser.c	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
transpose_matrix_TA	ta/parser_TA.c	/^void transpose_matrix_TA(float *a, int rows, int cols)$/;"	f
tree	host/include/darknet.h	/^} tree;$/;"	t	typeref:struct:__anon2
tree_TA	ta/include/darknet_TA.h	/^} tree_TA;$/;"	t	typeref:struct:__anon44
truth	host/include/darknet.h	/^    float *truth;$/;"	m	struct:network
truth	host/include/darknet.h	/^    int truth;$/;"	m	struct:layer
truth	ta/include/darknet_TA.h	/^    float *truth;$/;"	m	struct:network_TA
truth	ta/include/darknet_TA.h	/^    int truth;$/;"	m	struct:layer_TA
truth_gpu	host/include/darknet.h	/^    float *truth_gpu;$/;"	m	struct:network
truth_thresh	host/include/darknet.h	/^    float truth_thresh;$/;"	m	struct:layer
truth_thresh	ta/include/darknet_TA.h	/^    float truth_thresh;$/;"	m	struct:layer_TA
truths	host/include/darknet.h	/^    int truths;$/;"	m	struct:layer
truths	host/include/darknet.h	/^    int truths;$/;"	m	struct:network
truths	ta/include/darknet_TA.h	/^    int truths;$/;"	m	struct:layer_TA
truths	ta/include/darknet_TA.h	/^    int truths;$/;"	m	struct:network_TA
try_classifier	host/examples/classifier.c	/^void try_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, int layer_num)$/;"	f
type	host/include/darknet.h	/^    LAYER_TYPE type;$/;"	m	struct:layer
type	host/include/darknet.h	/^    data_type type;$/;"	m	struct:load_args
type	host/src/parser.c	/^    char *type;$/;"	m	struct:__anon40	file:
type	host/src/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon28
type	host/src/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon32
type	ta/include/darknet_TA.h	/^    LAYER_TYPE_TA type;$/;"	m	struct:layer_TA
uf	host/include/darknet.h	/^    struct layer *uf;$/;"	m	struct:layer	typeref:struct:layer::layer
uf	ta/include/darknet_TA.h	/^    struct layer_TA *uf;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
ug	host/include/darknet.h	/^    struct layer *ug;$/;"	m	struct:layer	typeref:struct:layer::layer
ug	ta/include/darknet_TA.h	/^    struct layer_TA *ug;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
uh	host/include/darknet.h	/^    struct layer *uh;$/;"	m	struct:layer	typeref:struct:layer::layer
uh	ta/include/darknet_TA.h	/^    struct layer_TA *uh;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
ui	host/include/darknet.h	/^    struct layer *ui;$/;"	m	struct:layer	typeref:struct:layer::layer
ui	ta/include/darknet_TA.h	/^    struct layer_TA *ui;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
uo	host/include/darknet.h	/^    struct layer *uo;$/;"	m	struct:layer	typeref:struct:layer::layer
uo	ta/include/darknet_TA.h	/^    struct layer_TA *uo;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
update	host/include/darknet.h	/^    void (*update)    (struct layer, update_args);$/;"	m	struct:layer
update_TA	host/include/darknet.h	/^    void (*update_TA)    (struct layer, update_args);$/;"	m	struct:layer
update_TA	ta/include/darknet_TA.h	/^    void (*update_TA)    (struct layer_TA, update_args_TA);$/;"	m	struct:layer_TA
update_args	host/include/darknet.h	/^} update_args;$/;"	t	typeref:struct:__anon8
update_args_TA	ta/include/darknet_TA.h	/^} update_args_TA;$/;"	t	typeref:struct:__anon48
update_connected_layer	host/src/connected_layer.c	/^void update_connected_layer(layer l, update_args a)$/;"	f
update_connected_layer_TA_new	ta/connected_layer_TA.c	/^void update_connected_layer_TA_new(layer_TA l, update_args_TA a)$/;"	f
update_connected_layer_gpu	host/src/connected_layer.c	/^void update_connected_layer_gpu(layer l, update_args a)$/;"	f
update_convolutional_layer	host/src/convolutional_layer.c	/^void update_convolutional_layer(convolutional_layer l, update_args a)$/;"	f
update_convolutional_layer_TA_new	ta/convolutional_layer_TA.c	/^void update_convolutional_layer_TA_new(convolutional_layer_TA l, update_args_TA a)$/;"	f
update_crnn_layer	host/src/crnn_layer.c	/^void update_crnn_layer(layer l, update_args a)$/;"	f
update_crnn_layer_gpu	host/src/crnn_layer.c	/^void update_crnn_layer_gpu(layer l, update_args a)$/;"	f
update_deconvolutional_layer	host/src/deconvolutional_layer.c	/^void update_deconvolutional_layer(layer l, update_args a)$/;"	f
update_gpu	host/include/darknet.h	/^    void (*update_gpu)    (struct layer, update_args);$/;"	m	struct:layer
update_gru_layer	host/src/gru_layer.c	/^void update_gru_layer(layer l, update_args a)$/;"	f
update_gru_layer_gpu	host/src/gru_layer.c	/^void update_gru_layer_gpu(layer l, update_args a)$/;"	f
update_layer	host/include/darknet.h	/^    struct layer *update_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
update_layer	ta/include/darknet_TA.h	/^    struct layer_TA *update_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
update_local_layer	host/src/local_layer.c	/^void update_local_layer(local_layer l, update_args a)$/;"	f
update_local_layer_gpu	host/src/local_layer.c	/^void update_local_layer_gpu(local_layer l, update_args a)$/;"	f
update_lstm_layer	host/src/lstm_layer.c	/^void update_lstm_layer(layer l, update_args a)$/;"	f
update_lstm_layer_gpu	host/src/lstm_layer.c	/^void update_lstm_layer_gpu(layer l, update_args a)$/;"	f
update_net_agrv_CA	host/main.c	/^void update_net_agrv_CA(int cond, int workspace_size, float *workspace)$/;"	f
update_net_agrv_TA_params	ta/darknetp_ta.c	/^static TEE_Result update_net_agrv_TA_params(uint32_t param_types,$/;"	f	file:
update_network	host/src/network.c	/^void update_network(network *netp)$/;"	f
update_network_CA	host/main.c	/^void update_network_CA(update_args a)$/;"	f
update_network_TA	ta/network_TA.c	/^void update_network_TA(update_args_TA a)$/;"	f
update_network_TA_params	ta/darknetp_ta.c	/^static TEE_Result update_network_TA_params(uint32_t param_types,$/;"	f	file:
update_network_gpu	host/src/network.c	/^void update_network_gpu(network *netp)$/;"	f
update_rnn_layer	host/src/rnn_layer.c	/^void update_rnn_layer(layer l, update_args a)$/;"	f
update_rnn_layer_gpu	host/src/rnn_layer.c	/^void update_rnn_layer_gpu(layer l, update_args a)$/;"	f
upsample_cpu	host/src/blas.c	/^void upsample_cpu(float *in, int w, int h, int c, int batch, int stride, int forward, float scale, float *out)$/;"	f
ur	host/include/darknet.h	/^    struct layer *ur;$/;"	m	struct:layer	typeref:struct:layer::layer
ur	ta/include/darknet_TA.h	/^    struct layer_TA *ur;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
used	host/src/option_list.h	/^    int used;$/;"	m	struct:__anon39
uz	host/include/darknet.h	/^    struct layer *uz;$/;"	m	struct:layer	typeref:struct:layer::layer
uz	ta/include/darknet_TA.h	/^    struct layer_TA *uz;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
v	host/include/darknet.h	/^    float * v;$/;"	m	struct:layer
v	host/src/stb_image.h	/^      int h,v;$/;"	m	struct:__anon23::__anon24
v	ta/include/darknet_TA.h	/^    float * v;$/;"	m	struct:layer_TA
v_gpu	host/include/darknet.h	/^    float *v_gpu;$/;"	m	struct:layer
val	host/include/darknet.h	/^    void *val;$/;"	m	struct:node
val	host/src/option_list.h	/^    char *val;$/;"	m	struct:__anon39
valid_captcha	host/examples/captcha.c	/^void valid_captcha(char *cfgfile, char *weightfile, char *filename)$/;"	f
valid_char_rnn	host/examples/rnn.c	/^void valid_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
valid_go	host/examples/go.c	/^void valid_go(char *cfgfile, char *weightfile, int multi, char *filename)$/;"	f
valid_tactic_rnn	host/examples/rnn.c	/^void valid_tactic_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
validate_classifier_10	host/examples/classifier.c	/^void validate_classifier_10(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_crop	host/examples/classifier.c	/^void validate_classifier_crop(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_full	host/examples/classifier.c	/^void validate_classifier_full(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_classifier_multi	host/examples/classifier.c	/^void validate_classifier_multi(char *datacfg, char *cfg, char *weights)$/;"	f
validate_classifier_single	host/examples/classifier.c	/^void validate_classifier_single(char *datacfg, char *filename, char *weightfile)$/;"	f
validate_coco	host/examples/coco.c	/^void validate_coco(char *cfg, char *weights)$/;"	f
validate_coco_recall	host/examples/coco.c	/^void validate_coco_recall(char *cfgfile, char *weightfile)$/;"	f
validate_detector	host/examples/detector.c	/^void validate_detector(char *datacfg, char *cfgfile, char *weightfile, char *outfile)$/;"	f
validate_detector_flip	host/examples/detector.c	/^void validate_detector_flip(char *datacfg, char *cfgfile, char *weightfile, char *outfile)$/;"	f
validate_detector_recall	host/examples/detector.c	/^void validate_detector_recall(char *cfgfile, char *weightfile)$/;"	f
validate_uint32	host/src/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
validate_yolo	host/examples/yolo.c	/^void validate_yolo(char *cfg, char *weights)$/;"	f
validate_yolo_recall	host/examples/yolo.c	/^void validate_yolo_recall(char *cfg, char *weights)$/;"	f
vals	host/include/darknet.h	/^    float **vals;$/;"	m	struct:matrix
value	host/examples/go.c	/^    float *value;$/;"	m	struct:mcts_tree	file:
value	host/examples/go.c	/^    float value;$/;"	m	struct:__anon42	file:
value	host/src/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon26
values	host/src/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon22
variance	host/include/darknet.h	/^    float * variance;$/;"	m	struct:layer
variance	ta/include/darknet_TA.h	/^    float * variance;$/;"	m	struct:layer_TA
variance_array	host/src/utils.c	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	host/src/blas.c	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_cpu_TA	ta/blas_TA.c	/^void variance_cpu_TA(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta	host/include/darknet.h	/^    float * variance_delta;$/;"	m	struct:layer
variance_delta	ta/include/darknet_TA.h	/^    float * variance_delta;$/;"	m	struct:layer_TA
variance_delta_cpu	host/src/batchnorm_layer.c	/^void  variance_delta_cpu(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
variance_delta_cpu_TA	ta/batchnorm_layer_TA.c	/^void  variance_delta_cpu_TA(float *x, float *delta, float *mean, float *variance, int batch, int filters, int spatial, float *variance_delta)$/;"	f
variance_delta_gpu	host/include/darknet.h	/^    float * variance_delta_gpu;$/;"	m	struct:layer
variance_gpu	host/include/darknet.h	/^    float * variance_gpu;$/;"	m	struct:layer
vec_char_rnn	host/examples/rnn.c	/^void vec_char_rnn(char *cfgfile, char *weightfile, char *seed)$/;"	f
verify_attestation_token	host/main.c	/^int verify_attestation_token(char *attestation_buffer, int token_size)$/;"	f
verify_sgx_attestation_token	ta/darknetp_ta.c	/^static TEE_Result verify_sgx_attestation_token(uint32_t param_types,$/;"	f	file:
visit_count	host/examples/go.c	/^    int *visit_count;$/;"	m	struct:mcts_tree	file:
visualize	host/examples/darknet.c	/^void visualize(char *cfgfile, char *weightfile)$/;"	f
visualize_convolutional_layer	host/src/convolutional_layer.c	/^image *visualize_convolutional_layer(convolutional_layer l, char *window, image *prev_weights)$/;"	f
visualize_network	host/src/network.c	/^void visualize_network(network *net)$/;"	f
voc_names	host/examples/yolo.c	/^char *voc_names[] = {"aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"};$/;"	v
vs	host/src/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon25
w	host/include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon12
w	host/include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon15
w	host/include/darknet.h	/^    int h, w, c;$/;"	m	struct:network
w	host/include/darknet.h	/^    int h,w,c;$/;"	m	struct:layer
w	host/include/darknet.h	/^    int w, h;$/;"	m	struct:__anon13
w	host/include/darknet.h	/^    int w;$/;"	m	struct:__anon10
w	host/include/darknet.h	/^    int w;$/;"	m	struct:__anon11
w	host/include/darknet.h	/^    int w;$/;"	m	struct:load_args
w	host/src/parser.c	/^    int w;$/;"	m	struct:size_params	file:
w	host/src/stb_image.h	/^   int w,h;$/;"	m	struct:__anon34
w	ta/include/darknet_TA.h	/^    int h, w, c;$/;"	m	struct:network_TA
w	ta/include/darknet_TA.h	/^    int h,w,c;$/;"	m	struct:layer_TA
w2	host/src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon23::__anon24
w_lores	host/src/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon25
weightDesc	host/include/darknet.h	/^    cudnnFilterDescriptor_t weightDesc;$/;"	m	struct:layer
weight_change_gpu	host/include/darknet.h	/^    float * weight_change_gpu;$/;"	m	struct:layer
weight_updates	host/include/darknet.h	/^    float * weight_updates;$/;"	m	struct:layer
weight_updates	ta/include/darknet_TA.h	/^    float * weight_updates;$/;"	m	struct:layer_TA
weight_updates_gpu	host/include/darknet.h	/^    float * weight_updates_gpu;$/;"	m	struct:layer
weighted_delta_cpu	host/src/blas.c	/^void weighted_delta_cpu(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)$/;"	f
weighted_sum_cpu	host/src/blas.c	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
weights	host/include/darknet.h	/^    float * weights;$/;"	m	struct:layer
weights	ta/include/darknet_TA.h	/^    float * weights;$/;"	m	struct:layer_TA
weights_gpu	host/include/darknet.h	/^    float * weights_gpu;$/;"	m	struct:layer
wf	host/include/darknet.h	/^    struct layer *wf;$/;"	m	struct:layer	typeref:struct:layer::layer
wf	ta/include/darknet_TA.h	/^    struct layer_TA *wf;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
wg	host/include/darknet.h	/^    struct layer *wg;$/;"	m	struct:layer	typeref:struct:layer::layer
wg	ta/include/darknet_TA.h	/^    struct layer_TA *wg;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
wh	host/include/darknet.h	/^    struct layer *wh;$/;"	m	struct:layer	typeref:struct:layer::layer
wh	ta/include/darknet_TA.h	/^    struct layer_TA *wh;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
what_time_is_it_now	host/src/utils.c	/^double what_time_is_it_now()$/;"	f
wi	host/include/darknet.h	/^    struct layer *wi;$/;"	m	struct:layer	typeref:struct:layer::layer
wi	ta/include/darknet_TA.h	/^    struct layer_TA *wi;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
windows	host/src/image.c	/^int windows = 0;$/;"	v
wo	host/include/darknet.h	/^    struct layer *wo;$/;"	m	struct:layer	typeref:struct:layer::layer
wo	ta/include/darknet_TA.h	/^    struct layer_TA *wo;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
workspace	host/include/darknet.h	/^    float *workspace;$/;"	m	struct:network
workspace	ta/include/darknet_TA.h	/^    float *workspace;$/;"	m	struct:network_TA
workspaceBOO	host/src/network.c	/^int workspaceBOO(network net)$/;"	f
workspaceSM	host/main.c	/^TEEC_SharedMemory workspaceSM;$/;"	v
workspace_size	host/include/darknet.h	/^    size_t workspace_size;$/;"	m	struct:layer
workspace_size	ta/include/darknet_TA.h	/^    size_t workspace_size;$/;"	m	struct:layer_TA
wr	host/include/darknet.h	/^    struct layer *wr;$/;"	m	struct:layer	typeref:struct:layer::layer
wr	ta/include/darknet_TA.h	/^    struct layer_TA *wr;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
write_all	host/src/utils.c	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	host/src/utils.c	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_int	host/src/utils.c	/^void write_int(int fd, int n)$/;"	f
wssize	host/src/network.c	/^int wssize = -1;$/;"	v
wz	host/include/darknet.h	/^    struct layer *wz;$/;"	m	struct:layer	typeref:struct:layer::layer
wz	ta/include/darknet_TA.h	/^    struct layer_TA *wz;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
x	host/examples/rnn.c	/^    float *x;$/;"	m	struct:__anon43	file:
x	host/include/darknet.h	/^    float * x;$/;"	m	struct:layer
x	host/include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon12
x	host/include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon15
x	host/src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon23::__anon24
x	ta/include/darknet_TA.h	/^    float * x;$/;"	m	struct:layer_TA
x_gpu	host/include/darknet.h	/^    float * x_gpu;$/;"	m	struct:layer
x_norm	host/include/darknet.h	/^    float * x_norm;$/;"	m	struct:layer
x_norm	ta/include/darknet_TA.h	/^    float * x_norm;$/;"	m	struct:layer_TA
x_norm_gpu	host/include/darknet.h	/^    float * x_norm_gpu;$/;"	m	struct:layer
xnor	host/include/darknet.h	/^    int xnor;$/;"	m	struct:layer
xnor	ta/include/darknet_TA.h	/^    int xnor;$/;"	m	struct:layer_TA
xor_block	ta/aes-gcm.c	/^static void xor_block(aes_uchar *dst, const aes_uchar *src)$/;"	f	file:
xtime	ta/aes_TA.c	/^static uint8_t xtime(uint8_t x)$/;"	f	file:
y	host/examples/rnn.c	/^    float *y;$/;"	m	struct:__anon43	file:
y	host/include/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon12
y	host/include/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon15
y	host/include/darknet.h	/^    matrix y;$/;"	m	struct:__anon13
y	host/src/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon23::__anon24
yolo_num_detections	host/src/yolo_layer.c	/^int yolo_num_detections(layer l, float thresh)$/;"	f
ypos	host/src/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon25
ystep	host/src/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon25
yuv_to_rgb	host/src/image.c	/^void yuv_to_rgb(image im)$/;"	f
z_cpu	host/include/darknet.h	/^    float *z_cpu;$/;"	m	struct:layer
z_cpu	ta/include/darknet_TA.h	/^    float *z_cpu;$/;"	m	struct:layer_TA
z_distance	host/src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon27
z_expandable	host/src/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon27
z_gpu	host/include/darknet.h	/^    float *z_gpu;$/;"	m	struct:layer
z_length	host/src/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon27
zbuffer	host/src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon27
zbuffer_end	host/src/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon27
zero_objectness	host/src/region_layer.c	/^void zero_objectness(layer l)$/;"	f
zout	host/src/stb_image.h	/^   char *zout;$/;"	m	struct:__anon27
zout_end	host/src/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon27
zout_start	host/src/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon27
