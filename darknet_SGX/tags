!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVATION	App/darknet.h	/^} ACTIVATION;$/;"	t	typeref:enum:__anon11
ACTIVATIONS_H	App/activations.h	2;"	d
ACTIVATIONS_TA_H	Enclave/activations_TA.h	2;"	d
ACTIVATION_TA	Enclave/darknet_TA.h	/^} ACTIVATION_TA;$/;"	t	typeref:enum:__anon2
ACTIVE	App/darknet.h	/^    ACTIVE,$/;"	e	enum:__anon14
ACTIVE_TA	Enclave/darknet_TA.h	/^    ACTIVE_TA,$/;"	e	enum:__anon3
ADD	App/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon13
ADD_ASSIGN_OVERFLOW	Enclave/Enclave_t.c	25;"	d	file:
AES128	Enclave/aes_TA.h	26;"	d
AES_BLOCKLEN	Enclave/aes_TA.h	30;"	d
AES_BLOCK_SIZE	Enclave/aes.h	18;"	d
AES_CBC_decrypt_buffer	Enclave/aes_TA.cpp	/^void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)$/;"	f
AES_CBC_encrypt_buffer	Enclave/aes_TA.cpp	/^void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, uint32_t length)$/;"	f
AES_COMMON_H	Enclave/aes-common.h	14;"	d
AES_CTR_xcrypt_buffer	Enclave/aes_TA.cpp	/^void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, uint32_t length)$/;"	f
AES_DEBUG	Enclave/aes-gcm-entry.cpp	5;"	d	file:
AES_ECB_decrypt	Enclave/aes_TA.cpp	/^void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)$/;"	f
AES_ECB_encrypt	Enclave/aes_TA.cpp	/^void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)$/;"	f
AES_FULL_UNROLL	Enclave/aes.h	16;"	d
AES_GET_BE16	Enclave/aes-common.h	/^static inline aes_ushort AES_GET_BE16(const aes_uchar *a)$/;"	f
AES_GET_BE24	Enclave/aes-common.h	/^static inline aes_uint AES_GET_BE24(const aes_uchar *a)$/;"	f
AES_GET_BE32	Enclave/aes-common.h	/^static inline aes_uint AES_GET_BE32(const aes_uchar *a)$/;"	f
AES_GET_BE64	Enclave/aes-common.h	/^static inline aes_ulong AES_GET_BE64(const aes_uchar *a)$/;"	f
AES_GET_LE16	Enclave/aes-common.h	/^static inline aes_ushort AES_GET_LE16(const aes_uchar *a)$/;"	f
AES_GET_LE32	Enclave/aes-common.h	/^static inline aes_uint AES_GET_LE32(const aes_uchar *a)$/;"	f
AES_GET_LE64	Enclave/aes-common.h	/^static inline aes_ulong AES_GET_LE64(const aes_uchar *a)$/;"	f
AES_H	Enclave/aes.h	10;"	d
AES_INTERNAL_H	Enclave/aes-internal.h	10;"	d
AES_KEYLEN	Enclave/aes_TA.h	33;"	d
AES_KEYLEN	Enclave/aes_TA.h	36;"	d
AES_KEYLEN	Enclave/aes_TA.h	39;"	d
AES_PRIV_NR_POS	Enclave/aes-internal.h	114;"	d
AES_PRIV_SIZE	Enclave/aes-internal.h	113;"	d
AES_PUT_BE16	Enclave/aes-common.h	/^static inline void AES_PUT_BE16(aes_uchar *a, aes_ushort val)$/;"	f
AES_PUT_BE24	Enclave/aes-common.h	/^static inline void AES_PUT_BE24(aes_uchar *a, aes_uint val)$/;"	f
AES_PUT_BE32	Enclave/aes-common.h	/^static inline void AES_PUT_BE32(aes_uchar *a, aes_uint val)$/;"	f
AES_PUT_BE64	Enclave/aes-common.h	/^static inline void AES_PUT_BE64(aes_uchar *a, aes_ulong val)$/;"	f
AES_PUT_LE16	Enclave/aes-common.h	/^static inline void AES_PUT_LE16(aes_uchar *a, aes_ushort val)$/;"	f
AES_PUT_LE32	Enclave/aes-common.h	/^static inline void AES_PUT_LE32(aes_uchar *a, aes_uint val)$/;"	f
AES_PUT_LE64	Enclave/aes-common.h	/^static inline void AES_PUT_LE64(aes_uchar *a, aes_ulong val)$/;"	f
AES_SMALL_TABLES	Enclave/aes.h	17;"	d
AES_WARN_UNUSED_RESULT	Enclave/aes-common.h	253;"	d
AES_WARN_UNUSED_RESULT	Enclave/aes-common.h	255;"	d
AES_ctx	Enclave/aes_TA.h	/^struct AES_ctx$/;"	s
AES_ctx_set_iv	Enclave/aes_TA.cpp	/^void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv)$/;"	f
AES_init_ctx	Enclave/aes_TA.cpp	/^void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)$/;"	f
AES_init_ctx_iv	Enclave/aes_TA.cpp	/^void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)$/;"	f
AES_keyExpSize	Enclave/aes_TA.h	34;"	d
AES_keyExpSize	Enclave/aes_TA.h	37;"	d
AES_keyExpSize	Enclave/aes_TA.h	40;"	d
AVGPOOL	App/darknet.h	/^    AVGPOOL,$/;"	e	enum:__anon14
AVGPOOL_LAYER_H	App/avgpool_layer.h	2;"	d
AVGPOOL_TA	Enclave/darknet_TA.h	/^    AVGPOOL_TA,$/;"	e	enum:__anon3
AddRoundKey	Enclave/aes_TA.cpp	/^static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)$/;"	f	file:
App_C_Flags	Makefile	/^App_C_Flags := $(SGX_COMMON_CFLAGS) -fPIC -Wno-attributes $(App_Include_Paths)$/;"	m
App_Cpp_Files	Makefile	/^App_Cpp_Files := App\/App.cpp App\/activations.cpp App\/blas.cpp App\/data.cpp App\/image.cpp App\/list.cpp App\/matrix.cpp App\/network.cpp App\/option_list.cpp App\/parser.cpp App\/tree.cpp App\/utils.cpp App\/socket_client.cpp App\/socket_server.cpp $/;"	m
App_Cpp_Flags	Makefile	/^App_Cpp_Flags := $(App_C_Flags) -std=c++11$/;"	m
App_Cpp_Objects	Makefile	/^App_Cpp_Objects := $(App_Cpp_Files:.cpp=.o)$/;"	m
App_Include_Paths	Makefile	/^App_Include_Paths := -IInclude -IApp -I$(SGX_SDK)\/include$/;"	m
App_Link_Flags	Makefile	/^App_Link_Flags := $(SGX_COMMON_CFLAGS) -L$(SGX_LIBRARY_PATH) -l$(Urts_Library_Name) -lpthread$/;"	m
App_Name	Makefile	/^App_Name := app$/;"	m
B1	App/darknet.h	/^    float B1;$/;"	m	struct:__anon16
B1	App/darknet.h	/^    float B1;$/;"	m	struct:network
B1	Enclave/darknet_TA.h	/^    float B1;$/;"	m	struct:__anon5
B1	Enclave/darknet_TA.h	/^    float B1;$/;"	m	struct:network_TA
B2	App/darknet.h	/^    float B2;$/;"	m	struct:__anon16
B2	App/darknet.h	/^    float B2;$/;"	m	struct:network
B2	Enclave/darknet_TA.h	/^    float B2;$/;"	m	struct:__anon5
B2	Enclave/darknet_TA.h	/^    float B2;$/;"	m	struct:network_TA
BACKWARD_ADD_CMD	Enclave/darknetp_ta.h	28;"	d
BACKWARD_CMD	Enclave/darknetp_ta.h	27;"	d
BATCHNORM	App/darknet.h	/^    BATCHNORM,$/;"	e	enum:__anon14
BATCHNORM_TA	Enclave/darknet_TA.h	/^    BATCHNORM_TA,$/;"	e	enum:__anon3
BINARY_ACTIVATION	App/darknet.h	/^} BINARY_ACTIVATION;$/;"	t	typeref:enum:__anon13
BLANK	App/darknet.h	/^    BLANK$/;"	e	enum:__anon14
BLANK_TA	Enclave/darknet_TA.h	/^    BLANK_TA$/;"	e	enum:__anon3
BLAS_H	App/blas.h	2;"	d
BLAS_TA_H	Enclave/blas_TA.h	2;"	d
BMP	App/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon12
BindCreatedSocket	App/socket_server.cpp	/^int BindCreatedSocket(int hSocket)$/;"	f
Build_Mode	Makefile	/^Build_Mode = HW_RELEASE$/;"	m
CALC_LOSS_CMD	Enclave/darknetp_ta.h	31;"	d
CAPTCHA_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
CBC	Enclave/aes_TA.h	14;"	d
CHECK_ENCLAVE_POINTER	Enclave/Enclave_t.c	20;"	d	file:
CHECK_REF_POINTER	Enclave/Enclave_t.c	10;"	d	file:
CHECK_UNIQUE_POINTER	Enclave/Enclave_t.c	15;"	d	file:
CLASSIFICATION_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
COMPARE_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
CONNECTED	App/darknet.h	/^    CONNECTED,$/;"	e	enum:__anon14
CONNECTED_LAYER_H	App/connected_layer.h	2;"	d
CONNECTED_TA	Enclave/darknet_TA.h	/^    CONNECTED_TA,$/;"	e	enum:__anon3
CONSTANT	App/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon17
CONSTANT_TA	Enclave/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon6
CONVOLUTIONAL	App/darknet.h	/^    CONVOLUTIONAL,$/;"	e	enum:__anon14
CONVOLUTIONAL_LAYER_H	App/convolutional_layer.h	2;"	d
CONVOLUTIONAL_TA	Enclave/darknet_TA.h	/^    CONVOLUTIONAL_TA,$/;"	e	enum:__anon3
COST	App/darknet.h	/^    COST,$/;"	e	enum:__anon14
COST_LAYER_H	App/cost_layer.h	2;"	d
COST_TA	Enclave/darknet_TA.h	/^    COST_TA,$/;"	e	enum:__anon3
COST_TYPE	App/darknet.h	/^} COST_TYPE;$/;"	t	typeref:enum:__anon15
COST_TYPE_TA	Enclave/darknet_TA.h	/^} COST_TYPE_TA;$/;"	t	typeref:enum:__anon4
CRNN	App/darknet.h	/^    CRNN,$/;"	e	enum:__anon14
CRNN_TA	Enclave/darknet_TA.h	/^    CRNN_TA,$/;"	e	enum:__anon3
CROP	App/darknet.h	/^    CROP,$/;"	e	enum:__anon14
CROP_TA	Enclave/darknet_TA.h	/^    CROP_TA,$/;"	e	enum:__anon3
CTR	Enclave/aes_TA.h	22;"	d
Cipher	Enclave/aes_TA.cpp	/^static void Cipher(state_t* state, const uint8_t* RoundKey)$/;"	f	file:
Crypto_Library_Name	Makefile	/^Crypto_Library_Name := sgx_tcrypto$/;"	m
DARKNET_API	App/darknet.h	2;"	d
DARKNET_API_TA	Enclave/darknet_TA.h	2;"	d
DATA_H	App/data.h	2;"	d
DECONVOLUTIONAL	App/darknet.h	/^    DECONVOLUTIONAL,$/;"	e	enum:__anon14
DECONVOLUTIONAL_TA	Enclave/darknet_TA.h	/^    DECONVOLUTIONAL_TA,$/;"	e	enum:__anon3
DECRYPT_AND_VERIFY	App/App.h	26;"	d
DETECTION	App/darknet.h	/^    DETECTION,$/;"	e	enum:__anon14
DETECTION_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
DETECTION_TA	Enclave/darknet_TA.h	/^    DETECTION_TA,$/;"	e	enum:__anon3
DET_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
DIV	App/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon13
DROPOUT	App/darknet.h	/^    DROPOUT,$/;"	e	enum:__anon14
DROPOUT_LAYER_H	App/dropout_layer.h	2;"	d
DROPOUT_TA	Enclave/darknet_TA.h	/^    DROPOUT_TA,$/;"	e	enum:__anon3
ECB	Enclave/aes_TA.h	18;"	d
ELU	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
ELU_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
ENCLAVE_FILENAME	App/App.h	20;"	d
ENCLAVE_TA	Enclave/Enclave.h	2;"	d
ENCLAVE_T_H__	Enclave/Enclave_t.h	2;"	d
ENCLAVE_U_H__	App/Enclave_u.h	2;"	d
ENCRYPT_OUTPUT_DATA	App/App.h	28;"	d
ENCRYPT_OUTPUT_DATA	Enclave/Enclave.cpp	23;"	d	file:
EXP	App/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon17
EXP_TA	Enclave/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon6
Enclave_C_Flags	Makefile	/^Enclave_C_Flags := $(SGX_COMMON_CFLAGS) -nostdinc -fvisibility=hidden -fpie -fstack-protector $(Enclave_Include_Paths)$/;"	m
Enclave_Config_File	Makefile	/^Enclave_Config_File := Enclave\/Enclave.config.xml$/;"	m
Enclave_Cpp_Files	Makefile	/^Enclave_Cpp_Files := Enclave\/Enclave.cpp Enclave\/activations_TA.cpp Enclave\/aes_TA.cpp Enclave\/blas_TA.cpp Enclave\/gemm_TA.cpp Enclave\/im2col_TA.cpp Enclave\/math_TA.cpp Enclave\/utils_TA.cpp Enclave\/aes-gcm.cpp Enclave\/aes-gcm-entry.cpp Enclave\/aes-internal.cpp Enclave\/aes-internal-enc.cpp$/;"	m
Enclave_Cpp_Flags	Makefile	/^Enclave_Cpp_Flags := $(Enclave_C_Flags) -std=c++03 -nostdinc++$/;"	m
Enclave_Cpp_Objects	Makefile	/^Enclave_Cpp_Objects := $(Enclave_Cpp_Files:.cpp=.o)$/;"	m
Enclave_Include_Paths	Makefile	/^Enclave_Include_Paths := -IEnclave -I$(SGX_SDK)\/include -I$(SGX_SDK)\/include\/tlibc -I$(SGX_SDK)\/include\/libc++ $/;"	m
Enclave_Link_Flags	Makefile	/^Enclave_Link_Flags := $(SGX_COMMON_CFLAGS) -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L$(SGX_LIBRARY_PATH) \\$/;"	m
Enclave_Name	Makefile	/^Enclave_Name := enclave.so$/;"	m
Enclave_ocall_print	App/Enclave_u.c	/^static sgx_status_t SGX_CDECL Enclave_ocall_print(void* pms)$/;"	f	file:
F1	Enclave/math_TA.cpp	/^double F1(double x)$/;"	f
F2	Enclave/math_TA.cpp	/^double F2(double x)$/;"	f
FALSE	App/App.cpp	16;"	d	file:
FAST_BITS	App/stb_image.h	1687;"	d
FORWARD_CMD	Enclave/darknetp_ta.h	26;"	d
GEMM_TA_H	Enclave/gemm_TA.h	2;"	d
GETU32	Enclave/aes-internal.h	103;"	d
GRU	App/darknet.h	/^    GRU,$/;"	e	enum:__anon14
GRU_TA	Enclave/darknet_TA.h	/^    GRU_TA,$/;"	e	enum:__anon3
HARDTAN	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
HARDTAN_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
IM2COL_TA_H	Enclave/im2col_TA.h	2;"	d
IMAGE_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
IMAGE_H	App/image.h	2;"	d
IMTYPE	App/darknet.h	/^} IMTYPE;$/;"	t	typeref:enum:__anon12
INCLUDE_STB_IMAGE_WRITE_H	App/stb_image_write.h	149;"	d
INSTANCE_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
ISEG	App/darknet.h	/^    ISEG,$/;"	e	enum:__anon14
ISEG_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
ISEG_TA	Enclave/darknet_TA.h	/^    ISEG_TA,$/;"	e	enum:__anon3
InvCipher	Enclave/aes_TA.cpp	/^static void InvCipher(state_t* state, const uint8_t* RoundKey)$/;"	f	file:
InvMixColumns	Enclave/aes_TA.cpp	/^static void InvMixColumns(state_t* state)$/;"	f	file:
InvShiftRows	Enclave/aes_TA.cpp	/^static void InvShiftRows(state_t* state)$/;"	f	file:
InvSubBytes	Enclave/aes_TA.cpp	/^static void InvSubBytes(state_t* state)$/;"	f	file:
Iv	Enclave/aes_TA.h	/^  uint8_t Iv[AES_BLOCKLEN];$/;"	m	struct:AES_ctx
JPG	App/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon12
KeyExpansion	Enclave/aes_TA.cpp	/^static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)$/;"	f	file:
L1	App/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon15
L1_TA	Enclave/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon4
L2NORM	App/darknet.h	/^    L2NORM,$/;"	e	enum:__anon14
L2NORM_TA	Enclave/darknet_TA.h	/^    L2NORM_TA,$/;"	e	enum:__anon3
LAYER_TYPE	App/darknet.h	/^} LAYER_TYPE;$/;"	t	typeref:enum:__anon14
LAYER_TYPE_TA	Enclave/darknet_TA.h	/^} LAYER_TYPE_TA;$/;"	t	typeref:enum:__anon3
LEAKY	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
LEAKY_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
LETTERBOX_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
LHTAN	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
LHTAN_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
LINEAR	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
LINEAR_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
LIST_H	App/list.h	2;"	d
LOCAL	App/darknet.h	/^    LOCAL,$/;"	e	enum:__anon14
LOCAL_TA	Enclave/darknet_TA.h	/^    LOCAL_TA,$/;"	e	enum:__anon3
LOGGY	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
LOGGY_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
LOGISTIC	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
LOGISTIC_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
LOGXENT	App/darknet.h	/^    LOGXENT,$/;"	e	enum:__anon14
LOGXENT_TA	Enclave/darknet_TA.h	/^    LOGXENT_TA,$/;"	e	enum:__anon3
LSTM	App/darknet.h	/^    LSTM,$/;"	e	enum:__anon14
LSTM_TA	Enclave/darknet_TA.h	/^    LSTM_TA,$/;"	e	enum:__anon3
MAKE_CONNECTED_CMD	Enclave/darknetp_ta.h	23;"	d
MAKE_CONV_CMD	Enclave/darknetp_ta.h	20;"	d
MAKE_COST_CMD	Enclave/darknetp_ta.h	25;"	d
MAKE_DROP_CMD	Enclave/darknetp_ta.h	22;"	d
MAKE_MAX_CMD	Enclave/darknetp_ta.h	21;"	d
MAKE_NETWORK_CMD	Enclave/darknetp_ta.h	18;"	d
MAKE_SOFTMAX_CMD	Enclave/darknetp_ta.h	24;"	d
MASKED	App/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon15
MASKED_TA	Enclave/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon4
MATRIX_H	App/matrix.h	2;"	d
MAX	App/socket_client.cpp	6;"	d	file:
MAX	App/socket_server.cpp	67;"	d	file:
MAXPOOL	App/darknet.h	/^    MAXPOOL,$/;"	e	enum:__anon14
MAXPOOL_LAYER_H	App/maxpool_layer.h	2;"	d
MAXPOOL_TA	Enclave/darknet_TA.h	/^    MAXPOOL_TA,$/;"	e	enum:__anon3
MAX_DATA_SIZE	App/App.h	22;"	d
MULT	App/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon13
MULTIPLY_AS_A_FUNCTION	Enclave/aes_TA.cpp	63;"	d	file:
MixColumns	Enclave/aes_TA.cpp	/^static void MixColumns(state_t* state)$/;"	f	file:
Multiply	Enclave/aes_TA.cpp	/^static uint8_t Multiply(uint8_t x, uint8_t y)$/;"	f	file:
Multiply	Enclave/aes_TA.cpp	335;"	d	file:
NETWORK	App/darknet.h	/^    NETWORK,$/;"	e	enum:__anon14
NETWORK_H	App/network.h	3;"	d
NETWORK_TA	Enclave/darknet_TA.h	/^    NETWORK_TA,$/;"	e	enum:__anon3
NET_TRUTH_CMD	Enclave/darknetp_ta.h	30;"	d
NORMALIZATION	App/darknet.h	/^    NORMALIZATION,$/;"	e	enum:__anon14
NORMALIZATION_TA	Enclave/darknet_TA.h	/^    NORMALIZATION_TA,$/;"	e	enum:__anon3
NUMCHARS	App/data.cpp	489;"	d	file:
Nb	Enclave/aes_TA.cpp	46;"	d	file:
Nk	Enclave/aes_TA.cpp	49;"	d	file:
Nk	Enclave/aes_TA.cpp	52;"	d	file:
Nk	Enclave/aes_TA.cpp	55;"	d	file:
Nr	Enclave/aes_TA.cpp	50;"	d	file:
Nr	Enclave/aes_TA.cpp	53;"	d	file:
Nr	Enclave/aes_TA.cpp	56;"	d	file:
OCALL_PRINT_DEFINED__	App/Enclave_u.h	20;"	d
OLD_CLASSIFICATION_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
OPTION_LIST_H	App/option_list.h	2;"	d
OUTPUT_RETURN_CMD	Enclave/darknetp_ta.h	33;"	d
PARSER_H	App/parser.h	2;"	d
PI	Enclave/math_TA.h	5;"	d
PLSE	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
PLSE_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
PNG	App/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon12
POLY	App/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon17
POLY_TA	Enclave/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon6
PUTU32	Enclave/aes-internal.h	107;"	d
RAMP	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
RAMP_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
RANDOM	App/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon17
RANDOM_TA	Enclave/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon6
RCON	Enclave/aes-internal.h	28;"	d
RCON	Enclave/aes-internal.h	63;"	d
REGION	App/darknet.h	/^    REGION,$/;"	e	enum:__anon14
REGION_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
REGION_TA	Enclave/darknet_TA.h	/^    REGION_TA,$/;"	e	enum:__anon3
REGRESSION_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
RELIE	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
RELIE_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
RELU	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
RELU_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
REORG	App/darknet.h	/^    REORG,$/;"	e	enum:__anon14
REORG_TA	Enclave/darknet_TA.h	/^    REORG_TA,$/;"	e	enum:__anon3
RNN	App/darknet.h	/^    RNN,$/;"	e	enum:__anon14
RNN_TA	Enclave/darknet_TA.h	/^    RNN_TA,$/;"	e	enum:__anon3
ROUND	Enclave/aes-internal-enc.cpp	109;"	d	file:
ROUND	Enclave/aes-internal-enc.cpp	151;"	d	file:
ROUTE	App/darknet.h	/^    ROUTE,$/;"	e	enum:__anon14
ROUTE_TA	Enclave/darknet_TA.h	/^    ROUTE_TA,$/;"	e	enum:__anon3
Rcon	Enclave/aes_TA.cpp	/^static const uint8_t Rcon[11] = {$/;"	v	file:
RoundKey	Enclave/aes_TA.h	/^  uint8_t RoundKey[AES_keyExpSize];$/;"	m	struct:AES_ctx
SAVE_WEI_CMD	Enclave/darknetp_ta.h	34;"	d
SECRET_NUM	App/darknet.h	13;"	d
SECRET_NUM_TA	Enclave/darknet_TA.h	8;"	d
SEG	App/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon15
SEGMENTATION_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
SEG_TA	Enclave/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon4
SELU	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
SELU_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
SGX_AESGCM_IV_SIZE	App/App.h	24;"	d
SGX_AESGCM_MAC_SIZE	App/App.h	23;"	d
SGX_ARCH	Makefile	/^	SGX_ARCH := x86$/;"	m
SGX_ARCH	Makefile	/^SGX_ARCH ?= x64$/;"	m
SGX_CAST	App/Enclave_u.h	13;"	d
SGX_CAST	Enclave/Enclave_t.h	12;"	d
SGX_COMMON_CFLAGS	Makefile	/^	SGX_COMMON_CFLAGS := -m32$/;"	m
SGX_COMMON_CFLAGS	Makefile	/^	SGX_COMMON_CFLAGS := -m64$/;"	m
SGX_EDGER8R	Makefile	/^	SGX_EDGER8R := $(SGX_SDK)\/bin\/x64\/sgx_edger8r$/;"	m
SGX_EDGER8R	Makefile	/^	SGX_EDGER8R := $(SGX_SDK)\/bin\/x86\/sgx_edger8r$/;"	m
SGX_ENCLAVE_SIGNER	Makefile	/^	SGX_ENCLAVE_SIGNER := $(SGX_SDK)\/bin\/x64\/sgx_sign$/;"	m
SGX_ENCLAVE_SIGNER	Makefile	/^	SGX_ENCLAVE_SIGNER := $(SGX_SDK)\/bin\/x86\/sgx_sign$/;"	m
SGX_LIBRARY_PATH	Makefile	/^	SGX_LIBRARY_PATH := $(SGX_SDK)\/lib$/;"	m
SGX_LIBRARY_PATH	Makefile	/^	SGX_LIBRARY_PATH := $(SGX_SDK)\/lib64$/;"	m
SGX_MODE	Makefile	/^SGX_MODE ?= SIM$/;"	m
SGX_SDK	Makefile	/^SGX_SDK ?= \/opt\/intel\/sgxsdk$/;"	m
SHORTCUT	App/darknet.h	/^    SHORTCUT,$/;"	e	enum:__anon14
SHORTCUT_TA	Enclave/darknet_TA.h	/^    SHORTCUT_TA,$/;"	e	enum:__anon3
SIG	App/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon17
SIG_TA	Enclave/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon6
SMOOTH	App/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon15
SMOOTH_TA	Enclave/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon4
SOFTMAX	App/darknet.h	/^    SOFTMAX,$/;"	e	enum:__anon14
SOFTMAX_LAYER_H	App/softmax_layer.h	2;"	d
SOFTMAX_TA	Enclave/darknet_TA.h	/^    SOFTMAX_TA,$/;"	e	enum:__anon3
SSE	App/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon15
SSE_TA	Enclave/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon4
STAIR	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
STAIR_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
STBIDEF	App/stb_image.h	330;"	d
STBIDEF	App/stb_image.h	332;"	d
STBIWDEF	App/stb_image_write.h	154;"	d
STBIWDEF	App/stb_image_write.h	157;"	d
STBIWDEF	App/stb_image_write.h	159;"	d
STBIW_ASSERT	App/stb_image_write.h	236;"	d
STBIW_FREE	App/stb_image_write.h	221;"	d
STBIW_MALLOC	App/stb_image_write.h	219;"	d
STBIW_MEMMOVE	App/stb_image_write.h	230;"	d
STBIW_REALLOC	App/stb_image_write.h	220;"	d
STBIW_REALLOC_SIZED	App/stb_image_write.h	225;"	d
STBIW_UCHAR	App/stb_image_write.h	239;"	d
STBI_ASSERT	App/stb_image.h	525;"	d
STBI_FREE	App/stb_image.h	583;"	d
STBI_HAS_LROTL	App/stb_image.h	563;"	d
STBI_INCLUDE_STB_IMAGE_H	App/stb_image.h	107;"	d
STBI_MALLOC	App/stb_image.h	581;"	d
STBI_NEON	App/stb_image.h	672;"	d
STBI_NOTUSED	App/stb_image.h	557;"	d
STBI_NOTUSED	App/stb_image.h	559;"	d
STBI_NO_BMP	App/stb_image.h	482;"	d
STBI_NO_GIF	App/stb_image.h	491;"	d
STBI_NO_HDR	App/stb_image.h	494;"	d
STBI_NO_JPEG	App/stb_image.h	476;"	d
STBI_NO_PIC	App/stb_image.h	497;"	d
STBI_NO_PNG	App/stb_image.h	479;"	d
STBI_NO_PNM	App/stb_image.h	500;"	d
STBI_NO_PSD	App/stb_image.h	485;"	d
STBI_NO_SIMD	App/stb_image.h	605;"	d
STBI_NO_SIMD	App/stb_image.h	620;"	d
STBI_NO_TGA	App/stb_image.h	488;"	d
STBI_NO_ZLIB	App/stb_image.h	505;"	d
STBI_ORDER_BGR	App/stb_image.h	/^   STBI_ORDER_BGR$/;"	e	enum:__anon27
STBI_ORDER_RGB	App/stb_image.h	/^   STBI_ORDER_RGB,$/;"	e	enum:__anon27
STBI_REALLOC	App/stb_image.h	582;"	d
STBI_REALLOC_SIZED	App/stb_image.h	587;"	d
STBI_SIMD_ALIGN	App/stb_image.h	650;"	d
STBI_SIMD_ALIGN	App/stb_image.h	658;"	d
STBI_SIMD_ALIGN	App/stb_image.h	678;"	d
STBI_SIMD_ALIGN	App/stb_image.h	682;"	d
STBI_SSE2	App/stb_image.h	624;"	d
STBI_VERSION	App/stb_image.h	310;"	d
STBI__BYTECAST	App/stb_image.h	1500;"	d
STBI__CASE	App/stb_image.h	1538;"	d
STBI__CASE	App/stb_image.h	1556;"	d
STBI__CASE	App/stb_image.h	1587;"	d
STBI__CASE	App/stb_image.h	1605;"	d
STBI__CASE	App/stb_image.h	4411;"	d
STBI__CASE	App/stb_image.h	4424;"	d
STBI__CASE	App/stb_image.h	4428;"	d
STBI__CASE	App/stb_image.h	4441;"	d
STBI__COMBO	App/stb_image.h	1537;"	d
STBI__COMBO	App/stb_image.h	1586;"	d
STBI__F_avg	App/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon38
STBI__F_avg_first	App/stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon38
STBI__F_none	App/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon38
STBI__F_paeth	App/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon38
STBI__F_paeth_first	App/stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon38
STBI__F_sub	App/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon38
STBI__F_up	App/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon38
STBI__HDR_BUFLEN	App/stb_image.h	6619;"	d
STBI__IDCT_1D	App/stb_image.h	2167;"	d
STBI__MARKER_none	App/stb_image.h	2652;"	d
STBI__PNG_TYPE	App/stb_image.h	4729;"	d
STBI__RESTART	App/stb_image.h	2669;"	d
STBI__SCAN_header	App/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon29
STBI__SCAN_load	App/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon29
STBI__SCAN_type	App/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon29
STBI__X64_TARGET	App/stb_image.h	592;"	d
STBI__X86_TARGET	App/stb_image.h	594;"	d
STBI__ZFAST_BITS	App/stb_image.h	3789;"	d
STBI__ZFAST_MASK	App/stb_image.h	3790;"	d
STBI_default	App/stb_image.h	/^   STBI_default = 0, \/\/ only used for desired_channels$/;"	e	enum:__anon24
STBI_grey	App/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon24
STBI_grey_alpha	App/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon24
STBI_rgb	App/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon24
STBI_rgb_alpha	App/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon24
STB_IMAGE_IMPLEMENTATION	App/image.cpp	8;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	App/image.cpp	10;"	d	file:
STEP	App/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon17
STEPS	App/darknet.h	/^    CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM$/;"	e	enum:__anon17
STEPS_TA	Enclave/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon6
STEP_TA	Enclave/darknet_TA.h	/^    CONSTANT_TA, STEP_TA, EXP_TA, POLY_TA, STEPS_TA, SIG_TA, RANDOM_TA$/;"	e	enum:__anon6
STUDY_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
SUB	App/darknet.h	/^    MULT, ADD, SUB, DIV$/;"	e	enum:__anon13
SUPER_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
SWAG_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
Service_Library_Name	Makefile	/^	Service_Library_Name := sgx_tservice$/;"	m
Service_Library_Name	Makefile	/^	Service_Library_Name := sgx_tservice_sim$/;"	m
ShiftRows	Enclave/aes_TA.cpp	/^static void ShiftRows(state_t* state)$/;"	f	file:
Signed_Enclave_Name	Makefile	/^Signed_Enclave_Name := enclave.signed.so$/;"	m
SocketConnect	App/socket_client.cpp	/^int SocketConnect(int hSocket)$/;"	f
SocketCreate	App/socket_server.cpp	/^short SocketCreate(void)$/;"	f
SocketCreate_Client	App/socket_client.cpp	/^short SocketCreate_Client(void)$/;"	f
Socket_Client	App/socket_client.cpp	/^int Socket_Client(char *filename, char *filename1)$/;"	f
Socket_Server	App/socket_server.cpp	/^int Socket_Server(char *filename, char *filesize, char *tag, char *tag_size, clock_t *time, int mode)$/;"	f
SubBytes	Enclave/aes_TA.cpp	/^static void SubBytes(state_t* state)$/;"	f	file:
TAG_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
TANH	App/darknet.h	/^    LOGISTIC, RELU, RELIE, LINEAR, RAMP, TANH, PLSE, LEAKY, ELU, LOGGY, STAIR, HARDTAN, LHTAN, SELU$/;"	e	enum:__anon11
TANH_TA	Enclave/darknet_TA.h	/^    LOGISTIC_TA, RELU_TA, RELIE_TA, LINEAR_TA, RAMP_TA, TANH_TA, PLSE_TA, LEAKY_TA, ELU_TA, LOGGY_TA, STAIR_TA, HARDTAN_TA, LHTAN_TA, SELU_TA$/;"	e	enum:__anon2
TA_DARKNETP_H	Enclave/darknetp_ta.h	2;"	d
TA_DARKNETP_UUID	Enclave/darknetp_ta.h	13;"	d
TA_MY_TEST_H_MATH	Enclave/math_TA.h	2;"	d
TA_THRESHOLD_LIMIT	Enclave/darknet_TA.h	10;"	d
TD0	Enclave/aes-internal.h	48;"	d
TD0	Enclave/aes-internal.h	88;"	d
TD0_	Enclave/aes-internal.h	56;"	d
TD0_	Enclave/aes-internal.h	96;"	d
TD1	Enclave/aes-internal.h	49;"	d
TD1	Enclave/aes-internal.h	89;"	d
TD1_	Enclave/aes-internal.h	57;"	d
TD1_	Enclave/aes-internal.h	97;"	d
TD2	Enclave/aes-internal.h	50;"	d
TD2	Enclave/aes-internal.h	90;"	d
TD2_	Enclave/aes-internal.h	58;"	d
TD2_	Enclave/aes-internal.h	98;"	d
TD3	Enclave/aes-internal.h	51;"	d
TD3	Enclave/aes-internal.h	91;"	d
TD3_	Enclave/aes-internal.h	59;"	d
TD3_	Enclave/aes-internal.h	99;"	d
TD41	Enclave/aes-internal.h	52;"	d
TD41	Enclave/aes-internal.h	92;"	d
TD42	Enclave/aes-internal.h	53;"	d
TD42	Enclave/aes-internal.h	93;"	d
TD43	Enclave/aes-internal.h	54;"	d
TD43	Enclave/aes-internal.h	94;"	d
TD44	Enclave/aes-internal.h	55;"	d
TD44	Enclave/aes-internal.h	95;"	d
TE0	Enclave/aes-internal.h	30;"	d
TE0	Enclave/aes-internal.h	70;"	d
TE1	Enclave/aes-internal.h	31;"	d
TE1	Enclave/aes-internal.h	71;"	d
TE2	Enclave/aes-internal.h	32;"	d
TE2	Enclave/aes-internal.h	72;"	d
TE3	Enclave/aes-internal.h	33;"	d
TE3	Enclave/aes-internal.h	73;"	d
TE4	Enclave/aes-internal.h	46;"	d
TE4	Enclave/aes-internal.h	86;"	d
TE41	Enclave/aes-internal.h	34;"	d
TE41	Enclave/aes-internal.h	74;"	d
TE411	Enclave/aes-internal.h	42;"	d
TE411	Enclave/aes-internal.h	82;"	d
TE414	Enclave/aes-internal.h	41;"	d
TE414	Enclave/aes-internal.h	81;"	d
TE42	Enclave/aes-internal.h	35;"	d
TE42	Enclave/aes-internal.h	75;"	d
TE421	Enclave/aes-internal.h	38;"	d
TE421	Enclave/aes-internal.h	78;"	d
TE422	Enclave/aes-internal.h	43;"	d
TE422	Enclave/aes-internal.h	83;"	d
TE43	Enclave/aes-internal.h	36;"	d
TE43	Enclave/aes-internal.h	76;"	d
TE432	Enclave/aes-internal.h	39;"	d
TE432	Enclave/aes-internal.h	79;"	d
TE433	Enclave/aes-internal.h	44;"	d
TE433	Enclave/aes-internal.h	84;"	d
TE44	Enclave/aes-internal.h	37;"	d
TE44	Enclave/aes-internal.h	77;"	d
TE443	Enclave/aes-internal.h	40;"	d
TE443	Enclave/aes-internal.h	80;"	d
TE444	Enclave/aes-internal.h	45;"	d
TE444	Enclave/aes-internal.h	85;"	d
TGA	App/darknet.h	/^    PNG, BMP, TGA, JPG$/;"	e	enum:__anon12
TIME	App/utils.h	8;"	d
TOKEN_FILENAME	App/App.h	19;"	d
TRANS_WEI_CMD	Enclave/darknetp_ta.h	32;"	d
TREE_H	App/tree.h	2;"	d
TRUE	App/App.cpp	12;"	d	file:
TWO_PI	App/utils.h	15;"	d
Td0	Enclave/aes-internal.cpp	/^const aes_uint Td0[256] = {$/;"	v
Td1	Enclave/aes-internal.cpp	/^const aes_uint Td1[256] = {$/;"	v
Td2	Enclave/aes-internal.cpp	/^const aes_uint Td2[256] = {$/;"	v
Td3	Enclave/aes-internal.cpp	/^const aes_uint Td3[256] = {$/;"	v
Td4	Enclave/aes-internal.cpp	/^const aes_uint Td4[256] = {$/;"	v
Td4s	Enclave/aes-internal.cpp	/^const aes_uchar Td4s[256] = {$/;"	v
Te0	Enclave/aes-internal.cpp	/^const aes_uint Te0[256] = {$/;"	v
Te1	Enclave/aes-internal.cpp	/^const aes_uint Te1[256] = {$/;"	v
Te2	Enclave/aes-internal.cpp	/^const aes_uint Te2[256] = {$/;"	v
Te3	Enclave/aes-internal.cpp	/^const aes_uint Te3[256] = {$/;"	v
Te4	Enclave/aes-internal.cpp	/^const aes_uint Te4[256] = {$/;"	v
Trts_Library_Name	Makefile	/^	Trts_Library_Name := sgx_trts$/;"	m
Trts_Library_Name	Makefile	/^	Trts_Library_Name := sgx_trts_sim$/;"	m
UID	Enclave/Enclave.cpp	/^char UID[46] = "b8734d20-832e-43a9-bf9f-17f3e9e041e2";$/;"	v
UPDATE_CMD	Enclave/darknetp_ta.h	29;"	d
UPSAMPLE	App/darknet.h	/^    UPSAMPLE,$/;"	e	enum:__anon14
UPSAMPLE_TA	Enclave/darknet_TA.h	/^    UPSAMPLE_TA,$/;"	e	enum:__anon3
UTILS_H	App/utils.h	2;"	d
UTILS_H_TA	Enclave/utils_TA.h	2;"	d
Urts_Library_Name	Makefile	/^	Urts_Library_Name := sgx_urts$/;"	m
Urts_Library_Name	Makefile	/^	Urts_Library_Name := sgx_urts_sim$/;"	m
WGAN	App/darknet.h	/^    SSE, MASKED, L1, SEG, SMOOTH,WGAN$/;"	e	enum:__anon15
WGAN_TA	Enclave/darknet_TA.h	/^    SSE_TA, MASKED_TA, L1_TA, SEG_TA, SMOOTH_TA, WGAN_TA$/;"	e	enum:__anon4
WORKSPACE_NETWORK_CMD	Enclave/darknetp_ta.h	19;"	d
WRITING_DATA	App/darknet.h	/^    CLASSIFICATION_DATA, DETECTION_DATA, CAPTCHA_DATA, REGION_DATA, IMAGE_DATA, COMPARE_DATA, WRITING_DATA, SWAG_DATA, TAG_DATA, OLD_CLASSIFICATION_DATA, STUDY_DATA, DET_DATA, SUPER_DATA, LETTERBOX_DATA, REGRESSION_DATA, SEGMENTATION_DATA, INSTANCE_DATA, ISEG_DATA$/;"	e	enum:__anon22
X	App/darknet.h	/^    matrix X;$/;"	m	struct:__anon21
XNOR	App/darknet.h	/^    XNOR,$/;"	e	enum:__anon14
XNOR_TA	Enclave/darknet_TA.h	/^    XNOR_TA,$/;"	e	enum:__anon3
XorWithIv	Enclave/aes_TA.cpp	/^static void XorWithIv(uint8_t* buf, const uint8_t* Iv)$/;"	f	file:
YCbCr_to_RGB_kernel	App/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon31
YOLO	App/darknet.h	/^    YOLO,$/;"	e	enum:__anon14
YOLO_TA	Enclave/darknet_TA.h	/^    YOLO_TA,$/;"	e	enum:__anon3
_AES_H_	Enclave/aes_TA.h	2;"	d
_CRT_NONSTDC_NO_DEPRECATE	App/stb_image_write.h	197;"	d
_CRT_SECURE_NO_WARNINGS	App/stb_image_write.h	194;"	d
__BIG_ENDIAN	Enclave/aes-common.h	49;"	d
__BIG_ENDIAN	Enclave/aes-common.h	56;"	d
__BIG_ENDIAN	Enclave/aes-common.h	67;"	d
__BIG_ENDIAN	Enclave/aes-common.h	76;"	d
__BYTE_ORDER	Enclave/aes-common.h	47;"	d
__BYTE_ORDER	Enclave/aes-common.h	58;"	d
__BYTE_ORDER	Enclave/aes-common.h	60;"	d
__BYTE_ORDER	Enclave/aes-common.h	68;"	d
__BYTE_ORDER	Enclave/aes-common.h	74;"	d
__LITTLE_ENDIAN	Enclave/aes-common.h	48;"	d
__LITTLE_ENDIAN	Enclave/aes-common.h	55;"	d
__LITTLE_ENDIAN	Enclave/aes-common.h	66;"	d
__LITTLE_ENDIAN	Enclave/aes-common.h	75;"	d
absolute	App/darknet.h	/^    int absolute;$/;"	m	struct:layer
absolute	Enclave/darknet_TA.h	/^    int absolute;$/;"	m	struct:layer_TA
activate	App/activations.cpp	/^float activate(float x, ACTIVATION a)$/;"	f
activate_TA	Enclave/activations_TA.cpp	/^float activate_TA(float x, ACTIVATION_TA a)$/;"	f
activate_array	App/activations.cpp	/^void activate_array(float *x, const int n, const ACTIVATION a)$/;"	f
activate_array_TA	Enclave/activations_TA.cpp	/^float*  activate_array_TA(float *x, const int n, const ACTIVATION_TA a)$/;"	f
activation	App/darknet.h	/^    ACTIVATION activation;$/;"	m	struct:layer
activation	Enclave/darknet_TA.h	/^    ACTIVATION_TA activation;$/;"	m	struct:layer_TA
adam	App/darknet.h	/^    int adam;$/;"	m	struct:__anon16
adam	App/darknet.h	/^    int adam;$/;"	m	struct:network
adam	Enclave/darknet_TA.h	/^    int adam;$/;"	m	struct:__anon5
adam	Enclave/darknet_TA.h	/^    int adam;$/;"	m	struct:network_TA
add_bias	App/parser.cpp	/^void add_bias(float *output, float *biases, int batch, int n, int size)$/;"	f
add_bias_TA	Enclave/Enclave.cpp	/^void add_bias_TA(float *output, float *biases, int batch, int n, int size)$/;"	f
add_pixel	App/image.cpp	/^static void add_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
aes_cbc_TA	Enclave/Enclave.cpp	/^int aes_cbc_TA(char* xcrypt, float* gradient, int org_len, int mode)$/;"	f
aes_cbc_TA_token	Enclave/Enclave.cpp	/^int aes_cbc_TA_token(char* xcrypt, char* UID, int len)$/;"	f
aes_char	Enclave/aes-common.h	/^typedef signed char         aes_char;$/;"	t
aes_encrypt	Enclave/aes-internal-enc.cpp	/^void aes_encrypt(void *ctx, const aes_uchar *plain, aes_uchar *crypt)$/;"	f
aes_encrypt_deinit	Enclave/aes-internal-enc.cpp	/^void aes_encrypt_deinit(void *ctx)$/;"	f
aes_encrypt_init	Enclave/aes-internal-enc.cpp	/^void * aes_encrypt_init(const aes_uchar *key, size_t len)$/;"	f
aes_gcm_ad	Enclave/aes-gcm.cpp	/^int aes_gcm_ad(const aes_uchar *key, size_t key_len, const aes_uchar *iv, size_t iv_len,$/;"	f
aes_gcm_ae	Enclave/aes-gcm.cpp	/^int aes_gcm_ae(const aes_uchar *key, size_t key_len, const aes_uchar *iv, size_t iv_len,$/;"	f
aes_gcm_entry	Enclave/aes-gcm-entry.cpp	/^int aes_gcm_entry(char *xcrypt, uint8_t *gradient, uint8_t *tag_buffer, int size)$/;"	f
aes_gcm_gctr	Enclave/aes-gcm.cpp	/^static void aes_gcm_gctr(void *aes, const aes_uchar *J0, const aes_uchar *in, size_t len,$/;"	f	file:
aes_gcm_ghash	Enclave/aes-gcm.cpp	/^static void aes_gcm_ghash(const aes_uchar *H, const aes_uchar *aad, size_t aad_len,$/;"	f	file:
aes_gcm_init_hash_subkey	Enclave/aes-gcm.cpp	/^static void * aes_gcm_init_hash_subkey(const aes_uchar *key, size_t key_len, aes_uchar *H)$/;"	f	file:
aes_gcm_prepare_j0	Enclave/aes-gcm.cpp	/^static void aes_gcm_prepare_j0(const aes_uchar *iv, size_t iv_len, const aes_uchar *H, aes_uchar *J0)$/;"	f	file:
aes_gctr	Enclave/aes-gcm.cpp	/^static void aes_gctr(void *aes, const aes_uchar *icb, const aes_uchar *x, size_t xlen, aes_uchar *y)$/;"	f	file:
aes_gmac	Enclave/aes-gcm.cpp	/^int aes_gmac(const aes_uchar *key, size_t key_len, const aes_uchar *iv, size_t iv_len,$/;"	f
aes_int	Enclave/aes-common.h	/^typedef signed int          aes_int;$/;"	t
aes_long	Enclave/aes-common.h	/^typedef signed long long    aes_long;$/;"	t
aes_rijndael_encrypt	Enclave/aes-internal-enc.cpp	/^void aes_rijndael_encrypt(const aes_uint rk[], int Nr, const aes_uchar pt[16], aes_uchar ct[16])$/;"	f
aes_rijndael_key_setup_enc	Enclave/aes-internal-enc.cpp	/^int aes_rijndael_key_setup_enc(aes_uint rk[], const aes_uchar cipherKey[], size_t keyBits)$/;"	f
aes_short	Enclave/aes-common.h	/^typedef signed short        aes_short;$/;"	t
aes_uchar	Enclave/aes-common.h	/^typedef unsigned char       aes_uchar;$/;"	t
aes_uint	Enclave/aes-common.h	/^typedef unsigned int        aes_uint;$/;"	t
aes_ulong	Enclave/aes-common.h	/^typedef unsigned long long  aes_ulong;$/;"	t
aes_ushort	Enclave/aes-common.h	/^typedef unsigned short      aes_ushort;$/;"	t
all_a	App/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon39
alpha	App/darknet.h	/^    float alpha;$/;"	m	struct:layer
alpha	Enclave/darknet_TA.h	/^    float alpha;$/;"	m	struct:layer_TA
alphanum_to_int	App/utils.cpp	/^int alphanum_to_int(char c)$/;"	f
angle	App/darknet.h	/^    float angle;$/;"	m	struct:layer
angle	App/darknet.h	/^    float angle;$/;"	m	struct:load_args
angle	App/darknet.h	/^    float angle;$/;"	m	struct:network
angle	Enclave/darknet_TA.h	/^    float angle;$/;"	m	struct:layer_TA
angle	Enclave/darknet_TA.h	/^    float angle;$/;"	m	struct:network_TA
app14_color_transform	App/stb_image.h	/^   int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anon31
aspect	App/darknet.h	/^    float aspect;$/;"	m	struct:__anon18
aspect	App/darknet.h	/^    float aspect;$/;"	m	struct:load_args
aspect	App/darknet.h	/^    float aspect;$/;"	m	struct:network
aspect	Enclave/darknet_TA.h	/^    float aspect;$/;"	m	struct:network_TA
asr	Enclave/math_TA.cpp	/^double asr(double a, double b, double eps, double A,int flag)$/;"	f
asr0	Enclave/math_TA.cpp	/^double asr0(double a, double b, double eps,int flag)$/;"	f
augment_args	App/darknet.h	/^} augment_args;$/;"	t	typeref:struct:__anon18
avg_loss	Enclave/Enclave.cpp	/^float avg_loss = -1;$/;"	v
avgpool_layer	App/avgpool_layer.h	/^typedef layer avgpool_layer;$/;"	t
axpy_cpu	App/blas.cpp	/^void axpy_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
axpy_cpu_TA	Enclave/blas_TA.cpp	/^void axpy_cpu_TA(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
back	App/darknet.h	/^    node *back;$/;"	m	struct:list
background	App/darknet.h	/^    int background;$/;"	m	struct:layer
background	App/darknet.h	/^    int background;$/;"	m	struct:load_args
background	App/stb_image.h	/^   stbi_uc *background;          \/\/ The current "background" as far as a gif is concerned$/;"	m	struct:__anon42
background	Enclave/darknet_TA.h	/^    int background;$/;"	m	struct:layer_TA
backward	App/darknet.h	/^    void (*backward)  (struct layer, struct network);$/;"	m	struct:layer
backward_TA	App/darknet.h	/^    void (*backward_TA)   (struct layer, struct network);$/;"	m	struct:layer
backward_TA	Enclave/darknet_TA.h	/^    void (*backward_TA)  (struct layer_TA, struct network_TA);$/;"	m	struct:layer_TA
backward_gpu	App/darknet.h	/^    void (*backward_gpu)  (struct layer, struct network);$/;"	m	struct:layer
basecfg	App/utils.cpp	/^char *basecfg(char *cfgfile)$/;"	f
batch	App/darknet.h	/^    int batch;$/;"	m	struct:__anon16
batch	App/darknet.h	/^    int batch;$/;"	m	struct:layer
batch	App/darknet.h	/^    int batch;$/;"	m	struct:network
batch	App/parser.cpp	/^    int batch;$/;"	m	struct:size_params	file:
batch	Enclave/darknet_TA.h	/^    int batch;$/;"	m	struct:__anon5
batch	Enclave/darknet_TA.h	/^    int batch;$/;"	m	struct:layer_TA
batch	Enclave/darknet_TA.h	/^    int batch;$/;"	m	struct:network_TA
batch_normalize	App/darknet.h	/^    int batch_normalize;$/;"	m	struct:layer
batch_normalize	Enclave/darknet_TA.h	/^    int batch_normalize;$/;"	m	struct:layer_TA
bbox	App/darknet.h	/^    box bbox;$/;"	m	struct:detection
best_3d_shift	App/image.cpp	/^int best_3d_shift(image a, image b, int min, int max)$/;"	f
best_3d_shift_r	App/image.cpp	/^int best_3d_shift_r(image a, image b, int min, int max)$/;"	f
beta	App/darknet.h	/^    float beta;$/;"	m	struct:layer
beta	Enclave/darknet_TA.h	/^    float beta;$/;"	m	struct:layer_TA
bgindex	App/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon42
bias_m	App/darknet.h	/^    float * bias_m;$/;"	m	struct:layer
bias_m	Enclave/darknet_TA.h	/^    float * bias_m;$/;"	m	struct:layer_TA
bias_match	App/darknet.h	/^    int bias_match;$/;"	m	struct:layer
bias_match	Enclave/darknet_TA.h	/^    int bias_match;$/;"	m	struct:layer_TA
bias_updates	App/darknet.h	/^    float * bias_updates;$/;"	m	struct:layer
bias_updates	Enclave/darknet_TA.h	/^    float * bias_updates;$/;"	m	struct:layer_TA
bias_v	App/darknet.h	/^    float * bias_v;$/;"	m	struct:layer
bias_v	Enclave/darknet_TA.h	/^    float * bias_v;$/;"	m	struct:layer_TA
biases	App/darknet.h	/^    float * biases;$/;"	m	struct:layer
biases	Enclave/darknet_TA.h	/^    float * biases;$/;"	m	struct:layer_TA
bilinear_interpolate	App/image.cpp	/^static float bilinear_interpolate(image im, float x, float y, int c)$/;"	f	file:
binarize_cpu_TA	Enclave/Enclave.cpp	/^void binarize_cpu_TA(float *input, int n, float *binary)$/;"	f
binarize_image	App/image.cpp	/^image binarize_image(image im)$/;"	f
binarize_weights_TA	Enclave/Enclave.cpp	/^void binarize_weights_TA(float *weights, int n, int size, float *binary)$/;"	f
binary	App/darknet.h	/^    int binary;$/;"	m	struct:layer
binary	Enclave/darknet_TA.h	/^    int binary;$/;"	m	struct:layer_TA
binary_input	App/darknet.h	/^    float * binary_input;$/;"	m	struct:layer
binary_input	Enclave/darknet_TA.h	/^    float * binary_input;$/;"	m	struct:layer_TA
binary_weights	App/darknet.h	/^    float * binary_weights;$/;"	m	struct:layer
binary_weights	Enclave/darknet_TA.h	/^    float * binary_weights;$/;"	m	struct:layer_TA
bits_per_channel	App/stb_image.h	/^   int bits_per_channel;$/;"	m	struct:__anon28
blend_image	App/image.cpp	/^image blend_image(image fore, image back, float alpha)$/;"	f
blocky_image	App/image.cpp	/^void blocky_image(image im, int s)$/;"	f
border_image	App/image.cpp	/^image border_image(image a, int border)$/;"	f
bottom	App/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon23
bound_image	App/data.cpp	/^box bound_image(image im)$/;"	f
box	App/darknet.h	/^} box;$/;"	t	typeref:struct:__anon20
box_label	App/darknet.h	/^} box_label;$/;"	t	typeref:struct:__anon23
boxes	App/darknet.h	/^    box **boxes;$/;"	m	struct:__anon21
bpp	App/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon39
bswap_16	Enclave/aes-common.h	83;"	d
bswap_32	Enclave/aes-common.h	89;"	d
bswap_32	Enclave/aes-common.h	91;"	d
bswap_64	Enclave/aes-common.h	100;"	d
bswap_64	Enclave/aes-common.h	102;"	d
bubble_sort_top	Enclave/math_TA.cpp	/^void bubble_sort_top(float *arr, int len) {$/;"	f
buffer_start	App/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon26
buflen	App/stb_image.h	/^   int buflen;$/;"	m	struct:__anon26
burn_in	App/darknet.h	/^    int burn_in;$/;"	m	struct:network
burn_in	Enclave/darknet_TA.h	/^    int burn_in;$/;"	m	struct:network_TA
c	App/darknet.h	/^    int c;$/;"	m	struct:__anon19
c	App/darknet.h	/^    int h, w, c;$/;"	m	struct:network
c	App/darknet.h	/^    int h,w,c;$/;"	m	struct:layer
c	App/parser.cpp	/^    int c;$/;"	m	struct:size_params	file:
c	Enclave/darknet_TA.h	/^    int h, w, c;$/;"	m	struct:network_TA
c	Enclave/darknet_TA.h	/^    int h,w,c;$/;"	m	struct:layer_TA
c_cpu	App/darknet.h	/^    float *c_cpu;$/;"	m	struct:layer
c_cpu	Enclave/darknet_TA.h	/^    float *c_cpu;$/;"	m	struct:layer_TA
calc_network_cost	App/network.cpp	/^void calc_network_cost(network *netp)$/;"	f
calc_network_cost_enclave	Enclave/Enclave.cpp	/^void calc_network_cost_enclave()$/;"	f
cell_cpu	App/darknet.h	/^    float *cell_cpu;$/;"	m	struct:layer
cell_cpu	Enclave/darknet_TA.h	/^    float *cell_cpu;$/;"	m	struct:layer_TA
censor_image	App/image.cpp	/^void censor_image(image im, int dx, int dy, int w, int h)$/;"	f
center	App/darknet.h	/^    int center;$/;"	m	struct:load_args
center	App/darknet.h	/^    int center;$/;"	m	struct:network
center	Enclave/darknet_TA.h	/^    int center;$/;"	m	struct:network_TA
center_crop_image	App/image.cpp	/^image center_crop_image(image im, int w, int h)$/;"	f
change_leaves	App/tree.cpp	/^void change_leaves(tree *t, char *leaf_list)$/;"	f
channel	App/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon40
channel_order	App/stb_image.h	/^   int channel_order;$/;"	m	struct:__anon28
child	App/darknet.h	/^    int *child;$/;"	m	struct:__anon10
child	Enclave/darknet_TA.h	/^    int *child;$/;"	m	struct:__anon1
class_scale	App/darknet.h	/^    float class_scale;$/;"	m	struct:layer
class_scale	Enclave/darknet_TA.h	/^    float class_scale;$/;"	m	struct:layer_TA
classes	App/darknet.h	/^    int classes;$/;"	m	struct:detection
classes	App/darknet.h	/^    int classes;$/;"	m	struct:layer
classes	App/darknet.h	/^    int classes;$/;"	m	struct:load_args
classes	Enclave/darknet_TA.h	/^    int classes;$/;"	m	struct:layer_TA
classfix	App/darknet.h	/^    int classfix;$/;"	m	struct:layer
classfix	Enclave/darknet_TA.h	/^    int classfix;$/;"	m	struct:layer_TA
clip	App/darknet.h	/^    float clip;$/;"	m	struct:layer
clip	App/darknet.h	/^    float clip;$/;"	m	struct:network
clip	Enclave/darknet_TA.h	/^    float clip;$/;"	m	struct:layer_TA
clip	Enclave/darknet_TA.h	/^    float clip;$/;"	m	struct:network_TA
code	App/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon30
code_bits	App/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon31
code_buffer	App/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon31
code_buffer	App/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon35
codes	App/stb_image.h	/^   stbi__gif_lzw codes[8192];$/;"	m	struct:__anon42
coeff	App/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon31::__anon32
coeff_h	App/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon31::__anon32
coeff_w	App/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon31::__anon32
collapse_image_layers	App/image.cpp	/^image collapse_image_layers(image source, int border)$/;"	f
collapse_images_horz	App/image.cpp	/^image collapse_images_horz(image *ims, int n)$/;"	f
collapse_images_vert	App/image.cpp	/^image collapse_images_vert(image *ims, int n)$/;"	f
color_table	App/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon42
colors	App/image.cpp	/^float colors[6][3] = { {1,0,1}, {0,0,1},{0,1,1},{0,1,0},{1,1,0},{1,0,0} };$/;"	v
cols	App/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix
combine_cpu	App/darknet.h	/^    float * combine_cpu;$/;"	m	struct:layer
combine_cpu	Enclave/darknet_TA.h	/^    float * combine_cpu;$/;"	m	struct:layer_TA
combine_delta_cpu	App/darknet.h	/^    float * combine_delta_cpu;$/;"	m	struct:layer
combine_delta_cpu	Enclave/darknet_TA.h	/^    float * combine_delta_cpu;$/;"	m	struct:layer_TA
composite_3d	App/image.cpp	/^void composite_3d(char *f1, char *f2, char *out, int delta)$/;"	f
composite_image	App/image.cpp	/^void composite_image(image source, image dest, int dx, int dy)$/;"	f
concat	App/darknet.h	/^    float * concat;$/;"	m	struct:layer
concat	Enclave/darknet_TA.h	/^    float * concat;$/;"	m	struct:layer_TA
concat_data	App/data.cpp	/^data concat_data(data d1, data d2)$/;"	f
concat_datas	App/data.cpp	/^data concat_datas(data *d, int n)$/;"	f
concat_delta	App/darknet.h	/^    float * concat_delta;$/;"	m	struct:layer
concat_delta	Enclave/darknet_TA.h	/^    float * concat_delta;$/;"	m	struct:layer_TA
concat_matrix	App/data.cpp	/^matrix concat_matrix(matrix m1, matrix m2)$/;"	f
const_cpu	App/blas.cpp	/^void const_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
constrain	App/utils.cpp	/^float constrain(float min, float max, float a)$/;"	f
constrain_image	App/image.cpp	/^void constrain_image(image im)$/;"	f
constrain_int	App/utils.cpp	/^int constrain_int(int a, int min, int max)$/;"	f
context	App/stb_image_write.h	/^   void *context;$/;"	m	struct:__anon43
convolutional_layer	App/convolutional_layer.h	/^typedef layer convolutional_layer;$/;"	t
convolutional_out_height	App/parser.cpp	/^int convolutional_out_height(convolutional_layer l)$/;"	f
convolutional_out_width	App/parser.cpp	/^int convolutional_out_width(convolutional_layer l)$/;"	f
coord_scale	App/darknet.h	/^    float coord_scale;$/;"	m	struct:layer
coord_scale	Enclave/darknet_TA.h	/^    float coord_scale;$/;"	m	struct:layer_TA
coords	App/darknet.h	/^    int coords;$/;"	m	struct:layer
coords	App/darknet.h	/^    int coords;$/;"	m	struct:load_args
coords	Enclave/darknet_TA.h	/^    int coords;$/;"	m	struct:layer_TA
copy_cpu	App/blas.cpp	/^void copy_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_cpu_TA	Enclave/blas_TA.cpp	/^void copy_cpu_TA(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
copy_data	App/data.cpp	/^data copy_data(data d)$/;"	f
copy_image	App/image.cpp	/^image copy_image(image p)$/;"	f
copy_image_into	App/image.cpp	/^void copy_image_into(image src, image dest)$/;"	f
copy_matrix	App/matrix.cpp	/^matrix copy_matrix(matrix m)$/;"	f
copy_string	App/utils.cpp	/^char *copy_string(char *s)$/;"	f
correct_boxes	App/data.cpp	/^void correct_boxes(box_label *boxes, int n, float dx, float dy, float sx, float sy, int flip)$/;"	f
cost	App/darknet.h	/^    float * cost;$/;"	m	struct:layer
cost	App/darknet.h	/^    float *cost;$/;"	m	struct:network
cost	Enclave/darknet_TA.h	/^    float * cost;$/;"	m	struct:layer_TA
cost	Enclave/darknet_TA.h	/^    float *cost;$/;"	m	struct:network_TA
cost_layer	App/cost_layer.h	/^typedef layer cost_layer;$/;"	t
cost_type	App/darknet.h	/^    COST_TYPE cost_type;$/;"	m	struct:layer
cost_type	Enclave/darknet_TA.h	/^    COST_TYPE_TA cost_type;$/;"	m	struct:layer_TA
count_fields	App/utils.cpp	/^int count_fields(char *line)$/;"	f
count_global	App/parser.cpp	/^int count_global = 0;$/;"	v
counts	App/darknet.h	/^    int   * counts;$/;"	m	struct:layer
counts	Enclave/darknet_TA.h	/^    int   * counts;$/;"	m	struct:layer_TA
crop_image	App/image.cpp	/^image crop_image(image im, int dx, int dy, int w, int h)$/;"	f
csv_to_matrix	App/matrix.cpp	/^matrix csv_to_matrix(char *filename)$/;"	f
cur_x	App/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon42
cur_y	App/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon42
cweights	App/darknet.h	/^    char  * cweights;$/;"	m	struct:layer
cweights	Enclave/darknet_TA.h	/^    char  * cweights;$/;"	m	struct:layer_TA
d	App/darknet.h	/^    data *d;$/;"	m	struct:load_args
data	App/darknet.h	/^    float *data;$/;"	m	struct:__anon19
data	App/darknet.h	/^} data;$/;"	t	typeref:struct:__anon21
data	App/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon31::__anon32
data_type	App/darknet.h	/^} data_type;$/;"	t	typeref:enum:__anon22
dc_cpu	App/darknet.h	/^    float *dc_cpu; $/;"	m	struct:layer
dc_cpu	Enclave/darknet_TA.h	/^    float *dc_cpu;$/;"	m	struct:layer_TA
dc_pred	App/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon31::__anon32
dct_bfly32o	App/stb_image.h	2302;"	d
dct_bfly32o	App/stb_image.h	2436;"	d
dct_bfly32o	App/stb_image.h	2488;"	d
dct_bfly32o	App/stb_image.h	2646;"	d
dct_const	App/stb_image.h	2274;"	d
dct_const	App/stb_image.h	2431;"	d
dct_interleave16	App/stb_image.h	2319;"	d
dct_interleave16	App/stb_image.h	2438;"	d
dct_interleave8	App/stb_image.h	2313;"	d
dct_interleave8	App/stb_image.h	2437;"	d
dct_long_mac	App/stb_image.h	2469;"	d
dct_long_mac	App/stb_image.h	2642;"	d
dct_long_mul	App/stb_image.h	2465;"	d
dct_long_mul	App/stb_image.h	2641;"	d
dct_pass	App/stb_image.h	2324;"	d
dct_pass	App/stb_image.h	2439;"	d
dct_pass	App/stb_image.h	2496;"	d
dct_pass	App/stb_image.h	2647;"	d
dct_rot	App/stb_image.h	2278;"	d
dct_rot	App/stb_image.h	2432;"	d
dct_trn16	App/stb_image.h	2556;"	d
dct_trn16	App/stb_image.h	2578;"	d
dct_trn32	App/stb_image.h	2557;"	d
dct_trn32	App/stb_image.h	2579;"	d
dct_trn64	App/stb_image.h	2558;"	d
dct_trn64	App/stb_image.h	2580;"	d
dct_trn8_16	App/stb_image.h	2602;"	d
dct_trn8_16	App/stb_image.h	2637;"	d
dct_trn8_32	App/stb_image.h	2603;"	d
dct_trn8_32	App/stb_image.h	2638;"	d
dct_trn8_8	App/stb_image.h	2601;"	d
dct_trn8_8	App/stb_image.h	2636;"	d
dct_wadd	App/stb_image.h	2292;"	d
dct_wadd	App/stb_image.h	2434;"	d
dct_wadd	App/stb_image.h	2478;"	d
dct_wadd	App/stb_image.h	2644;"	d
dct_widen	App/stb_image.h	2287;"	d
dct_widen	App/stb_image.h	2433;"	d
dct_widen	App/stb_image.h	2473;"	d
dct_widen	App/stb_image.h	2643;"	d
dct_wsub	App/stb_image.h	2297;"	d
dct_wsub	App/stb_image.h	2435;"	d
dct_wsub	App/stb_image.h	2483;"	d
dct_wsub	App/stb_image.h	2645;"	d
debug_num	App/parser.cpp	/^int debug_num = 0;$/;"	v
decay	App/darknet.h	/^    float decay;$/;"	m	struct:__anon16
decay	App/darknet.h	/^    float decay;$/;"	m	struct:network
decay	Enclave/darknet_TA.h	/^    float decay;$/;"	m	struct:__anon5
decay	Enclave/darknet_TA.h	/^    float decay;$/;"	m	struct:network_TA
decrypt_data	Enclave/Enclave.cpp	/^sgx_status_t decrypt_data(uint8_t *encrypt_In, size_t len, uint8_t *decrypt_Out, size_t lenOut)$/;"	f
deinter_cpu	App/blas.cpp	/^void deinter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
del_arg	App/utils.cpp	/^void del_arg(int argc, char **argv, int index)$/;"	f
delay	App/stb_image.h	/^   int delay;$/;"	m	struct:__anon42
delta	App/darknet.h	/^    float * delta;$/;"	m	struct:layer
delta	App/darknet.h	/^    float *delta;$/;"	m	struct:network
delta	App/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon30
delta	Enclave/darknet_TA.h	/^    float * delta;$/;"	m	struct:layer_TA
delta	Enclave/darknet_TA.h	/^    float *delta;$/;"	m	struct:network_TA
depth	App/stb_image.h	/^   int depth;$/;"	m	struct:__anon37
dequant	App/stb_image.h	/^   stbi__uint16 dequant[4][64];$/;"	m	struct:__anon31
detection	App/darknet.h	/^typedef struct detection{$/;"	s
detection	App/darknet.h	/^} detection;$/;"	t	typeref:struct:detection
dh_cpu	App/darknet.h	/^    float *dh_cpu;$/;"	m	struct:layer
dh_cpu	Enclave/darknet_TA.h	/^    float *dh_cpu;$/;"	m	struct:layer_TA
dist_array	App/utils.cpp	/^float dist_array(float *a, float *b, int n, int sub)$/;"	f
distance_from_edge	App/data.h	/^static inline float distance_from_edge(int x, int max)$/;"	f
distort_image	App/image.cpp	/^void distort_image(image im, float hue, float sat, float val)$/;"	f
dontload	App/darknet.h	/^    int dontload;$/;"	m	struct:layer
dontload	Enclave/darknet_TA.h	/^    int dontload;$/;"	m	struct:layer_TA
dontloadscales	App/darknet.h	/^    int dontloadscales;$/;"	m	struct:layer
dontloadscales	Enclave/darknet_TA.h	/^    int dontloadscales;$/;"	m	struct:layer_TA
dontsave	App/darknet.h	/^    int dontsave;$/;"	m	struct:layer
dontsave	Enclave/darknet_TA.h	/^    int dontsave;$/;"	m	struct:layer_TA
dot	App/darknet.h	/^    float dot;$/;"	m	struct:layer
dot	Enclave/darknet_TA.h	/^    float dot;$/;"	m	struct:layer_TA
dot_cpu	App/blas.cpp	/^float dot_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
draw_bbox	App/image.cpp	/^void draw_bbox(image a, box bbox, int w, float r, float g, float b)$/;"	f
draw_box	App/image.cpp	/^void draw_box(image a, int x1, int y1, int x2, int y2, float r, float g, float b)$/;"	f
draw_box_width	App/image.cpp	/^void draw_box_width(image a, int x1, int y1, int x2, int y2, int w, float r, float g, float b)$/;"	f
draw_detections	App/image.cpp	/^void draw_detections(image im, detection *dets, int num, float thresh, char **names, image **alphabet, int classes)$/;"	f
draw_label	App/image.cpp	/^void draw_label(image a, int r, int c, image label, const float *rgb)$/;"	f
dropout_layer	App/dropout_layer.h	/^typedef layer dropout_layer;$/;"	t
dx	App/darknet.h	/^    float dx;$/;"	m	struct:__anon18
dy	App/darknet.h	/^    float dy;$/;"	m	struct:__anon18
e	Enclave/math_TA.h	6;"	d
ecall_addr	Enclave/Enclave_t.c	/^	struct {void* ecall_addr; uint8_t is_priv; uint8_t is_switchless;} ecall_table[15];$/;"	m	struct:__anon7::__anon8	file:
ecall_allocate_workspace	App/Enclave_u.c	/^sgx_status_t ecall_allocate_workspace(sgx_enclave_id_t eid, int* retval, int workspace_size)$/;"	f
ecall_allocate_workspace	Enclave/Enclave.cpp	/^int ecall_allocate_workspace(int workspace_size)$/;"	f
ecall_attest_session_token	App/Enclave_u.c	/^sgx_status_t ecall_attest_session_token(sgx_enclave_id_t eid, int* retval, int session_token, char* attestation_buffer, int attest_size, uint8_t* tag_buffer, int l_tag)$/;"	f
ecall_attest_session_token	Enclave/Enclave.cpp	/^int ecall_attest_session_token(int session_token, char *attestation_buffer, int attest_size, uint8_t *tag_buffer, int l_tag)$/;"	f
ecall_decrypt	App/Enclave_u.c	/^sgx_status_t ecall_decrypt(sgx_enclave_id_t eid, int* retval, uint32_t* encrypt_input, uint32_t input_length, uint32_t* plaintext_output, uint32_t output_length, uint8_t* key, uint32_t key_size)$/;"	f
ecall_decrypt	Enclave/Enclave.cpp	/^int ecall_decrypt(uint32_t *encrypt_input, uint32_t input_length, uint32_t *plaintext_output, uint32_t output_length, uint8_t *key, uint32_t key_size)$/;"	f
ecall_encrypt	App/Enclave_u.c	/^sgx_status_t ecall_encrypt(sgx_enclave_id_t eid, int* retval, uint32_t* plaintext_input, uint32_t input_length, uint32_t* encrypted_output, uint32_t output_length, uint8_t* key, uint32_t key_size)$/;"	f
ecall_encrypt	Enclave/Enclave.cpp	/^int ecall_encrypt(uint32_t *plaintext_input, uint32_t input_length, uint32_t *encrypted_output, uint32_t output_length, uint8_t *key, uint32_t key_size)$/;"	f
ecall_forward_network	App/Enclave_u.c	/^sgx_status_t ecall_forward_network(sgx_enclave_id_t eid, int* retval, float* net_input, int l_inputs, uint8_t* tag_buffer, int l_tag, int net_train)$/;"	f
ecall_forward_network	Enclave/Enclave.cpp	/^int ecall_forward_network(float *net_input, int l_inputs, uint8_t *tag_buffer, int l_tag, int net_train)$/;"	f
ecall_make_avgpool_layer	App/Enclave_u.c	/^sgx_status_t ecall_make_avgpool_layer(sgx_enclave_id_t eid, int* retval, int batch, int w, int h, int c)$/;"	f
ecall_make_avgpool_layer	Enclave/Enclave.cpp	/^int ecall_make_avgpool_layer(int batch, int w, int h, int c)$/;"	f
ecall_make_connected_layer	App/Enclave_u.c	/^sgx_status_t ecall_make_connected_layer(sgx_enclave_id_t eid, int* retval, int batch, int inputs, int outputs, char* activation_s, int acti_length, int batch_normalize, int adam)$/;"	f
ecall_make_connected_layer	Enclave/Enclave.cpp	/^int ecall_make_connected_layer(int batch, int inputs, int outputs, char *activation_s, int acti_length, int batch_normalize, int adam)$/;"	f
ecall_make_convolutional_layer	App/Enclave_u.c	/^sgx_status_t ecall_make_convolutional_layer(sgx_enclave_id_t eid, int* retval, int batch, int h, int w, int c, int n, int groups, int size, int stride, int padding, char* activation_s, int acti_length, int batch_normalize, int binary, int xnor, int adam, int flipped, float dot)$/;"	f
ecall_make_convolutional_layer	Enclave/Enclave.cpp	/^int ecall_make_convolutional_layer(int batch, int h, int w, int c, int n, int groups, int size, int stride, int padding, char *activation_s, int acti_length, int batch_normalize, int binary, int xnor, int adam, int flipped, float dot)$/;"	f
ecall_make_cost_layer	App/Enclave_u.c	/^sgx_status_t ecall_make_cost_layer(sgx_enclave_id_t eid, int* retval, int batch, int inputs, char* cost_type, int cost_size, float scale, float ratio, float noobject_scale, float thresh)$/;"	f
ecall_make_cost_layer	Enclave/Enclave.cpp	/^int ecall_make_cost_layer(int batch, int inputs, char *cost_type, int cost_size, float scale, float ratio, float noobject_scale, float thresh)$/;"	f
ecall_make_dropout_layer	App/Enclave_u.c	/^sgx_status_t ecall_make_dropout_layer(sgx_enclave_id_t eid, int* retval, int batch, int inputs, float probability, int w, int h, int c, float* net_prev_output, int prev_size, float* net_prev_delta, int delta_size)$/;"	f
ecall_make_dropout_layer	Enclave/Enclave.cpp	/^int ecall_make_dropout_layer(int batch, int inputs, float probability, int w, int h, int c, float *net_prev_output, int prev_size, float *net_prev_delta, int delta_size)$/;"	f
ecall_make_maxpool_layer	App/Enclave_u.c	/^sgx_status_t ecall_make_maxpool_layer(sgx_enclave_id_t eid, int* retval, int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
ecall_make_maxpool_layer	Enclave/Enclave.cpp	/^int ecall_make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)$/;"	f
ecall_make_network	App/Enclave_u.c	/^sgx_status_t ecall_make_network(sgx_enclave_id_t eid, int* retval, int n, float learning_rate, float momentum, float decay, int time_steps, int notruth, int batch, int subdivisions, int random, int adam, float B1, float B2, float eps, int h, int w, int c, int inputs, int max_crop, int min_crop, float max_ratio, float min_ratio, int center, float clip, float angle, float aspect, float saturation, float exposure, float hue, int burn_in, float power, int max_batches, int start_index)$/;"	f
ecall_make_network	Enclave/Enclave.cpp	/^int ecall_make_network(int n, float learning_rate, float momentum, float decay, int time_steps, int notruth, int batch, int subdivisions, int random, int adam, float B1, float B2, float eps, int h, int w, int c, int inputs, int max_crop, int min_crop, float max_ratio, float min_ratio, int center, float clip, float angle, float aspect, float saturation, float exposure, float hue, int burn_in, float power, int max_batches, int start_index)$/;"	f
ecall_make_softmax_layer	App/Enclave_u.c	/^sgx_status_t ecall_make_softmax_layer(sgx_enclave_id_t eid, int* retval, int batch, int inputs, int groups, float temperature, int w, int h, int c, int spatial, int noloss)$/;"	f
ecall_make_softmax_layer	Enclave/Enclave.cpp	/^int ecall_make_softmax_layer(int batch, int inputs, int groups, float temperature, int w, int h, int c, int spatial, int noloss)$/;"	f
ecall_net_output_return	App/Enclave_u.c	/^sgx_status_t ecall_net_output_return(sgx_enclave_id_t eid, int* retval, float* net_output, int length, uint8_t* tag_buffer, int tag_length)$/;"	f
ecall_net_output_return	Enclave/Enclave.cpp	/^int ecall_net_output_return(float *net_output, int length, uint8_t *tag_buffer, int tag_length)$/;"	f
ecall_table	Enclave/Enclave_t.c	/^	struct {void* ecall_addr; uint8_t is_priv; uint8_t is_switchless;} ecall_table[15];$/;"	m	struct:__anon7	typeref:struct:__anon7::__anon8	file:
ecall_transfer_weights	App/Enclave_u.c	/^sgx_status_t ecall_transfer_weights(sgx_enclave_id_t eid, int* retval, float* vec, int length, int layer_i, char type, int additional)$/;"	f
ecall_transfer_weights	Enclave/Enclave.cpp	/^int ecall_transfer_weights(float *vec, int length, int layer_i, char type, int additional)$/;"	f
eflags	App/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon42
elu_activate	App/activations.h	/^static inline float elu_activate(float x){return (x >= 0)*x + (x < 0)*(exp(x)-1);}$/;"	f
elu_activate_TA	Enclave/activations_TA.h	/^static inline float elu_activate_TA(float x){return (x >= 0)*x + (x < 0)*(ta_exp(x)-1);}$/;"	f
elu_gradient	App/activations.h	/^static inline float elu_gradient(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
elu_gradient_TA	Enclave/activations_TA.h	/^static inline float elu_gradient_TA(float x){return (x >= 0) + (x < 0)*(x + 1);}$/;"	f
embed_image	App/image.cpp	/^void embed_image(image source, image dest, int dx, int dy)$/;"	f
entry_table	Enclave/Enclave_t.c	/^	uint8_t entry_table[1][15];$/;"	m	struct:__anon9	file:
eob_run	App/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon31
eof	App/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon25
epoch	App/darknet.h	/^    float epoch;$/;"	m	struct:network
epoch	Enclave/darknet_TA.h	/^    float epoch;$/;"	m	struct:network_TA
eps	App/darknet.h	/^    float eps;$/;"	m	struct:__anon16
eps	App/darknet.h	/^    float eps;$/;"	m	struct:network
eps	Enclave/darknet_TA.h	/^    float eps;$/;"	m	struct:__anon5
eps	Enclave/darknet_TA.h	/^    float eps;$/;"	m	struct:network_TA
err_sum	Enclave/Enclave.cpp	/^float err_sum = 0;$/;"	v
error	App/utils.cpp	/^void error(const char *s)$/;"	f
exclusive_image	App/data.cpp	/^void exclusive_image(image src)$/;"	f
expanded	App/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon37
exposure	App/darknet.h	/^    float exposure;$/;"	m	struct:layer
exposure	App/darknet.h	/^    float exposure;$/;"	m	struct:load_args
exposure	App/darknet.h	/^    float exposure;$/;"	m	struct:network
exposure	Enclave/darknet_TA.h	/^    float exposure;$/;"	m	struct:layer_TA
exposure	Enclave/darknet_TA.h	/^    float exposure;$/;"	m	struct:network_TA
exposure_image	App/image.cpp	/^void exposure_image(image im, float sat)$/;"	f
extra	App/darknet.h	/^    int extra;$/;"	m	struct:layer
extra	Enclave/darknet_TA.h	/^    int extra;$/;"	m	struct:layer_TA
f_cpu	App/darknet.h	/^    float *f_cpu;$/;"	m	struct:layer
f_cpu	Enclave/darknet_TA.h	/^    float *f_cpu;$/;"	m	struct:layer_TA
fast	App/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon34
fast	App/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon30
fast_ac	App/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon31
fgetl	App/utils.cpp	/^char *fgetl(FILE *fp)$/;"	f
file_error	App/utils.cpp	/^void file_error(char *s)$/;"	f
fill_cpu	App/blas.cpp	/^void fill_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_cpu_TA	Enclave/blas_TA.cpp	/^void fill_cpu_TA(int N, float ALPHA, float *X, int INCX)$/;"	f
fill_hierarchy	App/data.cpp	/^void fill_hierarchy(float *truth, int k, tree *hierarchy)$/;"	f
fill_image	App/image.cpp	/^void fill_image(image m, float s)$/;"	f
fill_truth	App/data.cpp	/^void fill_truth(char *path, char **labels, int k, float *truth)$/;"	f
fill_truth_captcha	App/data.cpp	/^void fill_truth_captcha(char *path, int n, float *truth)$/;"	f
fill_truth_detection	App/data.cpp	/^void fill_truth_detection(char *path, int num_boxes, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_iseg	App/data.cpp	/^void fill_truth_iseg(char *path, int num_boxes, float *truth, int classes, int w, int h, augment_args aug, int flip, int mw, int mh)$/;"	f
fill_truth_mask	App/data.cpp	/^void fill_truth_mask(char *path, int num_boxes, float *truth, int classes, int w, int h, augment_args aug, int flip, int mw, int mh)$/;"	f
fill_truth_region	App/data.cpp	/^void fill_truth_region(char *path, float *truth, int classes, int num_boxes, int flip, float dx, float dy, float sx, float sy)$/;"	f
fill_truth_swag	App/data.cpp	/^void fill_truth_swag(char *path, float *truth, int classes, int flip, float dx, float dy, float sx, float sy)$/;"	f
find_arg	App/utils.cpp	/^int find_arg(int argc, char* argv[], char *arg)$/;"	f
find_char_arg	App/utils.cpp	/^char *find_char_arg(int argc, char **argv, char *arg, char *def)$/;"	f
find_float_arg	App/utils.cpp	/^float find_float_arg(int argc, char **argv, char *arg, float def)$/;"	f
find_int_arg	App/utils.cpp	/^int find_int_arg(int argc, char **argv, char *arg, int def)$/;"	f
find_replace	App/utils.cpp	/^void find_replace(char *str, char *orig, char *rep, char *output)$/;"	f
find_replace_paths	App/data.cpp	/^char **find_replace_paths(char **paths, int n, char *find, char *replace)$/;"	f
first	App/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon41
first_aim_money	Enclave/math_TA.h	9;"	d
first_row_filter	App/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	App/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon34
firstsymbol	App/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon34
flags	App/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon42
flatten	App/blas.cpp	/^void flatten(float *x, int size, int layers, int batch, int forward)$/;"	f
flatten	App/darknet.h	/^    int flatten;$/;"	m	struct:layer
flatten	Enclave/darknet_TA.h	/^    int flatten;$/;"	m	struct:layer_TA
flip	App/darknet.h	/^    int flip;$/;"	m	struct:layer
flip	Enclave/darknet_TA.h	/^    int flip;$/;"	m	struct:layer_TA
flip_image	App/image.cpp	/^void flip_image(image a)$/;"	f
flipped	App/darknet.h	/^    int flipped;$/;"	m	struct:layer
flipped	Enclave/darknet_TA.h	/^    int flipped;$/;"	m	struct:layer_TA
float_to_image	App/image.cpp	/^image float_to_image(int w, int h, int c, float *data)$/;"	f
focus	App/darknet.h	/^    float focus;$/;"	m	struct:layer
focus	Enclave/darknet_TA.h	/^    float focus;$/;"	m	struct:layer_TA
font	data/darknet/labels/make_labels.py	/^font = 'futura-normal'$/;"	v
forced	App/darknet.h	/^    int forced;$/;"	m	struct:layer
forced	Enclave/darknet_TA.h	/^    int forced;$/;"	m	struct:layer_TA
forgot_delta	App/darknet.h	/^    float * forgot_delta;$/;"	m	struct:layer
forgot_delta	Enclave/darknet_TA.h	/^    float * forgot_delta;$/;"	m	struct:layer_TA
forgot_state	App/darknet.h	/^    float * forgot_state;$/;"	m	struct:layer
forgot_state	Enclave/darknet_TA.h	/^    float * forgot_state;$/;"	m	struct:layer_TA
forward	App/darknet.h	/^    void (*forward)   (struct layer, struct network);$/;"	m	struct:layer
forward_TA	App/darknet.h	/^    void (*forward_TA)   (struct layer, float* net_input, int net_train);$/;"	m	struct:layer
forward_TA	Enclave/darknet_TA.h	/^    void (*forward_TA)   (struct layer_TA, struct network_TA);$/;"	m	struct:layer_TA
forward_avgpool_layer_enclave	Enclave/Enclave.cpp	/^void forward_avgpool_layer_enclave(const layer_TA l, network_TA net)$/;"	f
forward_batchnorm_layer_enclave	Enclave/Enclave.cpp	/^void forward_batchnorm_layer_enclave(layer_TA l, network_TA net)$/;"	f
forward_connected_layer_enclave	Enclave/Enclave.cpp	/^void forward_connected_layer_enclave(layer_TA l, network_TA net)$/;"	f
forward_convolutional_layer_enclave	Enclave/Enclave.cpp	/^void forward_convolutional_layer_enclave(layer_TA l, network_TA net)$/;"	f
forward_cost_layer_enclave	Enclave/Enclave.cpp	/^void forward_cost_layer_enclave(layer_TA l, network_TA net)$/;"	f
forward_dropout_layer_enclave	Enclave/Enclave.cpp	/^void forward_dropout_layer_enclave(layer_TA l, network_TA net)$/;"	f
forward_gpu	App/darknet.h	/^    void (*forward_gpu)   (struct layer, struct network);$/;"	m	struct:layer
forward_maxpool_layer_enclave	Enclave/Enclave.cpp	/^void forward_maxpool_layer_enclave(const layer_TA l, network_TA net)$/;"	f
forward_network	App/network.cpp	/^void forward_network(network *netp, float *inputs)$/;"	f
forward_softmax_layer_enclave	Enclave/Enclave.cpp	/^void forward_softmax_layer_enclave(const layer_TA l, network_TA net)$/;"	f
free_data	App/data.cpp	/^void free_data(data d)$/;"	f
free_image	App/image.cpp	/^void free_image(image m)$/;"	f
free_layer	App/network.cpp	/^void free_layer(layer l)$/;"	f
free_list	App/list.cpp	/^void free_list(list *l)$/;"	f
free_list_contents	App/list.cpp	/^void free_list_contents(list *l)$/;"	f
free_matrix	App/matrix.cpp	/^void free_matrix(matrix m)$/;"	f
free_network	App/network.cpp	/^void free_network(network *net)$/;"	f
free_node	App/list.cpp	/^void free_node(node *n)$/;"	f
free_ptrs	App/utils.cpp	/^void free_ptrs(void **ptrs, int n)$/;"	f
free_section	App/parser.cpp	/^void free_section(section *s)$/;"	f
front	App/darknet.h	/^    node *front;$/;"	m	struct:list
func	App/stb_image_write.h	/^   stbi_write_func *func;$/;"	m	struct:__anon43
gGlobalBufferCounter	Enclave/Enclave.cpp	/^float gGlobalBufferCounter;$/;"	v
g_cpu	App/darknet.h	/^    float *g_cpu;$/;"	m	struct:layer
g_cpu	Enclave/darknet_TA.h	/^    float *g_cpu;$/;"	m	struct:layer_TA
g_dyn_entry_table	Enclave/Enclave_t.c	/^} g_dyn_entry_table = {$/;"	v	typeref:struct:__anon9
g_ecall_table	Enclave/Enclave_t.c	/^} g_ecall_table = {$/;"	v	typeref:struct:__anon7
gamma	App/darknet.h	/^    float gamma;$/;"	m	struct:network
gamma	Enclave/darknet_TA.h	/^    float gamma;$/;"	m	struct:network_TA
gemm_TA	Enclave/gemm_TA.cpp	/^void gemm_TA(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_cpu_TA	Enclave/gemm_TA.cpp	/^void gemm_cpu_TA(int TA, int TB, int M, int N, int K, float ALPHA,$/;"	f
gemm_nn_TA	Enclave/gemm_TA.cpp	/^void gemm_nn_TA(int M, int N, int K, float ALPHA,$/;"	f
gemm_nt_TA	Enclave/gemm_TA.cpp	/^void gemm_nt_TA(int M, int N, int K, float ALPHA,$/;"	f
gemm_tn_TA	Enclave/gemm_TA.cpp	/^void gemm_tn_TA(int M, int N, int K, float ALPHA,$/;"	f
gemm_tt_TA	Enclave/gemm_TA.cpp	/^void gemm_tt_TA(int M, int N, int K, float ALPHA,$/;"	f
getDecStr	Enclave/Enclave.cpp	/^void getDecStr(char* str, uint8_t len, uint8_t total_count, uint32_t val)$/;"	f
getSBoxInvert	Enclave/aes_TA.cpp	149;"	d	file:
getSBoxValue	Enclave/aes_TA.cpp	142;"	d	file:
get_activation	App/activations.cpp	/^ACTIVATION get_activation(char *s)$/;"	f
get_activation_TA	Enclave/activations_TA.cpp	/^ACTIVATION_TA get_activation_TA(char *s)$/;"	f
get_activation_string	App/activations.cpp	/^char *get_activation_string(ACTIVATION a)$/;"	f
get_activation_string_TA	Enclave/activations_TA.cpp	/^char *get_activation_string_TA(ACTIVATION_TA a)$/;"	f
get_base_args	App/network.cpp	/^load_args get_base_args(network *net)$/;"	f
get_color	App/image.cpp	/^float get_color(int c, int x, int max)$/;"	f
get_cost_string	App/parser.cpp	/^char *get_cost_string(COST_TYPE a)$/;"	f
get_cost_type	App/parser.cpp	/^COST_TYPE get_cost_type(char *s)$/;"	f
get_cost_type_TA	Enclave/Enclave.cpp	/^COST_TYPE_TA get_cost_type_TA(char *s)$/;"	f
get_data_part	App/data.cpp	/^data get_data_part(data d, int part, int total)$/;"	f
get_hierarchy_probability	App/tree.cpp	/^float get_hierarchy_probability(float *x, tree *hier, int c, int stride)$/;"	f
get_image_layer	App/image.cpp	/^image get_image_layer(image m, int l)$/;"	f
get_label	App/image.cpp	/^image get_label(image **characters, char *string, int size)$/;"	f
get_labels	App/data.cpp	/^char **get_labels(char *filename)$/;"	f
get_layer_string	App/network.cpp	/^char *get_layer_string(LAYER_TYPE a)$/;"	f
get_network_output_layer	App/network.cpp	/^layer get_network_output_layer(network *net)$/;"	f
get_next_batch	App/data.cpp	/^void get_next_batch(data d, int n, int offset, float *X, float *y)$/;"	f
get_paths	App/data.cpp	/^list *get_paths(char *filename)$/;"	f
get_pixel	App/image.cpp	/^static float get_pixel(image m, int x, int y, int c)$/;"	f	file:
get_pixel_extend	App/image.cpp	/^static float get_pixel_extend(image m, int x, int y, int c)$/;"	f	file:
get_policy	App/parser.cpp	/^learning_rate_policy get_policy(char *s)$/;"	f
get_random_batch	App/data.cpp	/^void get_random_batch(data d, int n, float *X, float *y)$/;"	f
get_random_data	App/data.cpp	/^data get_random_data(data d, int num)$/;"	f
get_random_paths	App/data.cpp	/^char **get_random_paths(char **paths, int n, int m)$/;"	f
get_random_paths_indexes	App/data.cpp	/^char **get_random_paths_indexes(char **paths, int n, int m, int *indexes)$/;"	f
get_segmentation_image	App/data.cpp	/^image get_segmentation_image(char *path, int w, int h, int classes)$/;"	f
get_segmentation_image2	App/data.cpp	/^image get_segmentation_image2(char *path, int w, int h, int classes)$/;"	f
get_workspace_size	App/parser.cpp	/^static size_t get_workspace_size(layer l){$/;"	f	file:
gf_mult	Enclave/aes-gcm.cpp	/^static void gf_mult(const aes_uchar *x, const aes_uchar *y, aes_uchar *z)$/;"	f	file:
ghash	Enclave/aes-gcm.cpp	/^static void ghash(const aes_uchar *h, const aes_uchar *x, size_t xlen, aes_uchar *y)$/;"	f	file:
ghash_start	Enclave/aes-gcm.cpp	/^static void ghash_start(aes_uchar *y)$/;"	f	file:
ghost_image	App/image.cpp	/^void ghost_image(image source, image dest, int dx, int dy)$/;"	f
global_dp	App/parser.cpp	/^int global_dp = 0;$/;"	v
global_eid	App/App.cpp	/^sgx_enclave_id_t global_eid;$/;"	v
global_start_index	App/App.cpp	/^int global_start_index;$/;"	v
gpu_index	App/darknet.h	/^    int gpu_index;$/;"	m	struct:network
gpu_index	Enclave/darknet_TA.h	/^    int gpu_index;$/;"	m	struct:network_TA
gradient	App/activations.cpp	/^float gradient(float x, ACTIVATION a)$/;"	f
gradient_TA	Enclave/activations_TA.cpp	/^float gradient_TA(float x, ACTIVATION_TA a)$/;"	f
gradient_array	App/activations.cpp	/^void gradient_array(const float *x, const int n, const ACTIVATION a, float *delta)$/;"	f
gradient_array_TA	Enclave/activations_TA.cpp	/^float * gradient_array_TA(const float *x, const int n, const ACTIVATION_TA a, float *delta)$/;"	f
grayscale_image	App/image.cpp	/^image grayscale_image(image im)$/;"	f
grayscale_image_3c	App/image.cpp	/^void grayscale_image_3c(image im)$/;"	f
group	App/darknet.h	/^    int *group;$/;"	m	struct:__anon10
group	Enclave/darknet_TA.h	/^    int *group;$/;"	m	struct:__anon1
group_offset	App/darknet.h	/^    int *group_offset;$/;"	m	struct:__anon10
group_offset	Enclave/darknet_TA.h	/^    int *group_offset;$/;"	m	struct:__anon1
group_size	App/darknet.h	/^    int *group_size;$/;"	m	struct:__anon10
group_size	Enclave/darknet_TA.h	/^    int *group_size;$/;"	m	struct:__anon1
groups	App/darknet.h	/^    int groups;$/;"	m	struct:__anon10
groups	App/darknet.h	/^    int groups;$/;"	m	struct:layer
groups	Enclave/darknet_TA.h	/^    int groups;$/;"	m	struct:__anon1
groups	Enclave/darknet_TA.h	/^    int groups;$/;"	m	struct:layer_TA
h	App/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon20
h	App/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon23
h	App/darknet.h	/^    int h, w, c;$/;"	m	struct:network
h	App/darknet.h	/^    int h,w,c;$/;"	m	struct:layer
h	App/darknet.h	/^    int h;$/;"	m	struct:__anon18
h	App/darknet.h	/^    int h;$/;"	m	struct:__anon19
h	App/darknet.h	/^    int h;$/;"	m	struct:load_args
h	App/darknet.h	/^    int w, h;$/;"	m	struct:__anon21
h	App/parser.cpp	/^    int h;$/;"	m	struct:size_params	file:
h	App/stb_image.h	/^      int h,v;$/;"	m	struct:__anon31::__anon32
h	App/stb_image.h	/^   int w,h;$/;"	m	struct:__anon42
h	Enclave/darknet_TA.h	/^    int h, w, c;$/;"	m	struct:network_TA
h	Enclave/darknet_TA.h	/^    int h,w,c;$/;"	m	struct:layer_TA
h2	App/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon31::__anon32
h_cpu	App/darknet.h	/^    float *h_cpu;$/;"	m	struct:layer
h_cpu	Enclave/darknet_TA.h	/^    float *h_cpu;$/;"	m	struct:layer_TA
ha	App/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon31::__anon32
hardtan_activate	App/activations.h	/^static inline float hardtan_activate(float x)$/;"	f
hardtan_activate_TA	Enclave/activations_TA.h	/^static inline float hardtan_activate_TA(float x)$/;"	f
hardtan_gradient	App/activations.h	/^static inline float hardtan_gradient(float x)$/;"	f
hardtan_gradient_TA	Enclave/activations_TA.h	/^static inline float hardtan_gradient_TA(float x)$/;"	f
hd	App/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon31::__anon32
hh_cpu	App/darknet.h	/^    float *hh_cpu;$/;"	m	struct:layer
hh_cpu	Enclave/darknet_TA.h	/^    float *hh_cpu;$/;"	m	struct:layer_TA
hidden	App/darknet.h	/^    int hidden;$/;"	m	struct:layer
hidden	Enclave/darknet_TA.h	/^    int hidden;$/;"	m	struct:layer_TA
hierarchy	App/darknet.h	/^    tree *hierarchy;$/;"	m	struct:load_args
hierarchy	App/darknet.h	/^    tree *hierarchy;$/;"	m	struct:network
hierarchy	Enclave/darknet_TA.h	/^    tree_TA *hierarchy;$/;"	m	struct:network_TA
hierarchy_predictions	App/tree.cpp	/^void hierarchy_predictions(float *predictions, int n, tree *hier, int only_leaves, int stride)$/;"	f
hierarchy_top_prediction	App/tree.cpp	/^int hierarchy_top_prediction(float *predictions, tree *hier, float thresh, int stride)$/;"	f
history	App/stb_image.h	/^   stbi_uc *history; $/;"	m	struct:__anon42
hold_out_matrix	App/matrix.cpp	/^matrix hold_out_matrix(matrix *m, int n)$/;"	f
hs	App/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon33
hsv_to_rgb	App/image.cpp	/^void hsv_to_rgb(image im)$/;"	f
hsz	App/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon39
hue	App/darknet.h	/^    float hue;$/;"	m	struct:load_args
hue	App/darknet.h	/^    float hue;$/;"	m	struct:network
hue	Enclave/darknet_TA.h	/^    float hue;$/;"	m	struct:network_TA
hue_image	App/image.cpp	/^void hue_image(image im, float hue)$/;"	f
huff_ac	App/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon31
huff_dc	App/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon31
i_cpu	App/darknet.h	/^    float *i_cpu;$/;"	m	struct:layer
i_cpu	Enclave/darknet_TA.h	/^    float *i_cpu;$/;"	m	struct:layer_TA
id	App/darknet.h	/^    int id;$/;"	m	struct:__anon23
id	App/stb_image.h	/^      int id;$/;"	m	struct:__anon31::__anon32
idata	App/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon37
idct_block_kernel	App/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon31
ignore_thresh	App/darknet.h	/^    float ignore_thresh;$/;"	m	struct:layer
ignore_thresh	Enclave/darknet_TA.h	/^    float ignore_thresh;$/;"	m	struct:layer_TA
im	App/darknet.h	/^    image *im;$/;"	m	struct:load_args
im2col_cpu_TA	Enclave/im2col_TA.cpp	/^void im2col_cpu_TA(float* data_im,$/;"	f
im2col_get_pixel_TA	Enclave/im2col_TA.cpp	/^float im2col_get_pixel_TA(float *im, int height, int width, int channels,$/;"	f
image	App/darknet.h	/^} image;$/;"	t	typeref:struct:__anon19
image_distance	App/image.cpp	/^image image_distance(image a, image b)$/;"	f
img_buffer	App/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon26
img_buffer_end	App/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon26
img_buffer_original	App/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon26
img_buffer_original_end	App/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon26
img_comp	App/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon31	typeref:struct:__anon31::__anon32
img_h_max	App/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon31
img_mcu_h	App/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon31
img_mcu_w	App/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon31
img_mcu_x	App/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon31
img_mcu_y	App/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon31
img_n	App/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon26
img_out_n	App/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon26
img_v_max	App/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon31
img_x	App/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon26
img_y	App/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon26
inc32	Enclave/aes-gcm.cpp	/^static void inc32(aes_uchar *block)$/;"	f	file:
index	App/darknet.h	/^    int index;$/;"	m	struct:layer
index	App/darknet.h	/^    int index;$/;"	m	struct:network
index	App/parser.cpp	/^    int index;$/;"	m	struct:size_params	file:
index	Enclave/darknet_TA.h	/^    int index;$/;"	m	struct:layer_TA
index	Enclave/darknet_TA.h	/^    int index;$/;"	m	struct:network_TA
indexes	App/darknet.h	/^    int   * indexes;$/;"	m	struct:layer
indexes	Enclave/darknet_TA.h	/^    int   * indexes;$/;"	m	struct:layer_TA
initialize_enclave	App/App.cpp	/^int initialize_enclave(void)$/;"	f
inline	Enclave/aes-common.h	65;"	d
input	App/darknet.h	/^    float *input;$/;"	m	struct:network
input	Enclave/darknet_TA.h	/^    float *input;$/;"	m	struct:network_TA
input_gate_layer	App/darknet.h	/^    struct layer *input_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_gate_layer	Enclave/darknet_TA.h	/^    struct layer_TA *input_gate_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_h_layer	App/darknet.h	/^    struct layer *input_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_h_layer	Enclave/darknet_TA.h	/^    struct layer_TA *input_h_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_layer	App/darknet.h	/^    struct layer *input_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_layer	Enclave/darknet_TA.h	/^    struct layer_TA *input_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_layers	App/darknet.h	/^    int   * input_layers;$/;"	m	struct:layer
input_layers	Enclave/darknet_TA.h	/^    int   * input_layers;$/;"	m	struct:layer_TA
input_r_layer	App/darknet.h	/^    struct layer *input_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_r_layer	Enclave/darknet_TA.h	/^    struct layer_TA *input_r_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_save_layer	App/darknet.h	/^    struct layer *input_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_save_layer	Enclave/darknet_TA.h	/^    struct layer_TA *input_save_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_sizes	App/darknet.h	/^    int   * input_sizes;$/;"	m	struct:layer
input_sizes	Enclave/darknet_TA.h	/^    int   * input_sizes;$/;"	m	struct:layer_TA
input_state_layer	App/darknet.h	/^    struct layer *input_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_state_layer	Enclave/darknet_TA.h	/^    struct layer_TA *input_state_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
input_z_layer	App/darknet.h	/^    struct layer *input_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
input_z_layer	Enclave/darknet_TA.h	/^    struct layer_TA *input_z_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
inputs	App/darknet.h	/^    int inputs;$/;"	m	struct:layer
inputs	App/darknet.h	/^    int inputs;$/;"	m	struct:network
inputs	App/parser.cpp	/^    int inputs;$/;"	m	struct:size_params	file:
inputs	Enclave/darknet_TA.h	/^    int inputs;$/;"	m	struct:layer_TA
inputs	Enclave/darknet_TA.h	/^    int inputs;$/;"	m	struct:network_TA
intToStr	Enclave/math_TA.cpp	/^int intToStr(int x, char str[], int d)$/;"	f
int_index	App/utils.cpp	/^int int_index(int *a, int val, int n)$/;"	f
int_to_alphanum	App/utils.cpp	/^char int_to_alphanum(int i)$/;"	f
inter_cpu	App/blas.cpp	/^void inter_cpu(int NX, float *X, int NY, float *Y, int B, float *OUT)$/;"	f
io	App/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon26
io_user_data	App/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon26
is_network	App/parser.cpp	/^int is_network(section *s)$/;"	f
is_priv	Enclave/Enclave_t.c	/^	struct {void* ecall_addr; uint8_t is_priv; uint8_t is_switchless;} ecall_table[15];$/;"	m	struct:__anon7::__anon8	file:
is_switchless	Enclave/Enclave_t.c	/^	struct {void* ecall_addr; uint8_t is_priv; uint8_t is_switchless;} ecall_table[15];$/;"	m	struct:__anon7::__anon8	file:
jfif	App/stb_image.h	/^   int            jfif;$/;"	m	struct:__anon31
jitter	App/darknet.h	/^    float jitter;$/;"	m	struct:layer
jitter	App/darknet.h	/^    float jitter;$/;"	m	struct:load_args
jitter	Enclave/darknet_TA.h	/^    float jitter;$/;"	m	struct:layer_TA
joint	App/darknet.h	/^    int joint;$/;"	m	struct:layer
joint	Enclave/darknet_TA.h	/^    int joint;$/;"	m	struct:layer_TA
kappa	App/darknet.h	/^    float kappa;$/;"	m	struct:layer
kappa	Enclave/darknet_TA.h	/^    float kappa;$/;"	m	struct:layer_TA
key	App/option_list.h	/^    char *key;$/;"	m	struct:__anon45
kvp	App/option_list.h	/^} kvp;$/;"	t	typeref:struct:__anon45
l1_cpu	App/blas.cpp	/^void l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l1_cpu_TA	Enclave/blas_TA.cpp	/^void l1_cpu_TA(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_cpu	App/blas.cpp	/^void l2_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2_cpu_TA	Enclave/blas_TA.cpp	/^void l2_cpu_TA(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
l2normalize_cpu	App/blas.cpp	/^void l2normalize_cpu(float *x, float *dx, int batch, int filters, int spatial)$/;"	f
labels	App/darknet.h	/^    char **labels;$/;"	m	struct:load_args
layer	App/darknet.h	/^struct layer{$/;"	s
layer	App/darknet.h	/^typedef struct layer layer;$/;"	t	typeref:struct:layer
layer_TA	Enclave/darknet_TA.h	/^struct layer_TA{$/;"	s
layer_TA	Enclave/darknet_TA.h	/^typedef struct layer_TA layer_TA;$/;"	t	typeref:struct:layer_TA
layers	App/darknet.h	/^    layer *layers;$/;"	m	struct:network
layers	Enclave/darknet_TA.h	/^    layer_TA *layers;$/;"	m	struct:network_TA
leaf	App/darknet.h	/^    int *leaf;$/;"	m	struct:__anon10
leaf	Enclave/darknet_TA.h	/^    int *leaf;$/;"	m	struct:__anon1
leaky_activate	App/activations.h	/^static inline float leaky_activate(float x){return (x>0) ? x : .1*x;}$/;"	f
leaky_activate_TA	Enclave/activations_TA.h	/^static inline float leaky_activate_TA(float x){return (x>0) ? x : .1*x;}$/;"	f
leaky_gradient	App/activations.h	/^static inline float leaky_gradient(float x){return (x>0) ? 1 : .1;}$/;"	f
leaky_gradient_TA	Enclave/activations_TA.h	/^static inline float leaky_gradient_TA(float x){return (x>0) ? 1 : .1;}$/;"	f
learning_rate	App/darknet.h	/^    float learning_rate;$/;"	m	struct:__anon16
learning_rate	App/darknet.h	/^    float learning_rate;$/;"	m	struct:network
learning_rate	Enclave/darknet_TA.h	/^    float learning_rate;$/;"	m	struct:__anon5
learning_rate	Enclave/darknet_TA.h	/^    float learning_rate;$/;"	m	struct:network_TA
learning_rate_policy	App/darknet.h	/^} learning_rate_policy;$/;"	t	typeref:enum:__anon17
learning_rate_policy_TA	Enclave/darknet_TA.h	/^} learning_rate_policy_TA;$/;"	t	typeref:enum:__anon6
learning_rate_scale	App/darknet.h	/^    float learning_rate_scale;$/;"	m	struct:layer
learning_rate_scale	Enclave/darknet_TA.h	/^    float learning_rate_scale;$/;"	m	struct:layer_TA
left	App/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon23
length	App/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon36
letterbox_image	App/image.cpp	/^image letterbox_image(image im, int w, int h)$/;"	f
letterbox_image_into	App/image.cpp	/^void letterbox_image_into(image im, int w, int h, image boxed)$/;"	f
lflags	App/stb_image.h	/^   int lflags;$/;"	m	struct:__anon42
lhtan_activate	App/activations.h	/^static inline float lhtan_activate(float x)$/;"	f
lhtan_activate_TA	Enclave/activations_TA.h	/^static inline float lhtan_activate_TA(float x)$/;"	f
lhtan_gradient	App/activations.h	/^static inline float lhtan_gradient(float x)$/;"	f
lhtan_gradient_TA	Enclave/activations_TA.h	/^static inline float lhtan_gradient_TA(float x)$/;"	f
line0	App/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon33
line1	App/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon33
line_size	App/stb_image.h	/^   int line_size;$/;"	m	struct:__anon42
linear_activate	App/activations.h	/^static inline float linear_activate(float x){return x;}$/;"	f
linear_activate_TA	Enclave/activations_TA.h	/^static inline float linear_activate_TA(float x){return x;}$/;"	f
linear_gradient	App/activations.h	/^static inline float linear_gradient(float x){return 1;}$/;"	f
linear_gradient_TA	Enclave/activations_TA.h	/^static inline float linear_gradient_TA(float x){return 1;}$/;"	f
linebuf	App/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon31::__anon32
list	App/darknet.h	/^typedef struct list{$/;"	s
list	App/darknet.h	/^} list;$/;"	t	typeref:struct:list
list_insert	App/list.cpp	/^void list_insert(list *l, void *val)$/;"	f
list_pop	App/list.cpp	/^void *list_pop(list *l){$/;"	f
list_to_array	App/list.cpp	/^void **list_to_array(list *l)$/;"	f
ln_10	Enclave/math_TA.h	8;"	d
ln_2	Enclave/math_TA.h	7;"	d
load_all_cifar10	App/data.cpp	/^data load_all_cifar10()$/;"	f
load_alphabet	App/image.cpp	/^image **load_alphabet()$/;"	f
load_args	App/darknet.h	/^typedef struct load_args{$/;"	s
load_args	App/darknet.h	/^} load_args;$/;"	t	typeref:struct:load_args
load_categorical_data_csv	App/data.cpp	/^data load_categorical_data_csv(char *filename, int target, int k)$/;"	f
load_cifar10_data	App/data.cpp	/^data load_cifar10_data(char *filename)$/;"	f
load_connected_weights_comm	App/parser.cpp	/^void load_connected_weights_comm(layer l, FILE *fp, int i, int transpose)$/;"	f
load_convolutional_weights_comm	App/parser.cpp	/^void load_convolutional_weights_comm(layer l, FILE *fp, int i)$/;"	f
load_data	App/data.cpp	/^pthread_t load_data(load_args args)$/;"	f
load_data_augment	App/data.cpp	/^data load_data_augment(char **paths, int n, int m, char **labels, int k, tree *hierarchy, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)$/;"	f
load_data_blocking	App/data.cpp	/^void load_data_blocking(load_args args)$/;"	f
load_data_captcha	App/data.cpp	/^data load_data_captcha(char **paths, int n, int m, int k, int w, int h)$/;"	f
load_data_captcha_encode	App/data.cpp	/^data load_data_captcha_encode(char **paths, int n, int m, int w, int h)$/;"	f
load_data_compare	App/data.cpp	/^data load_data_compare(int n, char **paths, int m, int classes, int w, int h)$/;"	f
load_data_detection	App/data.cpp	/^data load_data_detection(int n, char **paths, int m, int w, int h, int boxes, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_in_thread	App/data.cpp	/^pthread_t load_data_in_thread(load_args args)$/;"	f
load_data_iseg	App/data.cpp	/^data load_data_iseg(int n, char **paths, int m, int w, int h, int classes, int boxes, int div, int min, int max, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_mask	App/data.cpp	/^data load_data_mask(int n, char **paths, int m, int w, int h, int classes, int boxes, int coords, int min, int max, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_old	App/data.cpp	/^data load_data_old(char **paths, int n, int m, char **labels, int k, int w, int h)$/;"	f
load_data_region	App/data.cpp	/^data load_data_region(int n, char **paths, int m, int w, int h, int size, int classes, float jitter, float hue, float saturation, float exposure)$/;"	f
load_data_regression	App/data.cpp	/^data load_data_regression(char **paths, int n, int m, int k, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_seg	App/data.cpp	/^data load_data_seg(int n, char **paths, int m, int w, int h, int classes, int min, int max, float angle, float aspect, float hue, float saturation, float exposure, int div)$/;"	f
load_data_super	App/data.cpp	/^data load_data_super(char **paths, int n, int m, int w, int h, int scale)$/;"	f
load_data_swag	App/data.cpp	/^data load_data_swag(char **paths, int n, int classes, float jitter)$/;"	f
load_data_tag	App/data.cpp	/^data load_data_tag(char **paths, int n, int m, int k, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure)$/;"	f
load_data_writing	App/data.cpp	/^data load_data_writing(char **paths, int n, int m, int w, int h, int out_w, int out_h)$/;"	f
load_go	App/data.cpp	/^data load_go(char *filename)$/;"	f
load_image	App/image.cpp	/^image load_image(char *filename, int w, int h, int c)$/;"	f
load_image_augment_paths	App/data.cpp	/^matrix load_image_augment_paths(char **paths, int n, int min, int max, int size, float angle, float aspect, float hue, float saturation, float exposure, int center)$/;"	f
load_image_color	App/image.cpp	/^image load_image_color(char *filename, int w, int h)$/;"	f
load_image_paths	App/data.cpp	/^matrix load_image_paths(char **paths, int n, int w, int h)$/;"	f
load_image_paths_gray	App/data.cpp	/^matrix load_image_paths_gray(char **paths, int n, int w, int h)$/;"	f
load_image_stb	App/image.cpp	/^image load_image_stb(char *filename, int channels)$/;"	f
load_jpeg_image	App/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
load_labels_paths	App/data.cpp	/^matrix load_labels_paths(char **paths, int n, char **labels, int k, tree *hierarchy)$/;"	f
load_network	App/network.cpp	/^network *load_network(char *cfg, char *weights, int clear)$/;"	f
load_regression_labels_paths	App/data.cpp	/^matrix load_regression_labels_paths(char **paths, int n, int k)$/;"	f
load_rle	App/data.cpp	/^void load_rle(image im, int *rle, int n)$/;"	f
load_tags_paths	App/data.cpp	/^matrix load_tags_paths(char **paths, int n, int k)$/;"	f
load_thread	App/data.cpp	/^void *load_thread(void *ptr)$/;"	f
load_threads	App/data.cpp	/^void *load_threads(void *ptr)$/;"	f
load_weights	App/parser.cpp	/^void load_weights(network *net, char *filename)$/;"	f
load_weights_upto	App/parser.cpp	/^void load_weights_upto(network *net, char *filename, int start, int cutoff)$/;"	f
log	App/darknet.h	/^    int log;$/;"	m	struct:layer
log	Enclave/darknet_TA.h	/^    int log;$/;"	m	struct:layer_TA
loggy_activate	App/activations.h	/^static inline float loggy_activate(float x){return 2.\/(1. + exp(-x)) - 1;}$/;"	f
loggy_activate_TA	Enclave/activations_TA.h	/^static inline float loggy_activate_TA(float x){return 2.\/(1. + ta_exp(-x)) - 1;}$/;"	f
loggy_gradient	App/activations.h	/^static inline float loggy_gradient(float x)$/;"	f
loggy_gradient_TA	Enclave/activations_TA.h	/^static inline float loggy_gradient_TA(float x)$/;"	f
logistic_activate	App/activations.h	/^static inline float logistic_activate(float x){return 1.\/(1. + exp(-x));}$/;"	f
logistic_activate_TA	Enclave/activations_TA.h	/^static inline float logistic_activate_TA(float x){return 1.\/(1. + ta_exp(-x));}$/;"	f
logistic_gradient	App/activations.h	/^static inline float logistic_gradient(float x){return (1-x)*x;}$/;"	f
logistic_gradient_TA	Enclave/activations_TA.h	/^static inline float logistic_gradient_TA(float x){return (1-x)*x;}$/;"	f
logistic_x_ent_cpu	App/blas.cpp	/^void logistic_x_ent_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
loss	App/darknet.h	/^    float * loss;$/;"	m	struct:layer
loss	Enclave/darknet_TA.h	/^    float * loss;$/;"	m	struct:layer_TA
lpal	App/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon42
m	App/darknet.h	/^    float * m;$/;"	m	struct:layer
m	App/darknet.h	/^    int m;$/;"	m	struct:load_args
m	Enclave/darknet_TA.h	/^    float * m;$/;"	m	struct:layer_TA
ma	App/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon39
mag_array	App/utils.cpp	/^float mag_array(float *a, int n)$/;"	f
main	App/App.cpp	/^int main(int argc, char **argv) {$/;"	f
make_avgpool_layer	App/parser.cpp	/^avgpool_layer make_avgpool_layer(int batch, int w, int h, int c, int index)$/;"	f
make_connected_layer	App/parser.cpp	/^layer make_connected_layer(int batch, int inputs, int outputs, ACTIVATION activation, int batch_normalize, int adam, int index)$/;"	f
make_convolutional_layer	App/parser.cpp	/^convolutional_layer make_convolutional_layer(int batch, int h, int w, int c, int n, int groups, int size, int stride, int padding, ACTIVATION activation, int batch_normalize, int binary, int xnor, int adam, int index)$/;"	f
make_cost_layer	App/parser.cpp	/^cost_layer make_cost_layer(int batch, int inputs, COST_TYPE cost_type, float scale, int index)$/;"	f
make_dropout_layer	App/parser.cpp	/^dropout_layer make_dropout_layer(int batch, int inputs, float probability, int index)$/;"	f
make_empty_image	App/image.cpp	/^image make_empty_image(int w, int h, int c)$/;"	f
make_image	App/image.cpp	/^image make_image(int w, int h, int c)$/;"	f
make_labels	data/darknet/labels/make_labels.py	/^def make_labels(s):$/;"	f
make_list	App/list.cpp	/^list *make_list()$/;"	f
make_matrix	App/matrix.cpp	/^matrix make_matrix(int rows, int cols)$/;"	f
make_maxpool_layer	App/parser.cpp	/^maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding, int index)$/;"	f
make_network	App/network.cpp	/^network *make_network(int n)$/;"	f
make_random_image	App/image.cpp	/^image make_random_image(int w, int h, int c)$/;"	f
make_softmax_layer	App/parser.cpp	/^softmax_layer make_softmax_layer(int batch, int inputs, int groups)$/;"	f
malloc_error	App/utils.cpp	/^void malloc_error()$/;"	f
map	App/darknet.h	/^    int   * map;$/;"	m	struct:layer
map	Enclave/darknet_TA.h	/^    int   * map;$/;"	m	struct:layer_TA
marker	App/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon31
mask	App/darknet.h	/^    float *mask;$/;"	m	struct:detection
mask	App/darknet.h	/^    int *mask;$/;"	m	struct:layer
mask	Enclave/darknet_TA.h	/^    int *mask;$/;"	m	struct:layer_TA
mask_scale	App/darknet.h	/^    float mask_scale;$/;"	m	struct:layer
mask_scale	Enclave/darknet_TA.h	/^    float mask_scale;$/;"	m	struct:layer_TA
mask_to_rgb	App/image.cpp	/^image mask_to_rgb(image mask)$/;"	f
matrix	App/darknet.h	/^typedef struct matrix{$/;"	s
matrix	App/darknet.h	/^} matrix;$/;"	t	typeref:struct:matrix
matrix_add_matrix	App/matrix.cpp	/^void matrix_add_matrix(matrix from, matrix to)$/;"	f
matrix_to_csv	App/matrix.cpp	/^void matrix_to_csv(matrix m)$/;"	f
matrix_topk_accuracy	App/matrix.cpp	/^float matrix_topk_accuracy(matrix truth, matrix guess, int k)$/;"	f
max	App/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
max	App/socket_api.h	16;"	d
max_batches	App/darknet.h	/^    int max_batches;$/;"	m	struct:network
max_batches	Enclave/darknet_TA.h	/^    int max_batches;$/;"	m	struct:network_TA
max_boxes	App/darknet.h	/^    int max_boxes;$/;"	m	struct:layer
max_boxes	Enclave/darknet_TA.h	/^    int max_boxes;$/;"	m	struct:layer_TA
max_crop	App/darknet.h	/^    int max_crop;$/;"	m	struct:network
max_crop	Enclave/darknet_TA.h	/^    int max_crop;$/;"	m	struct:network_TA
max_index	App/utils.cpp	/^int max_index(float *a, int n)$/;"	f
max_int_index	App/utils.cpp	/^int max_int_index(int *a, int n)$/;"	f
max_ratio	App/darknet.h	/^    float max_ratio;$/;"	m	struct:network
max_ratio	Enclave/darknet_TA.h	/^    float max_ratio;$/;"	m	struct:network_TA
max_x	App/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon42
max_y	App/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon42
maxcode	App/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon34
maxcode	App/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon30
maxpool_layer	App/maxpool_layer.h	/^typedef layer maxpool_layer;$/;"	t
mb	App/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon39
mean	App/darknet.h	/^    float * mean;$/;"	m	struct:layer
mean	Enclave/darknet_TA.h	/^    float * mean;$/;"	m	struct:layer_TA
mean_array	App/utils.cpp	/^float mean_array(float *a, int n)$/;"	f
mean_arrays	App/utils.cpp	/^void mean_arrays(float **a, int n, int els, float *avg)$/;"	f
mean_cpu	App/blas.cpp	/^void mean_cpu(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_cpu_TA	Enclave/blas_TA.cpp	/^void mean_cpu_TA(float *x, int batch, int filters, int spatial, float *mean)$/;"	f
mean_delta	App/darknet.h	/^    float * mean_delta;$/;"	m	struct:layer
mean_delta	Enclave/darknet_TA.h	/^    float * mean_delta;$/;"	m	struct:layer_TA
mg	App/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon39
min	App/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
min	App/socket_api.h	15;"	d
min_crop	App/darknet.h	/^    int min_crop;$/;"	m	struct:network
min_crop	Enclave/darknet_TA.h	/^    int min_crop;$/;"	m	struct:network_TA
min_ratio	App/darknet.h	/^    float min_ratio;$/;"	m	struct:network
min_ratio	Enclave/darknet_TA.h	/^    float min_ratio;$/;"	m	struct:network_TA
momentum	App/darknet.h	/^    float momentum;$/;"	m	struct:__anon16
momentum	App/darknet.h	/^    float momentum;$/;"	m	struct:network
momentum	Enclave/darknet_TA.h	/^    float momentum;$/;"	m	struct:__anon5
momentum	Enclave/darknet_TA.h	/^    float momentum;$/;"	m	struct:network_TA
mr	App/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon39
ms_B1	App/Enclave_u.c	/^	float ms_B1;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_B1	Enclave/Enclave_t.c	/^	float ms_B1;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_B2	App/Enclave_u.c	/^	float ms_B2;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_B2	Enclave/Enclave_t.c	/^	float ms_B2;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_acti_length	App/Enclave_u.c	/^	int ms_acti_length;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_acti_length	App/Enclave_u.c	/^	int ms_acti_length;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_acti_length	Enclave/Enclave_t.c	/^	int ms_acti_length;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_acti_length	Enclave/Enclave_t.c	/^	int ms_acti_length;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_activation_s	App/Enclave_u.c	/^	char* ms_activation_s;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_activation_s	App/Enclave_u.c	/^	char* ms_activation_s;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_activation_s	Enclave/Enclave_t.c	/^	char* ms_activation_s;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_activation_s	Enclave/Enclave_t.c	/^	char* ms_activation_s;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_adam	App/Enclave_u.c	/^	int ms_adam;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_adam	App/Enclave_u.c	/^	int ms_adam;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_adam	App/Enclave_u.c	/^	int ms_adam;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_adam	Enclave/Enclave_t.c	/^	int ms_adam;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_adam	Enclave/Enclave_t.c	/^	int ms_adam;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_adam	Enclave/Enclave_t.c	/^	int ms_adam;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_additional	App/Enclave_u.c	/^	int ms_additional;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_additional	Enclave/Enclave_t.c	/^	int ms_additional;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_angle	App/Enclave_u.c	/^	float ms_angle;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_angle	Enclave/Enclave_t.c	/^	float ms_angle;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_aspect	App/Enclave_u.c	/^	float ms_aspect;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_aspect	Enclave/Enclave_t.c	/^	float ms_aspect;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_attest_size	App/Enclave_u.c	/^	int ms_attest_size;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_attest_size	Enclave/Enclave_t.c	/^	int ms_attest_size;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_attestation_buffer	App/Enclave_u.c	/^	char* ms_attestation_buffer;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_attestation_buffer	Enclave/Enclave_t.c	/^	char* ms_attestation_buffer;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_batch	App/Enclave_u.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_avgpool_layer_t	file:
ms_batch	App/Enclave_u.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_batch	App/Enclave_u.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_batch	App/Enclave_u.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_batch	App/Enclave_u.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_batch	App/Enclave_u.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_batch	App/Enclave_u.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_batch	App/Enclave_u.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_batch	Enclave/Enclave_t.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_avgpool_layer_t	file:
ms_batch	Enclave/Enclave_t.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_batch	Enclave/Enclave_t.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_batch	Enclave/Enclave_t.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_batch	Enclave/Enclave_t.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_batch	Enclave/Enclave_t.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_batch	Enclave/Enclave_t.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_batch	Enclave/Enclave_t.c	/^	int ms_batch;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_batch_normalize	App/Enclave_u.c	/^	int ms_batch_normalize;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_batch_normalize	App/Enclave_u.c	/^	int ms_batch_normalize;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_batch_normalize	Enclave/Enclave_t.c	/^	int ms_batch_normalize;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_batch_normalize	Enclave/Enclave_t.c	/^	int ms_batch_normalize;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_binary	App/Enclave_u.c	/^	int ms_binary;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_binary	Enclave/Enclave_t.c	/^	int ms_binary;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_burn_in	App/Enclave_u.c	/^	int ms_burn_in;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_burn_in	Enclave/Enclave_t.c	/^	int ms_burn_in;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_c	App/Enclave_u.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_avgpool_layer_t	file:
ms_c	App/Enclave_u.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_c	App/Enclave_u.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_c	App/Enclave_u.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_c	App/Enclave_u.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_c	App/Enclave_u.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_c	Enclave/Enclave_t.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_avgpool_layer_t	file:
ms_c	Enclave/Enclave_t.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_c	Enclave/Enclave_t.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_c	Enclave/Enclave_t.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_c	Enclave/Enclave_t.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_c	Enclave/Enclave_t.c	/^	int ms_c;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_center	App/Enclave_u.c	/^	int ms_center;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_center	Enclave/Enclave_t.c	/^	int ms_center;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_clip	App/Enclave_u.c	/^	float ms_clip;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_clip	Enclave/Enclave_t.c	/^	float ms_clip;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_cost_size	App/Enclave_u.c	/^	int ms_cost_size;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_cost_size	Enclave/Enclave_t.c	/^	int ms_cost_size;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_cost_type	App/Enclave_u.c	/^	char* ms_cost_type;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_cost_type	Enclave/Enclave_t.c	/^	char* ms_cost_type;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_decay	App/Enclave_u.c	/^	float ms_decay;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_decay	Enclave/Enclave_t.c	/^	float ms_decay;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_delta_size	App/Enclave_u.c	/^	int ms_delta_size;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_delta_size	Enclave/Enclave_t.c	/^	int ms_delta_size;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_dot	App/Enclave_u.c	/^	float ms_dot;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_dot	Enclave/Enclave_t.c	/^	float ms_dot;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_ecall_allocate_workspace_t	App/Enclave_u.c	/^typedef struct ms_ecall_allocate_workspace_t {$/;"	s	file:
ms_ecall_allocate_workspace_t	App/Enclave_u.c	/^} ms_ecall_allocate_workspace_t;$/;"	t	typeref:struct:ms_ecall_allocate_workspace_t	file:
ms_ecall_allocate_workspace_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_allocate_workspace_t {$/;"	s	file:
ms_ecall_allocate_workspace_t	Enclave/Enclave_t.c	/^} ms_ecall_allocate_workspace_t;$/;"	t	typeref:struct:ms_ecall_allocate_workspace_t	file:
ms_ecall_attest_session_token_t	App/Enclave_u.c	/^typedef struct ms_ecall_attest_session_token_t {$/;"	s	file:
ms_ecall_attest_session_token_t	App/Enclave_u.c	/^} ms_ecall_attest_session_token_t;$/;"	t	typeref:struct:ms_ecall_attest_session_token_t	file:
ms_ecall_attest_session_token_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_attest_session_token_t {$/;"	s	file:
ms_ecall_attest_session_token_t	Enclave/Enclave_t.c	/^} ms_ecall_attest_session_token_t;$/;"	t	typeref:struct:ms_ecall_attest_session_token_t	file:
ms_ecall_decrypt_t	App/Enclave_u.c	/^typedef struct ms_ecall_decrypt_t {$/;"	s	file:
ms_ecall_decrypt_t	App/Enclave_u.c	/^} ms_ecall_decrypt_t;$/;"	t	typeref:struct:ms_ecall_decrypt_t	file:
ms_ecall_decrypt_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_decrypt_t {$/;"	s	file:
ms_ecall_decrypt_t	Enclave/Enclave_t.c	/^} ms_ecall_decrypt_t;$/;"	t	typeref:struct:ms_ecall_decrypt_t	file:
ms_ecall_encrypt_t	App/Enclave_u.c	/^typedef struct ms_ecall_encrypt_t {$/;"	s	file:
ms_ecall_encrypt_t	App/Enclave_u.c	/^} ms_ecall_encrypt_t;$/;"	t	typeref:struct:ms_ecall_encrypt_t	file:
ms_ecall_encrypt_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_encrypt_t {$/;"	s	file:
ms_ecall_encrypt_t	Enclave/Enclave_t.c	/^} ms_ecall_encrypt_t;$/;"	t	typeref:struct:ms_ecall_encrypt_t	file:
ms_ecall_forward_network_t	App/Enclave_u.c	/^typedef struct ms_ecall_forward_network_t {$/;"	s	file:
ms_ecall_forward_network_t	App/Enclave_u.c	/^} ms_ecall_forward_network_t;$/;"	t	typeref:struct:ms_ecall_forward_network_t	file:
ms_ecall_forward_network_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_forward_network_t {$/;"	s	file:
ms_ecall_forward_network_t	Enclave/Enclave_t.c	/^} ms_ecall_forward_network_t;$/;"	t	typeref:struct:ms_ecall_forward_network_t	file:
ms_ecall_make_avgpool_layer_t	App/Enclave_u.c	/^typedef struct ms_ecall_make_avgpool_layer_t {$/;"	s	file:
ms_ecall_make_avgpool_layer_t	App/Enclave_u.c	/^} ms_ecall_make_avgpool_layer_t;$/;"	t	typeref:struct:ms_ecall_make_avgpool_layer_t	file:
ms_ecall_make_avgpool_layer_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_make_avgpool_layer_t {$/;"	s	file:
ms_ecall_make_avgpool_layer_t	Enclave/Enclave_t.c	/^} ms_ecall_make_avgpool_layer_t;$/;"	t	typeref:struct:ms_ecall_make_avgpool_layer_t	file:
ms_ecall_make_connected_layer_t	App/Enclave_u.c	/^typedef struct ms_ecall_make_connected_layer_t {$/;"	s	file:
ms_ecall_make_connected_layer_t	App/Enclave_u.c	/^} ms_ecall_make_connected_layer_t;$/;"	t	typeref:struct:ms_ecall_make_connected_layer_t	file:
ms_ecall_make_connected_layer_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_make_connected_layer_t {$/;"	s	file:
ms_ecall_make_connected_layer_t	Enclave/Enclave_t.c	/^} ms_ecall_make_connected_layer_t;$/;"	t	typeref:struct:ms_ecall_make_connected_layer_t	file:
ms_ecall_make_convolutional_layer_t	App/Enclave_u.c	/^typedef struct ms_ecall_make_convolutional_layer_t {$/;"	s	file:
ms_ecall_make_convolutional_layer_t	App/Enclave_u.c	/^} ms_ecall_make_convolutional_layer_t;$/;"	t	typeref:struct:ms_ecall_make_convolutional_layer_t	file:
ms_ecall_make_convolutional_layer_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_make_convolutional_layer_t {$/;"	s	file:
ms_ecall_make_convolutional_layer_t	Enclave/Enclave_t.c	/^} ms_ecall_make_convolutional_layer_t;$/;"	t	typeref:struct:ms_ecall_make_convolutional_layer_t	file:
ms_ecall_make_cost_layer_t	App/Enclave_u.c	/^typedef struct ms_ecall_make_cost_layer_t {$/;"	s	file:
ms_ecall_make_cost_layer_t	App/Enclave_u.c	/^} ms_ecall_make_cost_layer_t;$/;"	t	typeref:struct:ms_ecall_make_cost_layer_t	file:
ms_ecall_make_cost_layer_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_make_cost_layer_t {$/;"	s	file:
ms_ecall_make_cost_layer_t	Enclave/Enclave_t.c	/^} ms_ecall_make_cost_layer_t;$/;"	t	typeref:struct:ms_ecall_make_cost_layer_t	file:
ms_ecall_make_dropout_layer_t	App/Enclave_u.c	/^typedef struct ms_ecall_make_dropout_layer_t {$/;"	s	file:
ms_ecall_make_dropout_layer_t	App/Enclave_u.c	/^} ms_ecall_make_dropout_layer_t;$/;"	t	typeref:struct:ms_ecall_make_dropout_layer_t	file:
ms_ecall_make_dropout_layer_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_make_dropout_layer_t {$/;"	s	file:
ms_ecall_make_dropout_layer_t	Enclave/Enclave_t.c	/^} ms_ecall_make_dropout_layer_t;$/;"	t	typeref:struct:ms_ecall_make_dropout_layer_t	file:
ms_ecall_make_maxpool_layer_t	App/Enclave_u.c	/^typedef struct ms_ecall_make_maxpool_layer_t {$/;"	s	file:
ms_ecall_make_maxpool_layer_t	App/Enclave_u.c	/^} ms_ecall_make_maxpool_layer_t;$/;"	t	typeref:struct:ms_ecall_make_maxpool_layer_t	file:
ms_ecall_make_maxpool_layer_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_make_maxpool_layer_t {$/;"	s	file:
ms_ecall_make_maxpool_layer_t	Enclave/Enclave_t.c	/^} ms_ecall_make_maxpool_layer_t;$/;"	t	typeref:struct:ms_ecall_make_maxpool_layer_t	file:
ms_ecall_make_network_t	App/Enclave_u.c	/^typedef struct ms_ecall_make_network_t {$/;"	s	file:
ms_ecall_make_network_t	App/Enclave_u.c	/^} ms_ecall_make_network_t;$/;"	t	typeref:struct:ms_ecall_make_network_t	file:
ms_ecall_make_network_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_make_network_t {$/;"	s	file:
ms_ecall_make_network_t	Enclave/Enclave_t.c	/^} ms_ecall_make_network_t;$/;"	t	typeref:struct:ms_ecall_make_network_t	file:
ms_ecall_make_softmax_layer_t	App/Enclave_u.c	/^typedef struct ms_ecall_make_softmax_layer_t {$/;"	s	file:
ms_ecall_make_softmax_layer_t	App/Enclave_u.c	/^} ms_ecall_make_softmax_layer_t;$/;"	t	typeref:struct:ms_ecall_make_softmax_layer_t	file:
ms_ecall_make_softmax_layer_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_make_softmax_layer_t {$/;"	s	file:
ms_ecall_make_softmax_layer_t	Enclave/Enclave_t.c	/^} ms_ecall_make_softmax_layer_t;$/;"	t	typeref:struct:ms_ecall_make_softmax_layer_t	file:
ms_ecall_net_output_return_t	App/Enclave_u.c	/^typedef struct ms_ecall_net_output_return_t {$/;"	s	file:
ms_ecall_net_output_return_t	App/Enclave_u.c	/^} ms_ecall_net_output_return_t;$/;"	t	typeref:struct:ms_ecall_net_output_return_t	file:
ms_ecall_net_output_return_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_net_output_return_t {$/;"	s	file:
ms_ecall_net_output_return_t	Enclave/Enclave_t.c	/^} ms_ecall_net_output_return_t;$/;"	t	typeref:struct:ms_ecall_net_output_return_t	file:
ms_ecall_transfer_weights_t	App/Enclave_u.c	/^typedef struct ms_ecall_transfer_weights_t {$/;"	s	file:
ms_ecall_transfer_weights_t	App/Enclave_u.c	/^} ms_ecall_transfer_weights_t;$/;"	t	typeref:struct:ms_ecall_transfer_weights_t	file:
ms_ecall_transfer_weights_t	Enclave/Enclave_t.c	/^typedef struct ms_ecall_transfer_weights_t {$/;"	s	file:
ms_ecall_transfer_weights_t	Enclave/Enclave_t.c	/^} ms_ecall_transfer_weights_t;$/;"	t	typeref:struct:ms_ecall_transfer_weights_t	file:
ms_encrypt_input	App/Enclave_u.c	/^	uint32_t* ms_encrypt_input;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_encrypt_input	Enclave/Enclave_t.c	/^	uint32_t* ms_encrypt_input;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_encrypted_output	App/Enclave_u.c	/^	uint32_t* ms_encrypted_output;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_encrypted_output	Enclave/Enclave_t.c	/^	uint32_t* ms_encrypted_output;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_eps	App/Enclave_u.c	/^	float ms_eps;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_eps	Enclave/Enclave_t.c	/^	float ms_eps;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_exposure	App/Enclave_u.c	/^	float ms_exposure;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_exposure	Enclave/Enclave_t.c	/^	float ms_exposure;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_flipped	App/Enclave_u.c	/^	int ms_flipped;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_flipped	Enclave/Enclave_t.c	/^	int ms_flipped;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_groups	App/Enclave_u.c	/^	int ms_groups;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_groups	App/Enclave_u.c	/^	int ms_groups;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_groups	Enclave/Enclave_t.c	/^	int ms_groups;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_groups	Enclave/Enclave_t.c	/^	int ms_groups;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_h	App/Enclave_u.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_avgpool_layer_t	file:
ms_h	App/Enclave_u.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_h	App/Enclave_u.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_h	App/Enclave_u.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_h	App/Enclave_u.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_h	App/Enclave_u.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_h	Enclave/Enclave_t.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_avgpool_layer_t	file:
ms_h	Enclave/Enclave_t.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_h	Enclave/Enclave_t.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_h	Enclave/Enclave_t.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_h	Enclave/Enclave_t.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_h	Enclave/Enclave_t.c	/^	int ms_h;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_hue	App/Enclave_u.c	/^	float ms_hue;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_hue	Enclave/Enclave_t.c	/^	float ms_hue;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_input_length	App/Enclave_u.c	/^	uint32_t ms_input_length;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_input_length	App/Enclave_u.c	/^	uint32_t ms_input_length;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_input_length	Enclave/Enclave_t.c	/^	uint32_t ms_input_length;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_input_length	Enclave/Enclave_t.c	/^	uint32_t ms_input_length;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_inputs	App/Enclave_u.c	/^	int ms_inputs;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_inputs	App/Enclave_u.c	/^	int ms_inputs;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_inputs	App/Enclave_u.c	/^	int ms_inputs;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_inputs	App/Enclave_u.c	/^	int ms_inputs;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_inputs	App/Enclave_u.c	/^	int ms_inputs;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_inputs	Enclave/Enclave_t.c	/^	int ms_inputs;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_inputs	Enclave/Enclave_t.c	/^	int ms_inputs;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_inputs	Enclave/Enclave_t.c	/^	int ms_inputs;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_inputs	Enclave/Enclave_t.c	/^	int ms_inputs;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_inputs	Enclave/Enclave_t.c	/^	int ms_inputs;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_key	App/Enclave_u.c	/^	uint8_t* ms_key;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_key	App/Enclave_u.c	/^	uint8_t* ms_key;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_key	Enclave/Enclave_t.c	/^	uint8_t* ms_key;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_key	Enclave/Enclave_t.c	/^	uint8_t* ms_key;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_key_size	App/Enclave_u.c	/^	uint32_t ms_key_size;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_key_size	App/Enclave_u.c	/^	uint32_t ms_key_size;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_key_size	Enclave/Enclave_t.c	/^	uint32_t ms_key_size;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_key_size	Enclave/Enclave_t.c	/^	uint32_t ms_key_size;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_l_inputs	App/Enclave_u.c	/^	int ms_l_inputs;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_l_inputs	Enclave/Enclave_t.c	/^	int ms_l_inputs;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_l_tag	App/Enclave_u.c	/^	int ms_l_tag;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_l_tag	App/Enclave_u.c	/^	int ms_l_tag;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_l_tag	Enclave/Enclave_t.c	/^	int ms_l_tag;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_l_tag	Enclave/Enclave_t.c	/^	int ms_l_tag;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_layer_i	App/Enclave_u.c	/^	int ms_layer_i;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_layer_i	Enclave/Enclave_t.c	/^	int ms_layer_i;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_learning_rate	App/Enclave_u.c	/^	float ms_learning_rate;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_learning_rate	Enclave/Enclave_t.c	/^	float ms_learning_rate;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_length	App/Enclave_u.c	/^	int ms_length;$/;"	m	struct:ms_ecall_net_output_return_t	file:
ms_length	App/Enclave_u.c	/^	int ms_length;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_length	Enclave/Enclave_t.c	/^	int ms_length;$/;"	m	struct:ms_ecall_net_output_return_t	file:
ms_length	Enclave/Enclave_t.c	/^	int ms_length;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_max_batches	App/Enclave_u.c	/^	int ms_max_batches;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_max_batches	Enclave/Enclave_t.c	/^	int ms_max_batches;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_max_crop	App/Enclave_u.c	/^	int ms_max_crop;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_max_crop	Enclave/Enclave_t.c	/^	int ms_max_crop;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_max_ratio	App/Enclave_u.c	/^	float ms_max_ratio;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_max_ratio	Enclave/Enclave_t.c	/^	float ms_max_ratio;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_min_crop	App/Enclave_u.c	/^	int ms_min_crop;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_min_crop	Enclave/Enclave_t.c	/^	int ms_min_crop;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_min_ratio	App/Enclave_u.c	/^	float ms_min_ratio;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_min_ratio	Enclave/Enclave_t.c	/^	float ms_min_ratio;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_momentum	App/Enclave_u.c	/^	float ms_momentum;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_momentum	Enclave/Enclave_t.c	/^	float ms_momentum;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_n	App/Enclave_u.c	/^	int ms_n;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_n	App/Enclave_u.c	/^	int ms_n;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_n	Enclave/Enclave_t.c	/^	int ms_n;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_n	Enclave/Enclave_t.c	/^	int ms_n;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_net_input	App/Enclave_u.c	/^	float* ms_net_input;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_net_input	Enclave/Enclave_t.c	/^	float* ms_net_input;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_net_output	App/Enclave_u.c	/^	float* ms_net_output;$/;"	m	struct:ms_ecall_net_output_return_t	file:
ms_net_output	Enclave/Enclave_t.c	/^	float* ms_net_output;$/;"	m	struct:ms_ecall_net_output_return_t	file:
ms_net_prev_delta	App/Enclave_u.c	/^	float* ms_net_prev_delta;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_net_prev_delta	Enclave/Enclave_t.c	/^	float* ms_net_prev_delta;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_net_prev_output	App/Enclave_u.c	/^	float* ms_net_prev_output;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_net_prev_output	Enclave/Enclave_t.c	/^	float* ms_net_prev_output;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_net_train	App/Enclave_u.c	/^	int ms_net_train;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_net_train	Enclave/Enclave_t.c	/^	int ms_net_train;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_noloss	App/Enclave_u.c	/^	int ms_noloss;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_noloss	Enclave/Enclave_t.c	/^	int ms_noloss;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_noobject_scale	App/Enclave_u.c	/^	float ms_noobject_scale;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_noobject_scale	Enclave/Enclave_t.c	/^	float ms_noobject_scale;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_notruth	App/Enclave_u.c	/^	int ms_notruth;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_notruth	Enclave/Enclave_t.c	/^	int ms_notruth;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_ocall_print_t	App/Enclave_u.c	/^typedef struct ms_ocall_print_t {$/;"	s	file:
ms_ocall_print_t	App/Enclave_u.c	/^} ms_ocall_print_t;$/;"	t	typeref:struct:ms_ocall_print_t	file:
ms_ocall_print_t	Enclave/Enclave_t.c	/^typedef struct ms_ocall_print_t {$/;"	s	file:
ms_ocall_print_t	Enclave/Enclave_t.c	/^} ms_ocall_print_t;$/;"	t	typeref:struct:ms_ocall_print_t	file:
ms_output_length	App/Enclave_u.c	/^	uint32_t ms_output_length;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_output_length	App/Enclave_u.c	/^	uint32_t ms_output_length;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_output_length	Enclave/Enclave_t.c	/^	uint32_t ms_output_length;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_output_length	Enclave/Enclave_t.c	/^	uint32_t ms_output_length;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_outputs	App/Enclave_u.c	/^	int ms_outputs;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_outputs	Enclave/Enclave_t.c	/^	int ms_outputs;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_padding	App/Enclave_u.c	/^	int ms_padding;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_padding	App/Enclave_u.c	/^	int ms_padding;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_padding	Enclave/Enclave_t.c	/^	int ms_padding;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_padding	Enclave/Enclave_t.c	/^	int ms_padding;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_plaintext_input	App/Enclave_u.c	/^	uint32_t* ms_plaintext_input;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_plaintext_input	Enclave/Enclave_t.c	/^	uint32_t* ms_plaintext_input;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_plaintext_output	App/Enclave_u.c	/^	uint32_t* ms_plaintext_output;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_plaintext_output	Enclave/Enclave_t.c	/^	uint32_t* ms_plaintext_output;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_power	App/Enclave_u.c	/^	float ms_power;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_power	Enclave/Enclave_t.c	/^	float ms_power;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_prev_size	App/Enclave_u.c	/^	int ms_prev_size;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_prev_size	Enclave/Enclave_t.c	/^	int ms_prev_size;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_probability	App/Enclave_u.c	/^	float ms_probability;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_probability	Enclave/Enclave_t.c	/^	float ms_probability;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_random	App/Enclave_u.c	/^	int ms_random;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_random	Enclave/Enclave_t.c	/^	int ms_random;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_ratio	App/Enclave_u.c	/^	float ms_ratio;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_ratio	Enclave/Enclave_t.c	/^	float ms_ratio;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_allocate_workspace_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_avgpool_layer_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_net_output_return_t	file:
ms_retval	App/Enclave_u.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_allocate_workspace_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_decrypt_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_encrypt_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_avgpool_layer_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_connected_layer_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_net_output_return_t	file:
ms_retval	Enclave/Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_saturation	App/Enclave_u.c	/^	float ms_saturation;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_saturation	Enclave/Enclave_t.c	/^	float ms_saturation;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_scale	App/Enclave_u.c	/^	float ms_scale;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_scale	Enclave/Enclave_t.c	/^	float ms_scale;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_session_token	App/Enclave_u.c	/^	int ms_session_token;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_session_token	Enclave/Enclave_t.c	/^	int ms_session_token;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_size	App/Enclave_u.c	/^	int ms_size;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_size	App/Enclave_u.c	/^	int ms_size;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_size	Enclave/Enclave_t.c	/^	int ms_size;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_size	Enclave/Enclave_t.c	/^	int ms_size;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_spatial	App/Enclave_u.c	/^	int ms_spatial;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_spatial	Enclave/Enclave_t.c	/^	int ms_spatial;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_start_index	App/Enclave_u.c	/^	int ms_start_index;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_start_index	Enclave/Enclave_t.c	/^	int ms_start_index;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_str	App/Enclave_u.c	/^	const char* ms_str;$/;"	m	struct:ms_ocall_print_t	file:
ms_str	Enclave/Enclave_t.c	/^	const char* ms_str;$/;"	m	struct:ms_ocall_print_t	file:
ms_stride	App/Enclave_u.c	/^	int ms_stride;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_stride	App/Enclave_u.c	/^	int ms_stride;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_stride	Enclave/Enclave_t.c	/^	int ms_stride;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_stride	Enclave/Enclave_t.c	/^	int ms_stride;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_subdivisions	App/Enclave_u.c	/^	int ms_subdivisions;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_subdivisions	Enclave/Enclave_t.c	/^	int ms_subdivisions;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_tag_buffer	App/Enclave_u.c	/^	uint8_t* ms_tag_buffer;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_tag_buffer	App/Enclave_u.c	/^	uint8_t* ms_tag_buffer;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_tag_buffer	App/Enclave_u.c	/^	uint8_t* ms_tag_buffer;$/;"	m	struct:ms_ecall_net_output_return_t	file:
ms_tag_buffer	Enclave/Enclave_t.c	/^	uint8_t* ms_tag_buffer;$/;"	m	struct:ms_ecall_attest_session_token_t	file:
ms_tag_buffer	Enclave/Enclave_t.c	/^	uint8_t* ms_tag_buffer;$/;"	m	struct:ms_ecall_forward_network_t	file:
ms_tag_buffer	Enclave/Enclave_t.c	/^	uint8_t* ms_tag_buffer;$/;"	m	struct:ms_ecall_net_output_return_t	file:
ms_tag_length	App/Enclave_u.c	/^	int ms_tag_length;$/;"	m	struct:ms_ecall_net_output_return_t	file:
ms_tag_length	Enclave/Enclave_t.c	/^	int ms_tag_length;$/;"	m	struct:ms_ecall_net_output_return_t	file:
ms_temperature	App/Enclave_u.c	/^	float ms_temperature;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_temperature	Enclave/Enclave_t.c	/^	float ms_temperature;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_thresh	App/Enclave_u.c	/^	float ms_thresh;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_thresh	Enclave/Enclave_t.c	/^	float ms_thresh;$/;"	m	struct:ms_ecall_make_cost_layer_t	file:
ms_time_steps	App/Enclave_u.c	/^	int ms_time_steps;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_time_steps	Enclave/Enclave_t.c	/^	int ms_time_steps;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_type	App/Enclave_u.c	/^	char ms_type;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_type	Enclave/Enclave_t.c	/^	char ms_type;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_value	App/Enclave_u.c	/^	float ms_value;$/;"	m	struct:ms_ocall_print_t	file:
ms_value	Enclave/Enclave_t.c	/^	float ms_value;$/;"	m	struct:ms_ocall_print_t	file:
ms_vec	App/Enclave_u.c	/^	float* ms_vec;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_vec	Enclave/Enclave_t.c	/^	float* ms_vec;$/;"	m	struct:ms_ecall_transfer_weights_t	file:
ms_w	App/Enclave_u.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_avgpool_layer_t	file:
ms_w	App/Enclave_u.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_w	App/Enclave_u.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_w	App/Enclave_u.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_w	App/Enclave_u.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_w	App/Enclave_u.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_w	Enclave/Enclave_t.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_avgpool_layer_t	file:
ms_w	Enclave/Enclave_t.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_w	Enclave/Enclave_t.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_dropout_layer_t	file:
ms_w	Enclave/Enclave_t.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_maxpool_layer_t	file:
ms_w	Enclave/Enclave_t.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_network_t	file:
ms_w	Enclave/Enclave_t.c	/^	int ms_w;$/;"	m	struct:ms_ecall_make_softmax_layer_t	file:
ms_workspace_size	App/Enclave_u.c	/^	int ms_workspace_size;$/;"	m	struct:ms_ecall_allocate_workspace_t	file:
ms_workspace_size	Enclave/Enclave_t.c	/^	int ms_workspace_size;$/;"	m	struct:ms_ecall_allocate_workspace_t	file:
ms_xnor	App/Enclave_u.c	/^	int ms_xnor;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
ms_xnor	Enclave/Enclave_t.c	/^	int ms_xnor;$/;"	m	struct:ms_ecall_make_convolutional_layer_t	file:
mse_array	App/utils.cpp	/^float mse_array(float *a, int n)$/;"	f
mul_cpu	App/blas.cpp	/^void mul_cpu(int N, float *X, int INCX, float *Y, int INCY)$/;"	f
mult_add_into_cpu	App/blas.cpp	/^void mult_add_into_cpu(int N, float *X, float *Y, float *Z)$/;"	f
mutex	App/data.cpp	/^pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
n	App/darknet.h	/^    int n;$/;"	m	struct:__anon10
n	App/darknet.h	/^    int n;$/;"	m	struct:layer
n	App/darknet.h	/^    int n;$/;"	m	struct:load_args
n	App/darknet.h	/^    int n;$/;"	m	struct:network
n	Enclave/darknet_TA.h	/^    int n;$/;"	m	struct:__anon1
n	Enclave/darknet_TA.h	/^    int n;$/;"	m	struct:layer_TA
n	Enclave/darknet_TA.h	/^    int n;$/;"	m	struct:network_TA
name	App/darknet.h	/^    char **name;$/;"	m	struct:__anon10
name	Enclave/darknet_TA.h	/^    char **name;$/;"	m	struct:__anon1
nbiases	App/darknet.h	/^    int nbiases;$/;"	m	struct:layer
nbiases	Enclave/darknet_TA.h	/^    int nbiases;$/;"	m	struct:layer_TA
net	App/parser.cpp	/^    network *net;$/;"	m	struct:size_params	file:
net_attestation_buffer	App/App.cpp	/^char *net_attestation_buffer;$/;"	v
net_delta_back	App/App.cpp	/^float *net_delta_back;$/;"	v
net_input_back	App/App.cpp	/^float *net_input_back;$/;"	v
net_output_back	App/App.cpp	/^float *net_output_back;$/;"	v
net_tag_buffer	App/App.cpp	/^uint8_t *net_tag_buffer;$/;"	v
netnum	Enclave/Enclave.cpp	/^int netnum = 0;$/;"	v
netnum	Enclave/darknet_TA.h	/^    int netnum;$/;"	m	struct:layer_TA
netta	Enclave/Enclave.cpp	/^network_TA netta;$/;"	v
netta_truth	Enclave/Enclave.cpp	/^float *netta_truth;$/;"	v
network	App/darknet.h	/^typedef struct network network;$/;"	t	typeref:struct:network
network	App/darknet.h	/^typedef struct network{$/;"	s
network	App/darknet.h	/^} network;$/;"	t	typeref:struct:network
network_TA	Enclave/darknet_TA.h	/^typedef struct network_TA network_TA;$/;"	t	typeref:struct:network_TA
network_TA	Enclave/darknet_TA.h	/^typedef struct network_TA{$/;"	s
network_TA	Enclave/darknet_TA.h	/^} network_TA;$/;"	t	typeref:struct:network_TA
network_accuracy	App/network.cpp	/^float network_accuracy(network *net, data d)$/;"	f
network_height	App/network.cpp	/^int network_height(network *net){return net->h;}$/;"	f
network_inputs	App/network.cpp	/^int network_inputs(network *net)$/;"	f
network_output	App/network.cpp	/^float *network_output(network *net)$/;"	f
network_output_layer	App/network.cpp	/^layer network_output_layer(network *net)$/;"	f
network_outputs	App/network.cpp	/^int network_outputs(network *net)$/;"	f
network_predict	App/network.cpp	/^float *network_predict(network *net, float *input)$/;"	f
network_predict_data	App/network.cpp	/^matrix network_predict_data(network *net, data test)$/;"	f
network_width	App/network.cpp	/^int network_width(network *net){return net->w;}$/;"	f
next	App/darknet.h	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node::node
nh	App/darknet.h	/^    int nh;$/;"	m	struct:load_args
noadjust	App/darknet.h	/^    int noadjust;$/;"	m	struct:layer
noadjust	Enclave/darknet_TA.h	/^    int noadjust;$/;"	m	struct:layer_TA
node	App/darknet.h	/^typedef struct node{$/;"	s
node	App/darknet.h	/^} node;$/;"	t	typeref:struct:node
noloss	App/darknet.h	/^    int noloss;$/;"	m	struct:layer
noloss	Enclave/darknet_TA.h	/^    int noloss;$/;"	m	struct:layer_TA
nomore	App/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon31
noobject_scale	App/darknet.h	/^    float noobject_scale;$/;"	m	struct:layer
noobject_scale	Enclave/darknet_TA.h	/^    float noobject_scale;$/;"	m	struct:layer_TA
normalize_array	App/utils.cpp	/^void normalize_array(float *a, int n)$/;"	f
normalize_cpu	App/blas.cpp	/^void normalize_cpu(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_cpu_TA	Enclave/blas_TA.cpp	/^void normalize_cpu_TA(float *x, float *mean, float *variance, int batch, int filters, int spatial)$/;"	f
normalize_data_rows	App/data.cpp	/^void normalize_data_rows(data d)$/;"	f
normalize_image	App/image.cpp	/^void normalize_image(image p)$/;"	f
normalize_image2	App/image.cpp	/^void normalize_image2(image p)$/;"	f
norms	App/darknet.h	/^    float * norms;$/;"	m	struct:layer
norms	Enclave/darknet_TA.h	/^    float * norms;$/;"	m	struct:layer_TA
notruth	App/darknet.h	/^    int notruth;$/;"	m	struct:network
notruth	Enclave/darknet_TA.h	/^    int notruth;$/;"	m	struct:network_TA
nr_ecall	Enclave/Enclave_t.c	/^	size_t nr_ecall;$/;"	m	struct:__anon7	file:
nr_ocall	App/Enclave_u.c	/^	size_t nr_ocall;$/;"	m	struct:__anon44	file:
nr_ocall	Enclave/Enclave_t.c	/^	size_t nr_ocall;$/;"	m	struct:__anon9	file:
num_bits	App/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon35
num_boxes	App/darknet.h	/^    int *num_boxes;$/;"	m	struct:__anon21
num_boxes	App/darknet.h	/^    int num_boxes;$/;"	m	struct:load_args
num_channels	App/stb_image.h	/^   int num_channels;$/;"	m	struct:__anon28
num_of_digits_int	Enclave/Enclave.cpp	/^int num_of_digits_int(int a)$/;"	f
num_steps	App/darknet.h	/^    int num_steps;$/;"	m	struct:network
num_steps	Enclave/darknet_TA.h	/^    int num_steps;$/;"	m	struct:network_TA
numload	App/darknet.h	/^    int numload;$/;"	m	struct:layer
numload	Enclave/darknet_TA.h	/^    int numload;$/;"	m	struct:layer_TA
nw	App/darknet.h	/^    int nw;$/;"	m	struct:load_args
nweights	App/darknet.h	/^    int nweights;$/;"	m	struct:layer
nweights	Enclave/darknet_TA.h	/^    int nweights;$/;"	m	struct:layer_TA
o_cpu	App/darknet.h	/^    float *o_cpu;$/;"	m	struct:layer
o_cpu	Enclave/darknet_TA.h	/^    float *o_cpu;$/;"	m	struct:layer_TA
object_scale	App/darknet.h	/^    float object_scale;$/;"	m	struct:layer
object_scale	Enclave/darknet_TA.h	/^    float object_scale;$/;"	m	struct:layer_TA
objectness	App/darknet.h	/^    float objectness;$/;"	m	struct:detection
objectness	App/darknet.h	/^    int objectness;$/;"	m	struct:layer
objectness	Enclave/darknet_TA.h	/^    int objectness;$/;"	m	struct:layer_TA
ocall_print	App/App.cpp	/^void ocall_print(const char* str, float value) {$/;"	f
ocall_print	Enclave/Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_print(const char* str, float value)$/;"	f
ocall_table_Enclave	App/Enclave_u.c	/^} ocall_table_Enclave = {$/;"	v	typeref:struct:__anon44	file:
offset	App/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon39
one_hot_encode	App/utils.cpp	/^float **one_hot_encode(float *a, int n, int k)$/;"	f
onlyforward	App/darknet.h	/^    int onlyforward;$/;"	m	struct:layer
onlyforward	Enclave/darknet_TA.h	/^    int onlyforward;$/;"	m	struct:layer_TA
option_find	App/option_list.cpp	/^char *option_find(list *l, char *key)$/;"	f
option_find_float	App/option_list.cpp	/^float option_find_float(list *l, char *key, float def)$/;"	f
option_find_float_quiet	App/option_list.cpp	/^float option_find_float_quiet(list *l, char *key, float def)$/;"	f
option_find_int	App/option_list.cpp	/^int option_find_int(list *l, char *key, int def)$/;"	f
option_find_int_quiet	App/option_list.cpp	/^int option_find_int_quiet(list *l, char *key, int def)$/;"	f
option_find_str	App/option_list.cpp	/^char *option_find_str(list *l, char *key, char *def)$/;"	f
option_insert	App/option_list.cpp	/^void option_insert(list *l, char *key, char *val)$/;"	f
option_unused	App/option_list.cpp	/^void option_unused(list *l)$/;"	f
options	App/parser.cpp	/^    list *options;$/;"	m	struct:__anon46	file:
or_image	App/data.cpp	/^void or_image(image src, image dest, int c)$/;"	f
order	App/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon31
out	App/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon37
out	App/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon42
out_c	App/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_c	Enclave/darknet_TA.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer_TA
out_h	App/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_h	App/darknet.h	/^    int out_h;$/;"	m	struct:load_args
out_h	Enclave/darknet_TA.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer_TA
out_w	App/darknet.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer
out_w	App/darknet.h	/^    int out_w;$/;"	m	struct:load_args
out_w	Enclave/darknet_TA.h	/^    int out_h, out_w, out_c;$/;"	m	struct:layer_TA
output	App/darknet.h	/^    float * output;$/;"	m	struct:layer
output	App/darknet.h	/^    float *output;$/;"	m	struct:network
output	Enclave/darknet_TA.h	/^    float * output;$/;"	m	struct:layer_TA
output	Enclave/darknet_TA.h	/^    float *output;$/;"	m	struct:network_TA
output_layer	App/darknet.h	/^    struct layer *output_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
output_layer	Enclave/darknet_TA.h	/^    struct layer_TA *output_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
outputs	App/darknet.h	/^    int outputs;$/;"	m	struct:layer
outputs	App/darknet.h	/^    int outputs;$/;"	m	struct:network
outputs	Enclave/darknet_TA.h	/^    int outputs;$/;"	m	struct:layer_TA
outputs	Enclave/darknet_TA.h	/^    int outputs;$/;"	m	struct:network_TA
pad	App/darknet.h	/^    int pad;$/;"	m	struct:layer
pad	Enclave/darknet_TA.h	/^    int pad;$/;"	m	struct:layer_TA
pal	App/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon42
parent	App/darknet.h	/^    int *parent;$/;"	m	struct:__anon10
parent	Enclave/darknet_TA.h	/^    int *parent;$/;"	m	struct:__anon1
parse	App/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon42
parse_avgpool	App/parser.cpp	/^avgpool_layer parse_avgpool(list *options, size_params params)$/;"	f
parse_connected	App/parser.cpp	/^layer parse_connected(list *options, size_params params)$/;"	f
parse_convolutional	App/parser.cpp	/^convolutional_layer parse_convolutional(list *options, size_params params)$/;"	f
parse_cost	App/parser.cpp	/^cost_layer parse_cost(list *options, size_params params)$/;"	f
parse_csv_line	App/utils.cpp	/^list *parse_csv_line(char *line)$/;"	f
parse_data	App/parser.cpp	/^void parse_data(char *data, float *a, int n)$/;"	f
parse_dropout	App/parser.cpp	/^dropout_layer parse_dropout(list *options, size_params params, float *net_prev_output, float *net_prev_delta)$/;"	f
parse_fields	App/utils.cpp	/^float *parse_fields(char *line, int n)$/;"	f
parse_maxpool	App/parser.cpp	/^maxpool_layer parse_maxpool(list *options, size_params params)$/;"	f
parse_net_options	App/parser.cpp	/^void parse_net_options(list *options, network *net)$/;"	f
parse_network_cfg	App/parser.cpp	/^network *parse_network_cfg(char *filename)$/;"	f
parse_softmax	App/parser.cpp	/^layer parse_softmax(list *options, size_params params)$/;"	f
path	App/darknet.h	/^    char *path;$/;"	m	struct:load_args
paths	App/darknet.h	/^    char **paths;$/;"	m	struct:load_args
place_image	App/image.cpp	/^void place_image(image im, int w, int h, int dx, int dy, image canvas)$/;"	f
plse_activate	App/activations.h	/^static inline float plse_activate(float x)$/;"	f
plse_activate_TA	Enclave/activations_TA.h	/^static inline float plse_activate_TA(float x)$/;"	f
plse_gradient	App/activations.h	/^static inline float plse_gradient(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f
plse_gradient_TA	Enclave/activations_TA.h	/^static inline float plse_gradient_TA(float x){return (x < 0 || x > 1) ? .01 : .125;}$/;"	f
pm	App/utils.cpp	/^void pm(int M, int N, float *A)$/;"	f
policy	App/darknet.h	/^    learning_rate_policy policy;$/;"	m	struct:network
policy	Enclave/darknet_TA.h	/^    learning_rate_policy_TA policy;$/;"	m	struct:network_TA
pop_column	App/matrix.cpp	/^float *pop_column(matrix *m, int c)$/;"	f
pow_cpu	App/blas.cpp	/^void pow_cpu(int N, float ALPHA, float *X, int INCX, float *Y, int INCY)$/;"	f
power	App/darknet.h	/^    float power;$/;"	m	struct:network
power	Enclave/darknet_TA.h	/^    float power;$/;"	m	struct:network_TA
predict_classifier	App/App.cpp	/^void predict_classifier(char *datacfg, char *cfgfile, char *weightfile, char *filename, char *tag, char *tag_size, int top, clock_t time)$/;"	f
prefix	App/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon41
prev	App/darknet.h	/^    struct node *prev;$/;"	m	struct:node	typeref:struct:node::node
prev_cell_cpu	App/darknet.h	/^    float *prev_cell_cpu;$/;"	m	struct:layer
prev_cell_cpu	Enclave/darknet_TA.h	/^    float *prev_cell_cpu;$/;"	m	struct:layer_TA
prev_state	App/darknet.h	/^    float * prev_state;$/;"	m	struct:layer
prev_state	Enclave/darknet_TA.h	/^    float * prev_state;$/;"	m	struct:layer_TA
prev_state_cpu	App/darknet.h	/^    float * prev_state_cpu;$/;"	m	struct:layer
prev_state_cpu	Enclave/darknet_TA.h	/^    float * prev_state_cpu;$/;"	m	struct:layer_TA
print_error_message	App/App.cpp	/^void print_error_message(sgx_status_t ret) {$/;"	f
print_image	App/image.cpp	/^void print_image(image m)$/;"	f
print_letters	App/data.cpp	/^void print_letters(float *pred, int n)$/;"	f
print_matrix	App/matrix.cpp	/^void print_matrix(matrix m)$/;"	f
print_network	App/network.cpp	/^void print_network(network *net)$/;"	f
print_statistics	App/utils.cpp	/^void print_statistics(float *a, int n)$/;"	f
prob	App/darknet.h	/^    float *prob;$/;"	m	struct:detection
probability	App/darknet.h	/^    float probability;$/;"	m	struct:layer
probability	Enclave/darknet_TA.h	/^    float probability;$/;"	m	struct:layer_TA
progressive	App/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon31
r_cpu	App/darknet.h	/^    float *r_cpu;$/;"	m	struct:layer
r_cpu	Enclave/darknet_TA.h	/^    float *r_cpu;$/;"	m	struct:layer_TA
rad	App/darknet.h	/^    float rad;$/;"	m	struct:__anon18
ramp_activate	App/activations.h	/^static inline float ramp_activate(float x){return x*(x>0)+.1*x;}$/;"	f
ramp_activate_TA	Enclave/activations_TA.h	/^static inline float ramp_activate_TA(float x){return x*(x>0)+.1*x;}$/;"	f
ramp_gradient	App/activations.h	/^static inline float ramp_gradient(float x){return (x>0)+.1;}$/;"	f
ramp_gradient_TA	Enclave/activations_TA.h	/^static inline float ramp_gradient_TA(float x){return (x>0)+.1;}$/;"	f
rand	App/darknet.h	/^    float * rand;$/;"	m	struct:layer
rand	Enclave/darknet_TA.h	/^    float * rand;$/;"	m	struct:layer_TA
rand	Enclave/math_TA.cpp	/^int rand(int start_range, int end_range)$/;"	f
rand_int	App/utils.cpp	/^int rand_int(int min, int max)$/;"	f
rand_normal	App/utils.cpp	/^float rand_normal()$/;"	f
rand_normal_TA	Enclave/utils_TA.cpp	/^float rand_normal_TA(float mu, float sigma){$/;"	f
rand_normal_ms	App/utils.cpp	/^float rand_normal_ms(float mu, float sigma){$/;"	f
rand_scale	App/utils.cpp	/^float rand_scale(float s)$/;"	f
rand_size_t	App/utils.cpp	/^size_t rand_size_t()$/;"	f
rand_uniform	App/utils.cpp	/^float rand_uniform(float min, float max)$/;"	f
rand_uniform_TA	Enclave/utils_TA.cpp	/^float rand_uniform_TA(float min, float max)$/;"	f
random	App/darknet.h	/^    int random;$/;"	m	struct:layer
random	App/darknet.h	/^    int random;$/;"	m	struct:network
random	Enclave/darknet_TA.h	/^    int random;$/;"	m	struct:layer_TA
random	Enclave/darknet_TA.h	/^    int random;$/;"	m	struct:network_TA
random_augment_args	App/image.cpp	/^augment_args random_augment_args(image im, float angle, float aspect, int low, int high, int w, int h)$/;"	f
random_augment_image	App/image.cpp	/^image random_augment_image(image im, float angle, float aspect, int low, int high, int w, int h)$/;"	f
random_crop_image	App/image.cpp	/^image random_crop_image(image im, int w, int h)$/;"	f
random_distort_image	App/image.cpp	/^void random_distort_image(image im, float hue, float saturation, float exposure)$/;"	f
random_index_order	App/utils.cpp	/^int *random_index_order(int min, int max)$/;"	f
randomize_boxes	App/data.cpp	/^void randomize_boxes(box_label *b, int n)$/;"	f
randomize_data	App/data.cpp	/^void randomize_data(data d)$/;"	f
ratio	App/darknet.h	/^    float ratio;$/;"	m	struct:layer
ratio	App/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon42
ratio	Enclave/darknet_TA.h	/^    float ratio;$/;"	m	struct:layer_TA
raw_coeff	App/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon31::__anon32
raw_data	App/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon31::__anon32
rcon	Enclave/aes-internal.cpp	/^const aes_uint rcon[] = {$/;"	v
rcons	Enclave/aes-internal.cpp	/^const aes_uchar rcons[] = {$/;"	v
read	App/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon25
read_all	App/utils.cpp	/^void read_all(int fd, char *buffer, size_t bytes)$/;"	f
read_all_fail	App/utils.cpp	/^int read_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
read_boxes	App/data.cpp	/^box_label *read_boxes(char *filename, int *n)$/;"	f
read_cfg	App/parser.cpp	/^list *read_cfg(char *filename)$/;"	f
read_data_cfg	App/option_list.cpp	/^list *read_data_cfg(char *filename)$/;"	f
read_file	App/utils.cpp	/^unsigned char *read_file(char *filename)$/;"	f
read_from_callbacks	App/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon26
read_int	App/utils.cpp	/^int read_int(int fd)$/;"	f
read_intlist	App/utils.cpp	/^int *read_intlist(char *gpu_list, int *ngpus, int d)$/;"	f
read_map	App/utils.cpp	/^int *read_map(char *filename)$/;"	f
read_option	App/option_list.cpp	/^int read_option(char *s, list *options)$/;"	f
read_tree	App/tree.cpp	/^tree *read_tree(char *filename)$/;"	f
readdata	App/socket_server.cpp	/^bool readdata(int sock, void *buf, int buflen)$/;"	f
readfile	App/socket_server.cpp	/^bool readfile(int sock, FILE *f, FILE *f1)$/;"	f
readlong	App/socket_server.cpp	/^bool readlong(int sock, long *value)$/;"	f
relie_activate	App/activations.h	/^static inline float relie_activate(float x){return (x>0) ? x : .01*x;}$/;"	f
relie_activate_TA	Enclave/activations_TA.h	/^static inline float relie_activate_TA(float x){return (x>0) ? x : .01*x;}$/;"	f
relie_gradient	App/activations.h	/^static inline float relie_gradient(float x){return (x>0) ? 1 : .01;}$/;"	f
relie_gradient_TA	Enclave/activations_TA.h	/^static inline float relie_gradient_TA(float x){return (x>0) ? 1 : .01;}$/;"	f
relu_activate	App/activations.h	/^static inline float relu_activate(float x){return x*(x>0);}$/;"	f
relu_activate_TA	Enclave/activations_TA.h	/^static inline float relu_activate_TA(float x){return x*(x>0);}$/;"	f
relu_gradient	App/activations.h	/^static inline float relu_gradient(float x){return (x>0);}$/;"	f
relu_gradient_TA	Enclave/activations_TA.h	/^static inline float relu_gradient_TA(float x){return (x>0);}$/;"	f
remote_attestation	App/App.cpp	/^int remote_attestation(void)$/;"	f
reorg	App/darknet.h	/^    int reorg;$/;"	m	struct:layer
reorg	Enclave/darknet_TA.h	/^    int reorg;$/;"	m	struct:layer_TA
reorg_cpu	App/blas.cpp	/^void reorg_cpu(float *x, int w, int h, int c, int batch, int stride, int forward, float *out)$/;"	f
resample	App/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon33
resample_row_1	App/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	App/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	App/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon31
rescore	App/darknet.h	/^    int rescore;$/;"	m	struct:layer
rescore	Enclave/darknet_TA.h	/^    int rescore;$/;"	m	struct:layer_TA
reset_layer	App/darknet.h	/^    struct layer *reset_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
reset_layer	Enclave/darknet_TA.h	/^    struct layer_TA *reset_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
resize_data	App/data.cpp	/^data resize_data(data orig, int w, int h)$/;"	f
resize_image	App/image.cpp	/^image resize_image(image im, int w, int h)$/;"	f
resize_matrix	App/matrix.cpp	/^matrix resize_matrix(matrix m, int size)$/;"	f
resize_max	App/image.cpp	/^image resize_max(image im, int max)$/;"	f
resize_min	App/image.cpp	/^image resize_min(image im, int min)$/;"	f
resized	App/darknet.h	/^    image *resized;$/;"	m	struct:load_args
restart_interval	App/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon31
reverse	App/darknet.h	/^    int reverse;$/;"	m	struct:layer
reverse	Enclave/darknet_TA.h	/^    int reverse;$/;"	m	struct:layer_TA
reverse	Enclave/math_TA.cpp	/^void reverse(char *str, int len)$/;"	f
rgb	App/stb_image.h	/^   int            rgb;$/;"	m	struct:__anon31
rgb_to_hsv	App/image.cpp	/^void rgb_to_hsv(image im)$/;"	f
rgb_to_yuv	App/image.cpp	/^void rgb_to_yuv(image im)$/;"	f
rgbgr_image	App/image.cpp	/^void rgbgr_image(image im)$/;"	f
right	App/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon23
rolling_mean	App/darknet.h	/^    float * rolling_mean;$/;"	m	struct:layer
rolling_mean	Enclave/darknet_TA.h	/^    float * rolling_mean;$/;"	m	struct:layer_TA
rolling_variance	App/darknet.h	/^    float * rolling_variance;$/;"	m	struct:layer
rolling_variance	Enclave/darknet_TA.h	/^    float * rolling_variance;$/;"	m	struct:layer_TA
rotate_crop_image	App/image.cpp	/^image rotate_crop_image(image im, float rad, float s, int w, int h, float dx, float dy, float aspect)$/;"	f
rotate_image	App/image.cpp	/^image rotate_image(image im, float rad)$/;"	f
rotate_image_cw	App/image.cpp	/^void rotate_image_cw(image im, int times)$/;"	f
rotr	Enclave/aes-internal.h	/^static inline aes_uint rotr(aes_uint val, int bits)$/;"	f
roundnum	Enclave/Enclave.cpp	/^int roundnum = 0;$/;"	v
rows	App/darknet.h	/^    int rows, cols;$/;"	m	struct:matrix
rsbox	Enclave/aes_TA.cpp	/^static const uint8_t rsbox[256] = {$/;"	v	file:
run_classifier	App/App.cpp	/^void run_classifier(int argc, char **argv)$/;"	f
s	App/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon31
s	App/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon37
sample_array	App/utils.cpp	/^int sample_array(float *a, int n)$/;"	f
saturate_exposure_image	App/image.cpp	/^void saturate_exposure_image(image im, float sat, float exposure)$/;"	f
saturate_image	App/image.cpp	/^void saturate_image(image im, float sat)$/;"	f
saturation	App/darknet.h	/^    float saturation;$/;"	m	struct:layer
saturation	App/darknet.h	/^    float saturation;$/;"	m	struct:load_args
saturation	App/darknet.h	/^    float saturation;$/;"	m	struct:network
saturation	Enclave/darknet_TA.h	/^    float saturation;$/;"	m	struct:layer_TA
saturation	Enclave/darknet_TA.h	/^    float saturation;$/;"	m	struct:network_TA
save_image	App/image.cpp	/^void save_image(image im, const char *name)$/;"	f
save_image_options	App/image.cpp	/^void save_image_options(image im, const char *name, IMTYPE f, int quality)$/;"	f
sbox	Enclave/aes_TA.cpp	/^static const uint8_t sbox[256] = {$/;"	v	file:
scal_cpu	App/blas.cpp	/^void scal_cpu(int N, float ALPHA, float *X, int INCX)$/;"	f
scal_cpu_TA	Enclave/blas_TA.cpp	/^void scal_cpu_TA(int N, float ALPHA, float *X, int INCX)$/;"	f
scale	App/darknet.h	/^    float scale;$/;"	m	struct:__anon18
scale	App/darknet.h	/^    float scale;$/;"	m	struct:layer
scale	App/darknet.h	/^    float scale;$/;"	m	struct:network
scale	App/darknet.h	/^    int scale;$/;"	m	struct:load_args
scale	Enclave/darknet_TA.h	/^    float scale;$/;"	m	struct:layer_TA
scale	Enclave/darknet_TA.h	/^    float scale;$/;"	m	struct:network_TA
scale_array	App/utils.cpp	/^void scale_array(float *a, int n, float s)$/;"	f
scale_bias_TA	Enclave/Enclave.cpp	/^void scale_bias_TA(float *output, float *scales, int batch, int n, int size)$/;"	f
scale_data_rows	App/data.cpp	/^void scale_data_rows(data d, float s)$/;"	f
scale_image	App/image.cpp	/^void scale_image(image m, float s)$/;"	f
scale_image_channel	App/image.cpp	/^void scale_image_channel(image im, int c, float v)$/;"	f
scale_m	App/darknet.h	/^    float * scale_m;$/;"	m	struct:layer
scale_m	Enclave/darknet_TA.h	/^    float * scale_m;$/;"	m	struct:layer_TA
scale_matrix	App/matrix.cpp	/^void scale_matrix(matrix m, float scale)$/;"	f
scale_updates	App/darknet.h	/^    float * scale_updates;$/;"	m	struct:layer
scale_updates	Enclave/darknet_TA.h	/^    float * scale_updates;$/;"	m	struct:layer_TA
scale_v	App/darknet.h	/^    float * scale_v;$/;"	m	struct:layer
scale_v	Enclave/darknet_TA.h	/^    float * scale_v;$/;"	m	struct:layer_TA
scales	App/darknet.h	/^    float * scales;$/;"	m	struct:layer
scales	App/darknet.h	/^    float *scales;$/;"	m	struct:network
scales	Enclave/darknet_TA.h	/^    float * scales;$/;"	m	struct:layer_TA
scales	Enclave/darknet_TA.h	/^    float *scales;$/;"	m	struct:network_TA
scan_n	App/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon31
section	App/parser.cpp	/^}section;$/;"	t	typeref:struct:__anon46	file:
seen	App/darknet.h	/^    size_t *seen;$/;"	m	struct:network
seen	Enclave/darknet_TA.h	/^    size_t *seen;$/;"	m	struct:network_TA
select_data	App/data.cpp	/^data select_data(data *orig, int *inds)$/;"	f
self_layer	App/darknet.h	/^    struct layer *self_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
self_layer	Enclave/darknet_TA.h	/^    struct layer_TA *self_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
selu_activate	App/activations.h	/^static inline float selu_activate(float x){return (x >= 0)*1.0507*x + (x < 0)*1.0507*1.6732*(exp(x)-1);}$/;"	f
selu_activate_TA	Enclave/activations_TA.h	/^static inline float selu_activate_TA(float x){return (x >= 0)*1.0507*x + (x < 0)*1.0507*1.6732*(ta_exp(x)-1);}$/;"	f
selu_gradient	App/activations.h	/^static inline float selu_gradient(float x){return (x >= 0)*1.0507 + (x < 0)*(x + 1.0507*1.6732);}$/;"	f
selu_gradient_TA	Enclave/activations_TA.h	/^static inline float selu_gradient_TA(float x){return (x >= 0)*1.0507 + (x < 0)*(x + 1.0507*1.6732);}$/;"	f
senddata	App/socket_client.cpp	/^bool senddata(int sock, void *buf, int buflen)$/;"	f
sendfile	App/socket_client.cpp	/^bool sendfile(int sock, FILE *f)$/;"	f
sendlong	App/socket_client.cpp	/^bool sendlong(int sock, long value)$/;"	f
session_token	App/App.cpp	/^uint32_t session_token;$/;"	v
set_batch_network	App/network.cpp	/^void set_batch_network(network *net, int b)$/;"	f
set_pixel	App/image.cpp	/^static void set_pixel(image m, int x, int y, int c, float val)$/;"	f	file:
sgx_ecall_allocate_workspace	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_allocate_workspace(void* pms)$/;"	f	file:
sgx_ecall_attest_session_token	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_attest_session_token(void* pms)$/;"	f	file:
sgx_ecall_decrypt	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_decrypt(void* pms)$/;"	f	file:
sgx_ecall_encrypt	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_encrypt(void* pms)$/;"	f	file:
sgx_ecall_forward_network	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_forward_network(void* pms)$/;"	f	file:
sgx_ecall_make_avgpool_layer	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_make_avgpool_layer(void* pms)$/;"	f	file:
sgx_ecall_make_connected_layer	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_make_connected_layer(void* pms)$/;"	f	file:
sgx_ecall_make_convolutional_layer	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_make_convolutional_layer(void* pms)$/;"	f	file:
sgx_ecall_make_cost_layer	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_make_cost_layer(void* pms)$/;"	f	file:
sgx_ecall_make_dropout_layer	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_make_dropout_layer(void* pms)$/;"	f	file:
sgx_ecall_make_maxpool_layer	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_make_maxpool_layer(void* pms)$/;"	f	file:
sgx_ecall_make_network	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_make_network(void* pms)$/;"	f	file:
sgx_ecall_make_softmax_layer	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_make_softmax_layer(void* pms)$/;"	f	file:
sgx_ecall_net_output_return	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_net_output_return(void* pms)$/;"	f	file:
sgx_ecall_transfer_weights	Enclave/Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_transfer_weights(void* pms)$/;"	f	file:
shallow	App/darknet.h	/^    int shallow;$/;"	m	struct:__anon21
shift	App/darknet.h	/^    float shift;$/;"	m	struct:layer
shift	Enclave/darknet_TA.h	/^    float shift;$/;"	m	struct:layer_TA
shift_right_block	Enclave/aes-gcm.cpp	/^static void shift_right_block(aes_uchar *v)$/;"	f	file:
shortcut	App/darknet.h	/^    int shortcut;$/;"	m	struct:layer
shortcut	Enclave/darknet_TA.h	/^    int shortcut;$/;"	m	struct:layer_TA
shortcut_cpu	App/blas.cpp	/^void shortcut_cpu(int batch, int w1, int h1, int c1, float *add, int w2, int h2, int c2, float s1, float s2, float *out)$/;"	f
show_image	App/image.cpp	/^int show_image(image p, const char *name, int ms)$/;"	f
show_image_collapsed	App/image.cpp	/^void show_image_collapsed(image p, char *name)$/;"	f
show_image_layers	App/image.cpp	/^void show_image_layers(image p, char *name)$/;"	f
show_image_normalized	App/image.cpp	/^void show_image_normalized(image im, const char *name)$/;"	f
show_images	App/image.cpp	/^void show_images(image *ims, int n, char *window)$/;"	f
side	App/darknet.h	/^    int side;$/;"	m	struct:layer
side	Enclave/darknet_TA.h	/^    int side;$/;"	m	struct:layer_TA
simpson	Enclave/math_TA.cpp	/^double simpson(double a, double b,int flag)$/;"	f
size	App/darknet.h	/^    int min, max, size;$/;"	m	struct:load_args
size	App/darknet.h	/^    int size;$/;"	m	struct:layer
size	App/darknet.h	/^    int size;$/;"	m	struct:list
size	App/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon30
size	App/stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon34
size	App/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon40
size	Enclave/darknet_TA.h	/^    int size;$/;"	m	struct:layer_TA
size_params	App/parser.cpp	/^typedef struct size_params{$/;"	s	file:
size_params	App/parser.cpp	/^} size_params;$/;"	t	typeref:struct:size_params	file:
skip	App/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon25
smooth	App/darknet.h	/^    float smooth;$/;"	m	struct:layer
smooth	Enclave/darknet_TA.h	/^    float smooth;$/;"	m	struct:layer_TA
smooth_data	App/data.cpp	/^void smooth_data(data d)$/;"	f
smooth_l1_cpu	App/blas.cpp	/^void smooth_l1_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
smooth_l1_cpu_TA	Enclave/blas_TA.cpp	/^void smooth_l1_cpu_TA(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softmax	App/blas.cpp	/^void softmax(float *input, int n, float temp, int stride, float *output)$/;"	f
softmax	App/darknet.h	/^    int softmax;$/;"	m	struct:layer
softmax	Enclave/darknet_TA.h	/^    int softmax;$/;"	m	struct:layer_TA
softmax_TA	Enclave/blas_TA.cpp	/^void softmax_TA(float *input, int n, float temp, int stride, float *output)$/;"	f
softmax_cpu	App/blas.cpp	/^void softmax_cpu(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_cpu_TA	Enclave/blas_TA.cpp	/^void softmax_cpu_TA(float *input, int n, int batch, int batch_offset, int groups, int group_offset, int stride, float temp, float *output)$/;"	f
softmax_layer	App/softmax_layer.h	/^typedef layer softmax_layer;$/;"	t
softmax_tree	App/darknet.h	/^    tree *softmax_tree;$/;"	m	struct:layer
softmax_tree	Enclave/darknet_TA.h	/^    tree_TA *softmax_tree;$/;"	m	struct:layer_TA
softmax_x_ent_cpu	App/blas.cpp	/^void softmax_x_ent_cpu(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
softmax_x_ent_cpu_TA	Enclave/blas_TA.cpp	/^void softmax_x_ent_cpu_TA(int n, float *pred, float *truth, float *delta, float *error)$/;"	f
sort_class	App/darknet.h	/^    int sort_class;$/;"	m	struct:detection
spatial	App/darknet.h	/^    int spatial;$/;"	m	struct:layer
spatial	Enclave/darknet_TA.h	/^    int spatial;$/;"	m	struct:layer_TA
spatial_mean	App/darknet.h	/^    float * spatial_mean;$/;"	m	struct:layer
spatial_mean	Enclave/darknet_TA.h	/^    float * spatial_mean;$/;"	m	struct:layer_TA
spec_end	App/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon31
spec_start	App/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon31
split_data	App/data.cpp	/^data *split_data(data d, int part, int total)$/;"	f
split_str	App/utils.cpp	/^list *split_str(char *s, char delim)$/;"	f
sqrt	App/darknet.h	/^    int sqrt;$/;"	m	struct:layer
sqrt	Enclave/darknet_TA.h	/^    int sqrt;$/;"	m	struct:layer_TA
squared	App/darknet.h	/^    float * squared;$/;"	m	struct:layer
squared	Enclave/darknet_TA.h	/^    float * squared;$/;"	m	struct:layer_TA
stair_activate	App/activations.h	/^static inline float stair_activate(float x)$/;"	f
stair_activate_TA	Enclave/activations_TA.h	/^static inline float stair_activate_TA(float x)$/;"	f
stair_gradient	App/activations.h	/^static inline float stair_gradient(float x)$/;"	f
stair_gradient_TA	Enclave/activations_TA.h	/^static inline float stair_gradient_TA(float x)$/;"	f
start_x	App/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon42
start_y	App/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon42
state	App/darknet.h	/^    float * state;$/;"	m	struct:layer
state	Enclave/darknet_TA.h	/^    float * state;$/;"	m	struct:layer_TA
state_delta	App/darknet.h	/^    float * state_delta;$/;"	m	struct:layer
state_delta	Enclave/darknet_TA.h	/^    float * state_delta;$/;"	m	struct:layer_TA
state_gate_layer	App/darknet.h	/^    struct layer *state_gate_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_gate_layer	Enclave/darknet_TA.h	/^    struct layer_TA *state_gate_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_h_layer	App/darknet.h	/^    struct layer *state_h_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_h_layer	Enclave/darknet_TA.h	/^    struct layer_TA *state_h_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_layer	App/darknet.h	/^    struct layer *state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_layer	Enclave/darknet_TA.h	/^    struct layer_TA *state_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_r_layer	App/darknet.h	/^    struct layer *state_r_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_r_layer	Enclave/darknet_TA.h	/^    struct layer_TA *state_r_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_save_layer	App/darknet.h	/^    struct layer *state_save_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_save_layer	Enclave/darknet_TA.h	/^    struct layer_TA *state_save_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_state_layer	App/darknet.h	/^    struct layer *state_state_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_state_layer	Enclave/darknet_TA.h	/^    struct layer_TA *state_state_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
state_t	Enclave/aes_TA.cpp	/^typedef uint8_t state_t[4][4];$/;"	t	file:
state_z_layer	App/darknet.h	/^    struct layer *state_z_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
state_z_layer	Enclave/darknet_TA.h	/^    struct layer_TA *state_z_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
stb_image_write_test	App/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__DNL	App/stb_image.h	3084;"	d
stbi__EOI	App/stb_image.h	3086;"	d
stbi__SOF	App/stb_image.h	3087;"	d
stbi__SOF_progressive	App/stb_image.h	3090;"	d
stbi__SOI	App/stb_image.h	3085;"	d
stbi__SOS	App/stb_image.h	3088;"	d
stbi__YCbCr_to_RGB_row	App/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	App/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__addsizes_valid	App/stb_image.h	/^static int stbi__addsizes_valid(int a, int b)$/;"	f
stbi__at_eof	App/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	App/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	App/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	App/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__blinn_8x8	App/stb_image.h	/^static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)$/;"	f
stbi__bmask	App/stb_image.h	/^static const stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_data	App/stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon39
stbi__bmp_info	App/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	App/stb_image.h	/^static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__bmp_parse_header	App/stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f
stbi__bmp_test	App/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	App/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	App/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	App/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	App/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	App/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	App/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	App/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	App/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_transparency16	App/stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f
stbi__compute_y	App/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__compute_y_16	App/stb_image.h	/^static stbi__uint16 stbi__compute_y_16(int r, int g, int b)$/;"	f
stbi__context	App/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon26
stbi__convert_16_to_8	App/stb_image.h	/^static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)$/;"	f
stbi__convert_8_to_16	App/stb_image.h	/^static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)$/;"	f
stbi__convert_format	App/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__convert_format16	App/stb_image.h	/^static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	App/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	App/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	App/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	App/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	App/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	App/stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	App/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	App/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	App/stb_image.h	/^static const stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	App/stb_image.h	3211;"	d
stbi__div4	App/stb_image.h	3162;"	d
stbi__do_png	App/stb_image.h	/^static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)$/;"	f
stbi__do_zlib	App/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__end_write_file	App/stb_image_write.h	/^static void stbi__end_write_file(stbi__write_context *s)$/;"	f
stbi__err	App/stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	App/stb_image.h	942;"	d
stbi__err	App/stb_image.h	944;"	d
stbi__err	App/stb_image.h	946;"	d
stbi__errpf	App/stb_image.h	949;"	d
stbi__errpuc	App/stb_image.h	950;"	d
stbi__expand_png_palette	App/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	App/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	App/stb_image.h	2163;"	d
stbi__fill_bits	App/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__flip_vertically_on_write	App/stb_image_write.h	/^int stbi__flip_vertically_on_write=0;$/;"	v
stbi__flip_vertically_on_write	App/stb_image_write.h	/^static int stbi__flip_vertically_on_write=0;$/;"	v
stbi__float2fixed	App/stb_image.h	3367;"	d
stbi__float2int	App/stb_image.h	1634;"	d
stbi__float_postprocess	App/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	App/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__free_jpeg_components	App/stb_image.h	/^static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)$/;"	f
stbi__fsh	App/stb_image.h	2164;"	d
stbi__g_failure_reason	App/stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	App/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	App/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	App/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	App/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	App/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	App/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	App/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	App/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	App/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon42
stbi__gif_header	App/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	App/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	App/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	App/stb_image.h	/^static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__gif_load_next	App/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stbi_uc *two_back)$/;"	f
stbi__gif_lzw	App/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon41
stbi__gif_parse_colortable	App/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	App/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	App/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	App/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	App/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	App/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	App/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	App/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	App/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	App/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__hdr_test	App/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	App/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s, const char *signature)$/;"	f
stbi__hdr_to_ldr	App/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	App/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	App/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon30
stbi__idct_block	App/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	App/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	App/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__int16	App/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	App/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	App/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	App/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__is_16_main	App/stb_image.h	/^static int stbi__is_16_main(stbi__context *s)$/;"	f
stbi__jbias	App/stb_image.h	/^static const int stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	App/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon31
stbi__jpeg_decode_block	App/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	App/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	App/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	App/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_dezigzag	App/stb_image.h	/^static const stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	App/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	App/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	App/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	App/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	App/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	App/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	App/stb_image.h	/^static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__jpeg_reset	App/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	App/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	App/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	App/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	App/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_and_postprocess_16bit	App/stb_image.h	/^static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_and_postprocess_8bit	App/stb_image.h	/^static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_gif_main	App/stb_image.h	/^static void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp)$/;"	f
stbi__load_main	App/stb_image.h	/^static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__loadf_main	App/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__mad2sizes_valid	App/stb_image.h	/^static int stbi__mad2sizes_valid(int a, int b, int add)$/;"	f
stbi__mad3sizes_valid	App/stb_image.h	/^static int stbi__mad3sizes_valid(int a, int b, int c, int add)$/;"	f
stbi__mad4sizes_valid	App/stb_image.h	/^static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)$/;"	f
stbi__malloc	App/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__malloc_mad2	App/stb_image.h	/^static void *stbi__malloc_mad2(int a, int b, int add)$/;"	f
stbi__malloc_mad3	App/stb_image.h	/^static void *stbi__malloc_mad3(int a, int b, int c, int add)$/;"	f
stbi__malloc_mad4	App/stb_image.h	/^static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)$/;"	f
stbi__mul2sizes_valid	App/stb_image.h	/^static int stbi__mul2sizes_valid(int a, int b)$/;"	f
stbi__out_gif_code	App/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	App/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	App/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	App/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	App/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncompressed_block	App/stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	App/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	App/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	App/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	App/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	App/stb_image.h	/^static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)$/;"	f
stbi__pic_load_core	App/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	App/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon40
stbi__pic_test	App/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	App/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	App/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon37
stbi__png_info	App/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	App/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_is16	App/stb_image.h	/^static int stbi__png_is16(stbi__context *s)$/;"	f
stbi__png_load	App/stb_image.h	/^static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__png_test	App/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	App/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon36
stbi__pnm_getinteger	App/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	App/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	App/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	App/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	App/stb_image.h	/^static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__pnm_skip_whitespace	App/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	App/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	App/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	App/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	App/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	App/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_decode_rle	App/stb_image.h	/^static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)$/;"	f
stbi__psd_info	App/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_is16	App/stb_image.h	/^static int stbi__psd_is16(stbi__context *s)$/;"	f
stbi__psd_load	App/stb_image.h	/^static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__psd_test	App/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	App/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	App/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	App/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon33
stbi__resample_row_generic	App/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	App/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	App/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	App/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	App/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__result_info	App/stb_image.h	/^} stbi__result_info;$/;"	t	typeref:struct:__anon28
stbi__rewind	App/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	App/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	App/stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	App/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	App/stb_image.h	/^static int stbi__sse2_available(void)$/;"	f
stbi__start_callbacks	App/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	App/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	App/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__start_write_callbacks	App/stb_image_write.h	/^static void stbi__start_write_callbacks(stbi__write_context *s, stbi_write_func *c, void *context)$/;"	f
stbi__start_write_file	App/stb_image_write.h	/^static int stbi__start_write_file(stbi__write_context *s, const char *filename)$/;"	f
stbi__stdio_callbacks	App/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	App/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	App/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	App/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__stdio_write	App/stb_image_write.h	/^static void stbi__stdio_write(void *context, void *data, int size)$/;"	f
stbi__tga_get_comp	App/stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f
stbi__tga_info	App/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	App/stb_image.h	/^static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__tga_read_rgb16	App/stb_image.h	/^static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f
stbi__tga_test	App/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	App/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	App/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	App/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	App/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	App/stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertical_flip	App/stb_image.h	/^static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)$/;"	f
stbi__vertical_flip_slices	App/stb_image.h	/^static void stbi__vertical_flip_slices(void *image, int w, int h, int z, int bytes_per_pixel)$/;"	f
stbi__vertically_flip_on_load	App/stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__write_context	App/stb_image_write.h	/^} stbi__write_context;$/;"	t	typeref:struct:__anon43
stbi__zbuf	App/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon35
stbi__zbuild_huffman	App/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	App/stb_image.h	/^static const stbi_uc stbi__zdefault_distance[32] =$/;"	v
stbi__zdefault_length	App/stb_image.h	/^static const stbi_uc stbi__zdefault_length[288] =$/;"	v
stbi__zdist_base	App/stb_image.h	/^static const int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	App/stb_image.h	/^static const int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	App/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	App/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	App/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon34
stbi__zhuffman_decode	App/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	App/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	App/stb_image.h	/^static const int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	App/stb_image.h	/^static const int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	App/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	App/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_failure_reason	App/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_flip_vertically_on_write	App/stb_image_write.h	/^STBIWDEF void stbi_flip_vertically_on_write(int flag)$/;"	f
stbi_hdr_to_ldr_gamma	App/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	App/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	App/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	App/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	App/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	App/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	App/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	App/stb_image.h	531;"	d
stbi_inline	App/stb_image.h	533;"	d
stbi_inline	App/stb_image.h	536;"	d
stbi_io_callbacks	App/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon25
stbi_is_16_bit	App/stb_image.h	/^STBIDEF int stbi_is_16_bit(char const *filename)$/;"	f
stbi_is_16_bit_from_callbacks	App/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)$/;"	f
stbi_is_16_bit_from_file	App/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_file(FILE *f)$/;"	f
stbi_is_16_bit_from_memory	App/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_is_hdr	App/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	App/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	App/stb_image.h	/^STBIDEF int stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	App/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	App/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	App/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	App/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16	App/stb_image.h	/^STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16_from_callbacks	App/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_16_from_memory	App/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_from_callbacks	App/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	App/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file_16	App/stb_image.h	/^STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	App/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_gif_from_memory	App/stb_image.h	/^STBIDEF stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp)$/;"	f
stbi_loadf	App/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	App/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	App/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	App/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	App/stb_image.h	567;"	d
stbi_lrot	App/stb_image.h	569;"	d
stbi_set_flip_vertically_on_load	App/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	App/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	App/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_us	App/stb_image.h	/^typedef unsigned short stbi_us;$/;"	t
stbi_write_bmp	App/stb_image_write.h	/^STBIWDEF int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_core	App/stb_image_write.h	/^static int stbi_write_bmp_core(stbi__write_context *s, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_to_func	App/stb_image_write.h	/^STBIWDEF int stbi_write_bmp_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_force_png_filter	App/stb_image_write.h	/^int stbi_write_force_png_filter = -1;$/;"	v
stbi_write_force_png_filter	App/stb_image_write.h	/^static int stbi_write_force_png_filter = -1;$/;"	v
stbi_write_func	App/stb_image_write.h	/^typedef void stbi_write_func(void *context, void *data, int size);$/;"	t
stbi_write_hdr	App/stb_image_write.h	/^STBIWDEF int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_hdr_core	App/stb_image_write.h	/^static int stbi_write_hdr_core(stbi__write_context *s, int x, int y, int comp, float *data)$/;"	f
stbi_write_hdr_to_func	App/stb_image_write.h	/^STBIWDEF int stbi_write_hdr_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const float *data)$/;"	f
stbi_write_jpg	App/stb_image_write.h	/^STBIWDEF int stbi_write_jpg(char const *filename, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_jpg_core	App/stb_image_write.h	/^static int stbi_write_jpg_core(stbi__write_context *s, int width, int height, int comp, const void* data, int quality) {$/;"	f
stbi_write_jpg_to_func	App/stb_image_write.h	/^STBIWDEF int stbi_write_jpg_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_png	App/stb_image_write.h	/^STBIWDEF int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_compression_level	App/stb_image_write.h	/^int stbi_write_png_compression_level = 8;$/;"	v
stbi_write_png_compression_level	App/stb_image_write.h	/^static int stbi_write_png_compression_level = 8;$/;"	v
stbi_write_png_to_func	App/stb_image_write.h	/^STBIWDEF int stbi_write_png_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	App/stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	App/stb_image_write.h	/^STBIWDEF int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_core	App/stb_image_write.h	/^static int stbi_write_tga_core(stbi__write_context *s, int x, int y, int comp, void *data)$/;"	f
stbi_write_tga_to_func	App/stb_image_write.h	/^STBIWDEF int stbi_write_tga_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_with_rle	App/stb_image_write.h	/^int stbi_write_tga_with_rle = 1;$/;"	v
stbi_write_tga_with_rle	App/stb_image_write.h	/^static int stbi_write_tga_with_rle = 1;$/;"	v
stbi_zlib_compress	App/stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbi_zlib_decode_buffer	App/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	App/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	App/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	App/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	App/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	App/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbiw__ZHASH	App/stb_image_write.h	808;"	d
stbiw__crc32	App/stb_image_write.h	/^static unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__encode_png_line	App/stb_image_write.h	/^static void stbiw__encode_png_line(unsigned char *pixels, int stride_bytes, int width, int height, int y, int n, int filter_type, signed char *line_buffer)$/;"	f
stbiw__jpg_DCT	App/stb_image_write.h	/^static void stbiw__jpg_DCT(float *d0p, float *d1p, float *d2p, float *d3p, float *d4p, float *d5p, float *d6p, float *d7p) {$/;"	f
stbiw__jpg_ZigZag	App/stb_image_write.h	/^static const unsigned char stbiw__jpg_ZigZag[] = { 0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,$/;"	v
stbiw__jpg_calcBits	App/stb_image_write.h	/^static void stbiw__jpg_calcBits(int val, unsigned short bits[2]) {$/;"	f
stbiw__jpg_processDU	App/stb_image_write.h	/^static int stbiw__jpg_processDU(stbi__write_context *s, int *bitBuf, int *bitCnt, float *CDU, float *fdtbl, int DC, const unsigned short HTDC[256][2], const unsigned short HTAC[256][2]) {$/;"	f
stbiw__jpg_writeBits	App/stb_image_write.h	/^static void stbiw__jpg_writeBits(stbi__write_context *s, int *bitBufP, int *bitCntP, const unsigned short *bs) {$/;"	f
stbiw__linear_to_rgbe	App/stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	App/stb_image_write.h	553;"	d
stbiw__outfile	App/stb_image_write.h	/^static int stbiw__outfile(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
stbiw__paeth	App/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__putc	App/stb_image_write.h	/^static void stbiw__putc(stbi__write_context *s, unsigned char c)$/;"	f
stbiw__sbcount	App/stb_image_write.h	740;"	d
stbiw__sbfree	App/stb_image_write.h	741;"	d
stbiw__sbgrow	App/stb_image_write.h	737;"	d
stbiw__sbgrowf	App/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbm	App/stb_image_write.h	732;"	d
stbiw__sbmaybegrow	App/stb_image_write.h	736;"	d
stbiw__sbn	App/stb_image_write.h	733;"	d
stbiw__sbneedgrow	App/stb_image_write.h	735;"	d
stbiw__sbpush	App/stb_image_write.h	739;"	d
stbiw__sbraw	App/stb_image_write.h	731;"	d
stbiw__wp32	App/stb_image_write.h	970;"	d
stbiw__wpcrc	App/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	App/stb_image_write.h	969;"	d
stbiw__wptag	App/stb_image_write.h	971;"	d
stbiw__write3	App/stb_image_write.h	/^static void stbiw__write3(stbi__write_context *s, unsigned char a, unsigned char b, unsigned char c)$/;"	f
stbiw__write_dump_data	App/stb_image_write.h	/^void stbiw__write_dump_data(stbi__write_context *s, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	App/stb_image_write.h	/^void stbiw__write_hdr_scanline(stbi__write_context *s, int width, int ncomp, unsigned char *scratch, float *scanline)$/;"	f
stbiw__write_pixel	App/stb_image_write.h	/^static void stbiw__write_pixel(stbi__write_context *s, int rgb_dir, int comp, int write_alpha, int expand_mono, unsigned char *d)$/;"	f
stbiw__write_pixels	App/stb_image_write.h	/^static void stbiw__write_pixels(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
stbiw__write_run_data	App/stb_image_write.h	/^void stbiw__write_run_data(stbi__write_context *s, int length, unsigned char databyte)$/;"	f
stbiw__writef	App/stb_image_write.h	/^static void stbiw__writef(stbi__write_context *s, const char *fmt, ...)$/;"	f
stbiw__writefv	App/stb_image_write.h	/^static void stbiw__writefv(stbi__write_context *s, const char *fmt, va_list v)$/;"	f
stbiw__zhash	App/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	App/stb_image_write.h	797;"	d
stbiw__zlib_bitrev	App/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	App/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	App/stb_image_write.h	796;"	d
stbiw__zlib_flushf	App/stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff	App/stb_image_write.h	805;"	d
stbiw__zlib_huff1	App/stb_image_write.h	801;"	d
stbiw__zlib_huff2	App/stb_image_write.h	802;"	d
stbiw__zlib_huff3	App/stb_image_write.h	803;"	d
stbiw__zlib_huff4	App/stb_image_write.h	804;"	d
stbiw__zlib_huffa	App/stb_image_write.h	799;"	d
stbiw__zlib_huffb	App/stb_image_write.h	806;"	d
stbiw_uint32	App/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
step	App/darknet.h	/^    int step;$/;"	m	struct:network
step	App/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon42
step	Enclave/darknet_TA.h	/^    int step;$/;"	m	struct:network_TA
steps	App/darknet.h	/^    int   *steps;$/;"	m	struct:network
steps	App/darknet.h	/^    int steps;$/;"	m	struct:layer
steps	Enclave/darknet_TA.h	/^    int   *steps;$/;"	m	struct:network_TA
steps	Enclave/darknet_TA.h	/^    int steps;$/;"	m	struct:layer_TA
stopbackward	App/darknet.h	/^    int stopbackward;$/;"	m	struct:layer
stopbackward	Enclave/darknet_TA.h	/^    int stopbackward;$/;"	m	struct:layer_TA
str_concat	Enclave/Enclave.cpp	/^void str_concat(char* str1, char* str2, uint8_t len)$/;"	f
stride	App/darknet.h	/^    int stride;$/;"	m	struct:layer
stride	Enclave/darknet_TA.h	/^    int stride;$/;"	m	struct:layer_TA
string_to_layer_type	App/parser.cpp	/^LAYER_TYPE string_to_layer_type(char * type)$/;"	f
strip	App/utils.cpp	/^void strip(char *s)$/;"	f
strip_char	App/utils.cpp	/^void strip_char(char *s, char bad)$/;"	f
subdivisions	App/darknet.h	/^    int subdivisions;$/;"	m	struct:network
subdivisions	Enclave/darknet_TA.h	/^    int subdivisions;$/;"	m	struct:network_TA
succ_high	App/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon31
succ_low	App/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon31
suffix	App/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon41
sum_array	App/utils.cpp	/^float sum_array(float *a, int n)$/;"	f
sum_array_TA	Enclave/utils_TA.cpp	/^float sum_array_TA(float *a, int n)$/;"	f
sums	App/darknet.h	/^    float ** sums;$/;"	m	struct:layer
sums	Enclave/darknet_TA.h	/^    float ** sums;$/;"	m	struct:layer_TA
swap_binary_TA	Enclave/Enclave.cpp	/^void swap_binary_TA(layer_TA *l)$/;"	f
t	App/darknet.h	/^    int *t;$/;"	m	struct:network
t	App/darknet.h	/^    int t;$/;"	m	struct:__anon16
t	Enclave/darknet_TA.h	/^    int *t;$/;"	m	struct:network_TA
t	Enclave/darknet_TA.h	/^    int t;$/;"	m	struct:__anon5
t3_aad	Enclave/aes-gcm-entry.cpp	/^const unsigned char t3_aad[] = {};$/;"	v
t3_iv	Enclave/aes-gcm-entry.cpp	/^const unsigned char t3_iv[] = {$/;"	v
t3_key	Enclave/aes-gcm-entry.cpp	/^const unsigned char t3_key[] = {$/;"	v
t3_tag	Enclave/aes-gcm-entry.cpp	/^const unsigned char t3_tag[] = {$/;"	v
ta_cos	Enclave/math_TA.cpp	/^double ta_cos(double x)$/;"	f
ta_eee	Enclave/math_TA.cpp	/^double ta_eee(double x)$/;"	f
ta_exp	Enclave/math_TA.cpp	/^double ta_exp(double x)$/;"	f
ta_floor	Enclave/math_TA.cpp	/^int ta_floor(double x)$/;"	f
ta_ln	Enclave/math_TA.cpp	/^double ta_ln(double x)$/;"	f
ta_log	Enclave/math_TA.cpp	/^double ta_log(double a,double N)$/;"	f
ta_max	Enclave/math_TA.cpp	/^float ta_max(float a, float b)$/;"	f
ta_net_delta	Enclave/Enclave.cpp	/^float *ta_net_delta;$/;"	v
ta_net_input	Enclave/Enclave.cpp	/^float *ta_net_input;$/;"	v
ta_net_output	Enclave/Enclave.cpp	/^float *ta_net_output;$/;"	v
ta_pow	Enclave/math_TA.cpp	/^double ta_pow(double a, int n)$/;"	f
ta_rand	Enclave/math_TA.cpp	/^float ta_rand()$/;"	f
ta_sin	Enclave/math_TA.cpp	/^double ta_sin(double x)$/;"	f
ta_sqrt	Enclave/math_TA.cpp	/^double ta_sqrt(double x)$/;"	f
ta_start_index	Enclave/Enclave.cpp	/^int ta_start_index = 1;$/;"	v
ta_tag_buffer	Enclave/Enclave.cpp	/^uint8_t *ta_tag_buffer;$/;"	v
ta_tan	Enclave/math_TA.cpp	/^double ta_tan(double x)$/;"	f
table	App/Enclave_u.c	/^	void * table[1];$/;"	m	struct:__anon44	file:
tanh	App/darknet.h	/^    int tanh;$/;"	m	struct:layer
tanh	Enclave/darknet_TA.h	/^    int tanh;$/;"	m	struct:layer_TA
tanh_activate	App/activations.h	/^static inline float tanh_activate(float x){return (exp(2*x)-1)\/(exp(2*x)+1);}$/;"	f
tanh_activate_TA	Enclave/activations_TA.h	/^static inline float tanh_activate_TA(float x){return (ta_exp(2*x)-1)\/(ta_exp(2*x)+1);}$/;"	f
tanh_gradient	App/activations.h	/^static inline float tanh_gradient(float x){return 1-x*x;}$/;"	f
tanh_gradient_TA	Enclave/activations_TA.h	/^static inline float tanh_gradient_TA(float x){return 1-x*x;}$/;"	f
temp2_cpu	App/darknet.h	/^    float *temp2_cpu;$/;"	m	struct:layer
temp2_cpu	Enclave/darknet_TA.h	/^    float *temp2_cpu;$/;"	m	struct:layer_TA
temp3_cpu	App/darknet.h	/^    float *temp3_cpu;$/;"	m	struct:layer
temp3_cpu	Enclave/darknet_TA.h	/^    float *temp3_cpu;$/;"	m	struct:layer_TA
temp_cpu	App/darknet.h	/^    float *temp_cpu;$/;"	m	struct:layer
temp_cpu	Enclave/darknet_TA.h	/^    float *temp_cpu;$/;"	m	struct:layer_TA
temperature	App/darknet.h	/^    float temperature;$/;"	m	struct:layer
temperature	Enclave/darknet_TA.h	/^    float temperature;$/;"	m	struct:layer_TA
test_resize	App/image.cpp	/^void test_resize(char *filename)$/;"	f
threads	App/darknet.h	/^    int threads;$/;"	m	struct:load_args
three_way_max	App/image.cpp	/^float three_way_max(float a, float b, float c)$/;"	f
three_way_min	App/image.cpp	/^float three_way_min(float a, float b, float c)$/;"	f
thresh	App/darknet.h	/^    float thresh;$/;"	m	struct:layer
thresh	Enclave/darknet_TA.h	/^    float thresh;$/;"	m	struct:layer_TA
threshold_image	App/image.cpp	/^image threshold_image(image im, float thresh)$/;"	f
tile_data	App/data.cpp	/^data *tile_data(data orig, int divs, int size)$/;"	f
tile_images	App/image.cpp	/^image tile_images(image a, image b, int dx)$/;"	f
time_steps	App/darknet.h	/^    int time_steps;$/;"	m	struct:network
time_steps	App/parser.cpp	/^    int time_steps;$/;"	m	struct:size_params	file:
time_steps	Enclave/darknet_TA.h	/^    int time_steps;$/;"	m	struct:network_TA
todo	App/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon31
top	App/darknet.h	/^    float left, right, top, bottom;$/;"	m	struct:__anon23
top_k	App/utils.cpp	/^void top_k(float *a, int n, int k, int *index)$/;"	f
top_predictions	App/network.cpp	/^void top_predictions(network *net, int k, int *index)$/;"	f
total	App/darknet.h	/^    int total;$/;"	m	struct:layer
total	Enclave/darknet_TA.h	/^    int total;$/;"	m	struct:layer_TA
tq	App/stb_image.h	/^      int tq;$/;"	m	struct:__anon31::__anon32
train	App/darknet.h	/^    int train;$/;"	m	struct:network
train	Enclave/darknet_TA.h	/^    int train;$/;"	m	struct:network_TA
translate_array	App/utils.cpp	/^void translate_array(float *a, int n, float s)$/;"	f
translate_data_rows	App/data.cpp	/^void translate_data_rows(data d, float s)$/;"	f
translate_image	App/image.cpp	/^void translate_image(image m, float s)$/;"	f
translate_image_channel	App/image.cpp	/^void translate_image_channel(image im, int c, float v)$/;"	f
transparent	App/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon42
transpose_image	App/image.cpp	/^void transpose_image(image im)$/;"	f
transpose_matrix	App/parser.cpp	/^void transpose_matrix(float *a, int rows, int cols)$/;"	f
transpose_matrix_TA	Enclave/Enclave.cpp	/^void transpose_matrix_TA(float *a, int rows, int cols)$/;"	f
tree	App/darknet.h	/^} tree;$/;"	t	typeref:struct:__anon10
tree_TA	Enclave/darknet_TA.h	/^} tree_TA;$/;"	t	typeref:struct:__anon1
truth	App/darknet.h	/^    float *truth;$/;"	m	struct:network
truth	App/darknet.h	/^    int truth;$/;"	m	struct:layer
truth	Enclave/darknet_TA.h	/^    float *truth;$/;"	m	struct:network_TA
truth	Enclave/darknet_TA.h	/^    int truth;$/;"	m	struct:layer_TA
truth_thresh	App/darknet.h	/^    float truth_thresh;$/;"	m	struct:layer
truth_thresh	Enclave/darknet_TA.h	/^    float truth_thresh;$/;"	m	struct:layer_TA
truths	App/darknet.h	/^    int truths;$/;"	m	struct:layer
truths	App/darknet.h	/^    int truths;$/;"	m	struct:network
truths	Enclave/darknet_TA.h	/^    int truths;$/;"	m	struct:layer_TA
truths	Enclave/darknet_TA.h	/^    int truths;$/;"	m	struct:network_TA
type	App/darknet.h	/^    LAYER_TYPE type;$/;"	m	struct:layer
type	App/darknet.h	/^    data_type type;$/;"	m	struct:load_args
type	App/parser.cpp	/^    char *type;$/;"	m	struct:__anon46	file:
type	App/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon36
type	App/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon40
type	Enclave/darknet_TA.h	/^    LAYER_TYPE_TA type;$/;"	m	struct:layer_TA
uf	App/darknet.h	/^    struct layer *uf;$/;"	m	struct:layer	typeref:struct:layer::layer
uf	Enclave/darknet_TA.h	/^    struct layer_TA *uf;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
ug	App/darknet.h	/^    struct layer *ug;$/;"	m	struct:layer	typeref:struct:layer::layer
ug	Enclave/darknet_TA.h	/^    struct layer_TA *ug;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
uh	App/darknet.h	/^    struct layer *uh;$/;"	m	struct:layer	typeref:struct:layer::layer
uh	Enclave/darknet_TA.h	/^    struct layer_TA *uh;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
ui	App/darknet.h	/^    struct layer *ui;$/;"	m	struct:layer	typeref:struct:layer::layer
ui	Enclave/darknet_TA.h	/^    struct layer_TA *ui;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
uo	App/darknet.h	/^    struct layer *uo;$/;"	m	struct:layer	typeref:struct:layer::layer
uo	Enclave/darknet_TA.h	/^    struct layer_TA *uo;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
update	App/darknet.h	/^    void (*update)    (struct layer, update_args);$/;"	m	struct:layer
update_TA	App/darknet.h	/^    void (*update_TA)    (struct layer, update_args);$/;"	m	struct:layer
update_TA	Enclave/darknet_TA.h	/^    void (*update_TA)    (struct layer_TA, update_args_TA);$/;"	m	struct:layer_TA
update_args	App/darknet.h	/^} update_args;$/;"	t	typeref:struct:__anon16
update_args_TA	Enclave/darknet_TA.h	/^} update_args_TA;$/;"	t	typeref:struct:__anon5
update_gpu	App/darknet.h	/^    void (*update_gpu)    (struct layer, update_args);$/;"	m	struct:layer
update_layer	App/darknet.h	/^    struct layer *update_layer;$/;"	m	struct:layer	typeref:struct:layer::layer
update_layer	Enclave/darknet_TA.h	/^    struct layer_TA *update_layer;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
upsample_cpu	App/blas.cpp	/^void upsample_cpu(float *in, int w, int h, int c, int batch, int stride, int forward, float scale, float *out)$/;"	f
ur	App/darknet.h	/^    struct layer *ur;$/;"	m	struct:layer	typeref:struct:layer::layer
ur	Enclave/darknet_TA.h	/^    struct layer_TA *ur;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
used	App/option_list.h	/^    int used;$/;"	m	struct:__anon45
uz	App/darknet.h	/^    struct layer *uz;$/;"	m	struct:layer	typeref:struct:layer::layer
uz	Enclave/darknet_TA.h	/^    struct layer_TA *uz;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
v	App/darknet.h	/^    float * v;$/;"	m	struct:layer
v	App/stb_image.h	/^      int h,v;$/;"	m	struct:__anon31::__anon32
v	Enclave/darknet_TA.h	/^    float * v;$/;"	m	struct:layer_TA
val	App/darknet.h	/^    void *val;$/;"	m	struct:node
val	App/option_list.h	/^    char *val;$/;"	m	struct:__anon45
validate_uint32	App/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
vals	App/darknet.h	/^    float **vals;$/;"	m	struct:matrix
value	App/stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon34
values	App/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon30
variance	App/darknet.h	/^    float * variance;$/;"	m	struct:layer
variance	Enclave/darknet_TA.h	/^    float * variance;$/;"	m	struct:layer_TA
variance_array	App/utils.cpp	/^float variance_array(float *a, int n)$/;"	f
variance_cpu	App/blas.cpp	/^void variance_cpu(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_cpu_TA	Enclave/blas_TA.cpp	/^void variance_cpu_TA(float *x, float *mean, int batch, int filters, int spatial, float *variance)$/;"	f
variance_delta	App/darknet.h	/^    float * variance_delta;$/;"	m	struct:layer
variance_delta	Enclave/darknet_TA.h	/^    float * variance_delta;$/;"	m	struct:layer_TA
vs	App/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon33
w	App/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon20
w	App/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon23
w	App/darknet.h	/^    int h, w, c;$/;"	m	struct:network
w	App/darknet.h	/^    int h,w,c;$/;"	m	struct:layer
w	App/darknet.h	/^    int w, h;$/;"	m	struct:__anon21
w	App/darknet.h	/^    int w;$/;"	m	struct:__anon18
w	App/darknet.h	/^    int w;$/;"	m	struct:__anon19
w	App/darknet.h	/^    int w;$/;"	m	struct:load_args
w	App/parser.cpp	/^    int w;$/;"	m	struct:size_params	file:
w	App/stb_image.h	/^   int w,h;$/;"	m	struct:__anon42
w	Enclave/darknet_TA.h	/^    int h, w, c;$/;"	m	struct:network_TA
w	Enclave/darknet_TA.h	/^    int h,w,c;$/;"	m	struct:layer_TA
w2	App/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon31::__anon32
w_lores	App/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon33
weight_updates	App/darknet.h	/^    float * weight_updates;$/;"	m	struct:layer
weight_updates	Enclave/darknet_TA.h	/^    float * weight_updates;$/;"	m	struct:layer_TA
weighted_delta_cpu	App/blas.cpp	/^void weighted_delta_cpu(float *a, float *b, float *s, float *da, float *db, float *ds, int n, float *dc)$/;"	f
weighted_sum_cpu	App/blas.cpp	/^void weighted_sum_cpu(float *a, float *b, float *s, int n, float *c)$/;"	f
weights	App/darknet.h	/^    float * weights;$/;"	m	struct:layer
weights	Enclave/darknet_TA.h	/^    float * weights;$/;"	m	struct:layer_TA
wf	App/darknet.h	/^    struct layer *wf;$/;"	m	struct:layer	typeref:struct:layer::layer
wf	Enclave/darknet_TA.h	/^    struct layer_TA *wf;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
wg	App/darknet.h	/^    struct layer *wg;$/;"	m	struct:layer	typeref:struct:layer::layer
wg	Enclave/darknet_TA.h	/^    struct layer_TA *wg;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
wh	App/darknet.h	/^    struct layer *wh;$/;"	m	struct:layer	typeref:struct:layer::layer
wh	Enclave/darknet_TA.h	/^    struct layer_TA *wh;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
wi	App/darknet.h	/^    struct layer *wi;$/;"	m	struct:layer	typeref:struct:layer::layer
wi	Enclave/darknet_TA.h	/^    struct layer_TA *wi;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
windows	App/image.cpp	/^int windows = 0;$/;"	v
wo	App/darknet.h	/^    struct layer *wo;$/;"	m	struct:layer	typeref:struct:layer::layer
wo	Enclave/darknet_TA.h	/^    struct layer_TA *wo;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
workspace	App/darknet.h	/^    float *workspace;$/;"	m	struct:network
workspace	Enclave/darknet_TA.h	/^    float *workspace;$/;"	m	struct:network_TA
workspaceBOO	App/network.cpp	/^int workspaceBOO(network net)$/;"	f
workspace_size	App/darknet.h	/^    size_t workspace_size;$/;"	m	struct:layer
workspace_size	Enclave/darknet_TA.h	/^    size_t workspace_size;$/;"	m	struct:layer_TA
wr	App/darknet.h	/^    struct layer *wr;$/;"	m	struct:layer	typeref:struct:layer::layer
wr	Enclave/darknet_TA.h	/^    struct layer_TA *wr;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
write_all	App/utils.cpp	/^void write_all(int fd, char *buffer, size_t bytes)$/;"	f
write_all_fail	App/utils.cpp	/^int write_all_fail(int fd, char *buffer, size_t bytes)$/;"	f
write_int	App/utils.cpp	/^void write_int(int fd, int n)$/;"	f
wssize	App/network.cpp	/^int wssize = -1;$/;"	v
wz	App/darknet.h	/^    struct layer *wz;$/;"	m	struct:layer	typeref:struct:layer::layer
wz	Enclave/darknet_TA.h	/^    struct layer_TA *wz;$/;"	m	struct:layer_TA	typeref:struct:layer_TA::layer_TA
x	App/darknet.h	/^    float * x;$/;"	m	struct:layer
x	App/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon20
x	App/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon23
x	App/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon31::__anon32
x	Enclave/darknet_TA.h	/^    float * x;$/;"	m	struct:layer_TA
x_norm	App/darknet.h	/^    float * x_norm;$/;"	m	struct:layer
x_norm	Enclave/darknet_TA.h	/^    float * x_norm;$/;"	m	struct:layer_TA
xnor	App/darknet.h	/^    int xnor;$/;"	m	struct:layer
xnor	Enclave/darknet_TA.h	/^    int xnor;$/;"	m	struct:layer_TA
xor_block	Enclave/aes-gcm.cpp	/^static void xor_block(aes_uchar *dst, const aes_uchar *src)$/;"	f	file:
xtime	Enclave/aes_TA.cpp	/^static uint8_t xtime(uint8_t x)$/;"	f	file:
y	App/darknet.h	/^    float x, y, w, h;$/;"	m	struct:__anon20
y	App/darknet.h	/^    float x,y,w,h;$/;"	m	struct:__anon23
y	App/darknet.h	/^    matrix y;$/;"	m	struct:__anon21
y	App/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon31::__anon32
ypos	App/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon33
ystep	App/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon33
yuv_to_rgb	App/image.cpp	/^void yuv_to_rgb(image im)$/;"	f
z_cpu	App/darknet.h	/^    float *z_cpu;$/;"	m	struct:layer
z_cpu	Enclave/darknet_TA.h	/^    float *z_cpu;$/;"	m	struct:layer_TA
z_distance	App/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon35
z_expandable	App/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon35
z_length	App/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon35
zbuffer	App/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon35
zbuffer_end	App/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon35
zout	App/stb_image.h	/^   char *zout;$/;"	m	struct:__anon35
zout_end	App/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon35
zout_start	App/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon35
